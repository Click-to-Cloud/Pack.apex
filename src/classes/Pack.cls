// Generated by Pack.apex. Please do not modify this file.
public class Pack {
    private static Object nthArg(List<Object> args, Integer index) {
        return index >= 0 && index < args.size() ? args.get(index) : null;
    }

    public static final AddressClsFuncs AddressCls = new AddressClsFuncs();

    public class AddressClsFuncs {
        private Func base = new AddressClsFunc();

        public Func getCity = base.apply('getCity');
        public Func getCountry = base.apply('getCountry');
        public Func getCountryCode = base.apply('getCountryCode');
        public Func getDistance = base.apply('getDistance');
        public Func getGeocodeAccuracy = base.apply('getGeocodeAccuracy');
        public Func getLatitude = base.apply('getLatitude');
        public Func getLongitude = base.apply('getLongitude');
        public Func getPostalCode = base.apply('getPostalCode');
        public Func getState = base.apply('getState');
        public Func getStateCode = base.apply('getStateCode');
        public Func getStreet = base.apply('getStreet');
    }

    private class AddressClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'getCity' && args.size() == 2) {
                return ((Address)nthArg(args, 1)).getCity();
            }
            else if(funcName == 'getCountry' && args.size() == 2) {
                return ((Address)nthArg(args, 1)).getCountry();
            }
            else if(funcName == 'getCountryCode' && args.size() == 2) {
                return ((Address)nthArg(args, 1)).getCountryCode();
            }
            else if(funcName == 'getDistance' && args.size() == 4) {
                return ((Address)nthArg(args, 3)).getDistance((Location)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'getGeocodeAccuracy' && args.size() == 2) {
                return ((Address)nthArg(args, 1)).getGeocodeAccuracy();
            }
            else if(funcName == 'getLatitude' && args.size() == 2) {
                return ((Address)nthArg(args, 1)).getLatitude();
            }
            else if(funcName == 'getLongitude' && args.size() == 2) {
                return ((Address)nthArg(args, 1)).getLongitude();
            }
            else if(funcName == 'getPostalCode' && args.size() == 2) {
                return ((Address)nthArg(args, 1)).getPostalCode();
            }
            else if(funcName == 'getState' && args.size() == 2) {
                return ((Address)nthArg(args, 1)).getState();
            }
            else if(funcName == 'getStateCode' && args.size() == 2) {
                return ((Address)nthArg(args, 1)).getStateCode();
            }
            else if(funcName == 'getStreet' && args.size() == 2) {
                return ((Address)nthArg(args, 1)).getStreet();
            }

            return null;
        }
    }

    public static final ApprovalClsFuncs ApprovalCls = new ApprovalClsFuncs();

    public class ApprovalClsFuncs {
        private Func base = new ApprovalClsFunc();

        public Func isLocked = base.apply('isLocked');
        public Func lock = base.apply('lock');
        public Func process = base.apply('process');
        public Func unlock = base.apply('unlock');
    }

    private class ApprovalClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'isLocked' && nthArg(args, 1) instanceof Id) {
                return Approval.isLocked((Id)nthArg(args, 1));
            }
            else if(funcName == 'isLocked' && nthArg(args, 1) instanceof List<Id>) {
                return Approval.isLocked((List<Id>)nthArg(args, 1));
            }
            else if(funcName == 'isLocked' && nthArg(args, 1) instanceof List<SObject>) {
                return Approval.isLocked((List<SObject>)nthArg(args, 1));
            }
            else if(funcName == 'isLocked' && nthArg(args, 1) instanceof SObject) {
                return Approval.isLocked((SObject)nthArg(args, 1));
            }
            else if(funcName == 'lock' && nthArg(args, 1) instanceof List<Id>) {
                return Approval.lock((List<Id>)nthArg(args, 1));
            }
            else if(funcName == 'lock' && nthArg(args, 1) instanceof SObject) {
                return Approval.lock((SObject)nthArg(args, 1));
            }
            else if(funcName == 'lock' && nthArg(args, 1) instanceof Id) {
                return Approval.lock((Id)nthArg(args, 1));
            }
            else if(funcName == 'lock' && nthArg(args, 1) instanceof List<SObject>) {
                return Approval.lock((List<SObject>)nthArg(args, 1));
            }
            else if(funcName == 'lock' && nthArg(args, 1) instanceof Id && nthArg(args, 2) instanceof Boolean) {
                return Approval.lock((Id)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'lock' && nthArg(args, 1) instanceof List<Id> && nthArg(args, 2) instanceof Boolean) {
                return Approval.lock((List<Id>)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'lock' && nthArg(args, 1) instanceof SObject && nthArg(args, 2) instanceof Boolean) {
                return Approval.lock((SObject)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'lock' && nthArg(args, 1) instanceof List<SObject> && nthArg(args, 2) instanceof Boolean) {
                return Approval.lock((List<SObject>)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'process' && nthArg(args, 1) instanceof Approval.ProcessRequest) {
                return Approval.process((Approval.ProcessRequest)nthArg(args, 1));
            }
            else if(funcName == 'process' && nthArg(args, 1) instanceof Approval.ProcessRequest[]) {
                return Approval.process((Approval.ProcessRequest[])nthArg(args, 1));
            }
            else if(funcName == 'process' && nthArg(args, 1) instanceof Approval.ProcessRequest && nthArg(args, 2) instanceof Boolean) {
                return Approval.process((Approval.ProcessRequest)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'process' && nthArg(args, 1) instanceof Approval.ProcessRequest[] && nthArg(args, 2) instanceof Boolean) {
                return Approval.process((Approval.ProcessRequest[])nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'unlock' && nthArg(args, 1) instanceof Id) {
                return Approval.unlock((Id)nthArg(args, 1));
            }
            else if(funcName == 'unlock' && nthArg(args, 1) instanceof List<Id>) {
                return Approval.unlock((List<Id>)nthArg(args, 1));
            }
            else if(funcName == 'unlock' && nthArg(args, 1) instanceof SObject) {
                return Approval.unlock((SObject)nthArg(args, 1));
            }
            else if(funcName == 'unlock' && nthArg(args, 1) instanceof List<SObject>) {
                return Approval.unlock((List<SObject>)nthArg(args, 1));
            }
            else if(funcName == 'unlock' && nthArg(args, 1) instanceof Id && nthArg(args, 2) instanceof Boolean) {
                return Approval.unlock((Id)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'unlock' && nthArg(args, 1) instanceof List<Id> && nthArg(args, 2) instanceof Boolean) {
                return Approval.unlock((List<Id>)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'unlock' && nthArg(args, 1) instanceof SObject && nthArg(args, 2) instanceof Boolean) {
                return Approval.unlock((SObject)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'unlock' && nthArg(args, 1) instanceof List<SObject> && nthArg(args, 2) instanceof Boolean) {
                return Approval.unlock((List<SObject>)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }

            return null;
        }
    }

    public static final BlobClsFuncs BlobCls = new BlobClsFuncs();

    public class BlobClsFuncs {
        private Func base = new BlobClsFunc();

        public Func toPdf = base.apply('toPdf');
        public Func valueOf = base.apply('valueOf');
        public Func size = base.apply('size');
        public Func toString = base.apply('toString');
    }

    private class BlobClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'toPdf' && args.size() == 2) {
                return Blob.toPdf((String)nthArg(args, 1));
            }
            else if(funcName == 'valueOf' && args.size() == 2) {
                return Blob.valueOf((String)nthArg(args, 1));
            }
            else if(funcName == 'size' && args.size() == 2) {
                return ((Blob)nthArg(args, 1)).size();
            }
            else if(funcName == 'toString' && args.size() == 2) {
                return ((Blob)nthArg(args, 1)).toString();
            }

            return null;
        }
    }

    public static final BooleanClsFuncs BooleanCls = new BooleanClsFuncs();

    public class BooleanClsFuncs {
        private Func base = new BooleanClsFunc();

        public Func valueOf = base.apply('valueOf');
    }

    private class BooleanClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'valueOf' && nthArg(args, 1) instanceof String) {
                return Boolean.valueOf((String)nthArg(args, 1));
            }
            else if(funcName == 'valueOf') {
                return Boolean.valueOf((Object)nthArg(args, 1));
            }

            return null;
        }
    }

    public static final BusinessHoursClsFuncs BusinessHoursCls = new BusinessHoursClsFuncs();

    public class BusinessHoursClsFuncs {
        private Func base = new BusinessHoursClsFunc();

        public Func add = base.apply('add');
        public Func addGmt = base.apply('addGmt');
        public Func diff = base.apply('diff');
        public Func isWithin = base.apply('isWithin');
        public Func nextStartDate = base.apply('nextStartDate');
    }

    private class BusinessHoursClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'add' && args.size() == 4) {
                return BusinessHours.add((String)nthArg(args, 1), (Datetime)nthArg(args, 2), (Long)nthArg(args, 3));
            }
            else if(funcName == 'addGmt' && args.size() == 4) {
                return BusinessHours.addGmt((String)nthArg(args, 1), (Datetime)nthArg(args, 2), (Long)nthArg(args, 3));
            }
            else if(funcName == 'diff' && args.size() == 4) {
                return BusinessHours.diff((String)nthArg(args, 1), (Datetime)nthArg(args, 2), (Datetime)nthArg(args, 3));
            }
            else if(funcName == 'isWithin' && args.size() == 3) {
                return BusinessHours.isWithin((String)nthArg(args, 1), (Datetime)nthArg(args, 2));
            }
            else if(funcName == 'nextStartDate' && args.size() == 3) {
                return BusinessHours.nextStartDate((String)nthArg(args, 1), (Datetime)nthArg(args, 2));
            }

            return null;
        }
    }

    public static final ContinuationClsFuncs ContinuationCls = new ContinuationClsFuncs();

    public class ContinuationClsFuncs {
        private Func base = new ContinuationClsFunc();

        public Func construct = base.apply('construct');
        public Func getResponse = base.apply('getResponse');
        public Func addHttpRequest = base.apply('addHttpRequest');
        public Func getRequests = base.apply('getRequests');
    }

    private class ContinuationClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 2) {
                return new Continuation((Integer)nthArg(args, 1));
            }
            else if(funcName == 'getResponse' && args.size() == 2) {
                return Continuation.getResponse((String)nthArg(args, 1));
            }
            else if(funcName == 'addHttpRequest' && args.size() == 3) {
                return ((Continuation)nthArg(args, 2)).addHttpRequest((System.HttpRequest)nthArg(args, 1));
            }
            else if(funcName == 'getRequests' && args.size() == 2) {
                return ((Continuation)nthArg(args, 1)).getRequests();
            }

            return null;
        }
    }

    public static final CookieClsFuncs CookieCls = new CookieClsFuncs();

    public class CookieClsFuncs {
        private Func base = new CookieClsFunc();

        public Func construct = base.apply('construct');
        public Func getDomain = base.apply('getDomain');
        public Func getMaxAge = base.apply('getMaxAge');
        public Func getName = base.apply('getName');
        public Func getPath = base.apply('getPath');
        public Func getValue = base.apply('getValue');
        public Func isSecure = base.apply('isSecure');
    }

    private class CookieClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 6) {
                return new Cookie((String)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3), (Integer)nthArg(args, 4), (Boolean)nthArg(args, 5));
            }
            else if(funcName == 'getDomain' && args.size() == 2) {
                return ((Cookie)nthArg(args, 1)).getDomain();
            }
            else if(funcName == 'getMaxAge' && args.size() == 2) {
                return ((Cookie)nthArg(args, 1)).getMaxAge();
            }
            else if(funcName == 'getName' && args.size() == 2) {
                return ((Cookie)nthArg(args, 1)).getName();
            }
            else if(funcName == 'getPath' && args.size() == 2) {
                return ((Cookie)nthArg(args, 1)).getPath();
            }
            else if(funcName == 'getValue' && args.size() == 2) {
                return ((Cookie)nthArg(args, 1)).getValue();
            }
            else if(funcName == 'isSecure' && args.size() == 2) {
                return ((Cookie)nthArg(args, 1)).isSecure();
            }

            return null;
        }
    }

    public static final CryptoClsFuncs CryptoCls = new CryptoClsFuncs();

    public class CryptoClsFuncs {
        private Func base = new CryptoClsFunc();

        public Func decrypt = base.apply('decrypt');
        public Func decryptWithManagedIV = base.apply('decryptWithManagedIV');
        public Func encrypt = base.apply('encrypt');
        public Func encryptWithManagedIV = base.apply('encryptWithManagedIV');
        public Func generateDigest = base.apply('generateDigest');
        public Func generateMac = base.apply('generateMac');
        public Func getRandomInteger = base.apply('getRandomInteger');
        public Func getRandomLong = base.apply('getRandomLong');
        public Func sign = base.apply('sign');
        public Func signWithCertificate = base.apply('signWithCertificate');
        public Func signXML = base.apply('signXML');
    }

    private class CryptoClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'decrypt' && args.size() == 5) {
                return Crypto.decrypt((String)nthArg(args, 1), (Blob)nthArg(args, 2), (Blob)nthArg(args, 3), (Blob)nthArg(args, 4));
            }
            else if(funcName == 'decryptWithManagedIV' && args.size() == 4) {
                return Crypto.decryptWithManagedIV((String)nthArg(args, 1), (Blob)nthArg(args, 2), (Blob)nthArg(args, 3));
            }
            else if(funcName == 'encrypt' && args.size() == 5) {
                return Crypto.encrypt((String)nthArg(args, 1), (Blob)nthArg(args, 2), (Blob)nthArg(args, 3), (Blob)nthArg(args, 4));
            }
            else if(funcName == 'encryptWithManagedIV' && args.size() == 4) {
                return Crypto.encryptWithManagedIV((String)nthArg(args, 1), (Blob)nthArg(args, 2), (Blob)nthArg(args, 3));
            }
            else if(funcName == 'generateDigest' && args.size() == 3) {
                return Crypto.generateDigest((String)nthArg(args, 1), (Blob)nthArg(args, 2));
            }
            else if(funcName == 'generateMac' && args.size() == 4) {
                return Crypto.generateMac((String)nthArg(args, 1), (Blob)nthArg(args, 2), (Blob)nthArg(args, 3));
            }
            else if(funcName == 'getRandomInteger' && args.size() == 1) {
                return Crypto.getRandomInteger();
            }
            else if(funcName == 'getRandomLong' && args.size() == 1) {
                return Crypto.getRandomLong();
            }
            else if(funcName == 'sign' && args.size() == 4) {
                return Crypto.sign((String)nthArg(args, 1), (Blob)nthArg(args, 2), (Blob)nthArg(args, 3));
            }
            else if(funcName == 'signWithCertificate' && args.size() == 4) {
                return Crypto.signWithCertificate((String)nthArg(args, 1), (Blob)nthArg(args, 2), (String)nthArg(args, 3));
            }
            else if(funcName == 'signXML' && args.size() == 5) {
                Crypto.signXML((String)nthArg(args, 1), (Dom.XmlNode)nthArg(args, 2), (String)nthArg(args, 3), (String)nthArg(args, 4));
                return null;
            }
            else if(funcName == 'signXML' && args.size() == 6) {
                Crypto.signXML((String)nthArg(args, 1), (Dom.XmlNode)nthArg(args, 2), (String)nthArg(args, 3), (String)nthArg(args, 4), (Dom.XmlNode)nthArg(args, 5));
                return null;
            }

            return null;
        }
    }

    public static final DatabaseClsFuncs DatabaseCls = new DatabaseClsFuncs();

    public class DatabaseClsFuncs {
        private Func base = new DatabaseClsFunc();

        public Func convertLead = base.apply('convertLead');
        public Func countQuery = base.apply('countQuery');
        public Func deleteFn = base.apply('deleteFn');
        public Func deleteAsync = base.apply('deleteAsync');
        public Func deleteImmediate = base.apply('deleteImmediate');
        public Func emptyRecycleBin = base.apply('emptyRecycleBin');
        public Func executeBatch = base.apply('executeBatch');
        public Func getAsyncDeleteResult = base.apply('getAsyncDeleteResult');
        public Func getAsyncLocator = base.apply('getAsyncLocator');
        public Func getAsyncSaveResult = base.apply('getAsyncSaveResult');
        public Func getQueryLocator = base.apply('getQueryLocator');
        public Func insertFn = base.apply('insertFn');
        public Func insertAsync = base.apply('insertAsync');
        public Func insertImmediate = base.apply('insertImmediate');
        public Func mergeFn = base.apply('mergeFn');
        public Func query = base.apply('query');
        public Func rollbackFn = base.apply('rollbackFn');
        public Func setSavepoint = base.apply('setSavepoint');
        public Func undeleteFn = base.apply('undeleteFn');
        public Func updateFn = base.apply('updateFn');
        public Func updateAsync = base.apply('updateAsync');
        public Func updateImmediate = base.apply('updateImmediate');
    }

    private class DatabaseClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'convertLead' && nthArg(args, 1) instanceof Database.LeadConvert && nthArg(args, 2) instanceof Boolean) {
                return Database.convertLead((Database.LeadConvert)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'convertLead' && nthArg(args, 1) instanceof List<Database.LeadConvert> && nthArg(args, 2) instanceof Boolean) {
                return Database.convertLead((List<Database.LeadConvert>)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'countQuery' && args.size() == 2) {
                return Database.countQuery((String)nthArg(args, 1));
            }
            else if(funcName == 'deleteFn' && nthArg(args, 1) instanceof SObject && nthArg(args, 2) instanceof Boolean) {
                return Database.delete((SObject)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'deleteFn' && nthArg(args, 1) instanceof List<Id> && nthArg(args, 2) instanceof Boolean) {
                return Database.delete((List<Id>)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'deleteFn' && nthArg(args, 1) instanceof List<SObject> && nthArg(args, 2) instanceof Boolean) {
                return Database.delete((List<SObject>)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'deleteFn' && nthArg(args, 1) instanceof Id && nthArg(args, 2) instanceof Boolean) {
                return Database.delete((Id)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'deleteAsync' && nthArg(args, 1) instanceof SObject) {
                return Database.deleteAsync((SObject)nthArg(args, 1));
            }
            else if(funcName == 'deleteAsync' && nthArg(args, 1) instanceof List<SObject>) {
                return Database.deleteAsync((List<SObject>)nthArg(args, 1));
            }
            else if(funcName == 'deleteAsync' && nthArg(args, 1) instanceof SObject && nthArg(args, 2) instanceof DataSource.AsyncDeleteCallback) {
                return Database.deleteAsync((SObject)nthArg(args, 1), (DataSource.AsyncDeleteCallback)nthArg(args, 2));
            }
            else if(funcName == 'deleteAsync' && nthArg(args, 1) instanceof List<SObject> && nthArg(args, 2) instanceof DataSource.AsyncDeleteCallback) {
                return Database.deleteAsync((List<SObject>)nthArg(args, 1), (DataSource.AsyncDeleteCallback)nthArg(args, 2));
            }
            else if(funcName == 'deleteImmediate' && nthArg(args, 1) instanceof List<SObject>) {
                return Database.deleteImmediate((List<SObject>)nthArg(args, 1));
            }
            else if(funcName == 'deleteImmediate' && nthArg(args, 1) instanceof SObject) {
                return Database.deleteImmediate((SObject)nthArg(args, 1));
            }
            else if(funcName == 'emptyRecycleBin' && nthArg(args, 1) instanceof SObject) {
                return Database.emptyRecycleBin((SObject)nthArg(args, 1));
            }
            else if(funcName == 'emptyRecycleBin' && nthArg(args, 1) instanceof List<Id>) {
                return Database.emptyRecycleBin((List<Id>)nthArg(args, 1));
            }
            else if(funcName == 'emptyRecycleBin' && nthArg(args, 1) instanceof List<SObject>) {
                return Database.emptyRecycleBin((List<SObject>)nthArg(args, 1));
            }
            else if(funcName == 'executeBatch' && args.size() == 2) {
                return Database.executeBatch((Database.Batchable<SObject>)nthArg(args, 1));
            }
            else if(funcName == 'executeBatch' && args.size() == 3) {
                return Database.executeBatch((Database.Batchable<SObject>)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'getAsyncDeleteResult' && args.size() == 2) {
                return Database.getAsyncDeleteResult((Database.DeleteResult)nthArg(args, 1));
            }
            else if(funcName == 'getAsyncLocator' && nthArg(args, 1) instanceof Database.SaveResult) {
                return Database.getAsyncLocator((Database.SaveResult)nthArg(args, 1));
            }
            else if(funcName == 'getAsyncLocator' && nthArg(args, 1) instanceof Database.DeleteResult) {
                return Database.getAsyncLocator((Database.DeleteResult)nthArg(args, 1));
            }
            else if(funcName == 'getAsyncSaveResult' && args.size() == 2) {
                return Database.getAsyncSaveResult((Database.SaveResult)nthArg(args, 1));
            }
            else if(funcName == 'getQueryLocator' && args.size() == 2) {
                return Database.getQueryLocator((String)nthArg(args, 1));
            }
            else if(funcName == 'insertFn' && nthArg(args, 1) instanceof SObject && nthArg(args, 2) instanceof Boolean) {
                return Database.insert((SObject)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'insertFn' && nthArg(args, 1) instanceof List<SObject> && nthArg(args, 2) instanceof Boolean) {
                return Database.insert((List<SObject>)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'insertFn' && nthArg(args, 1) instanceof SObject && nthArg(args, 2) instanceof Database.DMLOptions) {
                return Database.insert((SObject)nthArg(args, 1), (Database.DMLOptions)nthArg(args, 2));
            }
            else if(funcName == 'insertFn' && nthArg(args, 1) instanceof List<SObject> && nthArg(args, 2) instanceof Database.DMLOptions) {
                return Database.insert((List<SObject>)nthArg(args, 1), (Database.DMLOptions)nthArg(args, 2));
            }
            else if(funcName == 'insertAsync' && nthArg(args, 1) instanceof SObject) {
                return Database.insertAsync((SObject)nthArg(args, 1));
            }
            else if(funcName == 'insertAsync' && nthArg(args, 1) instanceof List<SObject>) {
                return Database.insertAsync((List<SObject>)nthArg(args, 1));
            }
            else if(funcName == 'insertAsync' && nthArg(args, 1) instanceof SObject && nthArg(args, 2) instanceof DataSource.AsyncSaveCallback) {
                return Database.insertAsync((SObject)nthArg(args, 1), (DataSource.AsyncSaveCallback)nthArg(args, 2));
            }
            else if(funcName == 'insertAsync' && nthArg(args, 1) instanceof List<SObject> && nthArg(args, 2) instanceof DataSource.AsyncSaveCallback) {
                return Database.insertAsync((List<SObject>)nthArg(args, 1), (DataSource.AsyncSaveCallback)nthArg(args, 2));
            }
            else if(funcName == 'insertImmediate' && nthArg(args, 1) instanceof List<SObject>) {
                return Database.insertImmediate((List<SObject>)nthArg(args, 1));
            }
            else if(funcName == 'insertImmediate' && nthArg(args, 1) instanceof SObject) {
                return Database.insertImmediate((SObject)nthArg(args, 1));
            }
            else if(funcName == 'mergeFn' && nthArg(args, 1) instanceof sObject && nthArg(args, 2) instanceof Id) {
                return Database.merge((sObject)nthArg(args, 1), (Id)nthArg(args, 2));
            }
            else if(funcName == 'mergeFn' && nthArg(args, 1) instanceof sObject && nthArg(args, 2) instanceof sObject) {
                return Database.merge((sObject)nthArg(args, 1), (sObject)nthArg(args, 2));
            }
            else if(funcName == 'mergeFn' && nthArg(args, 1) instanceof sObject && nthArg(args, 2) instanceof List<Id>) {
                return Database.merge((sObject)nthArg(args, 1), (List<Id>)nthArg(args, 2));
            }
            else if(funcName == 'mergeFn' && nthArg(args, 1) instanceof sObject && nthArg(args, 2) instanceof List<SObject>) {
                return Database.merge((sObject)nthArg(args, 1), (List<SObject>)nthArg(args, 2));
            }
            else if(funcName == 'mergeFn' && nthArg(args, 1) instanceof sObject && nthArg(args, 2) instanceof Id && nthArg(args, 3) instanceof Boolean) {
                return Database.merge((sObject)nthArg(args, 1), (Id)nthArg(args, 2), (Boolean)nthArg(args, 3));
            }
            else if(funcName == 'mergeFn' && nthArg(args, 1) instanceof sObject && nthArg(args, 2) instanceof sObject && nthArg(args, 3) instanceof Boolean) {
                return Database.merge((sObject)nthArg(args, 1), (sObject)nthArg(args, 2), (Boolean)nthArg(args, 3));
            }
            else if(funcName == 'mergeFn' && nthArg(args, 1) instanceof sObject && nthArg(args, 2) instanceof List<Id> && nthArg(args, 3) instanceof Boolean) {
                return Database.merge((sObject)nthArg(args, 1), (List<Id>)nthArg(args, 2), (Boolean)nthArg(args, 3));
            }
            else if(funcName == 'mergeFn' && nthArg(args, 1) instanceof sObject && nthArg(args, 2) instanceof List<SObject> && nthArg(args, 3) instanceof Boolean) {
                return Database.merge((sObject)nthArg(args, 1), (List<SObject>)nthArg(args, 2), (Boolean)nthArg(args, 3));
            }
            else if(funcName == 'query' && args.size() == 2) {
                return Database.query((String)nthArg(args, 1));
            }
            else if(funcName == 'rollbackFn' && args.size() == 2) {
                Database.rollback((System.Savepoint)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setSavepoint' && args.size() == 1) {
                return Database.setSavepoint();
            }
            else if(funcName == 'undeleteFn' && nthArg(args, 1) instanceof sObject[] && nthArg(args, 2) instanceof Boolean) {
                return Database.undelete((sObject[])nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'undeleteFn' && nthArg(args, 1) instanceof ID && nthArg(args, 2) instanceof Boolean) {
                return Database.undelete((ID)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'undeleteFn' && nthArg(args, 1) instanceof ID[] && nthArg(args, 2) instanceof Boolean) {
                return Database.undelete((ID[])nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'undeleteFn' && nthArg(args, 1) instanceof sObject && nthArg(args, 2) instanceof Boolean) {
                return Database.undelete((sObject)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'updateFn' && nthArg(args, 1) instanceof sObject && nthArg(args, 2) instanceof Boolean) {
                return Database.update((sObject)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'updateFn' && nthArg(args, 1) instanceof sObject[] && nthArg(args, 2) instanceof Boolean) {
                return Database.update((sObject[])nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'updateFn' && nthArg(args, 1) instanceof sObject && nthArg(args, 2) instanceof Database.DmlOptions) {
                return Database.update((sObject)nthArg(args, 1), (Database.DmlOptions)nthArg(args, 2));
            }
            else if(funcName == 'updateFn' && nthArg(args, 1) instanceof sObject[] && nthArg(args, 2) instanceof Database.DMLOptions) {
                return Database.update((sObject[])nthArg(args, 1), (Database.DMLOptions)nthArg(args, 2));
            }
            else if(funcName == 'updateAsync' && nthArg(args, 1) instanceof List<SObject>) {
                return Database.updateAsync((List<SObject>)nthArg(args, 1));
            }
            else if(funcName == 'updateAsync' && nthArg(args, 1) instanceof SObject) {
                return Database.updateAsync((SObject)nthArg(args, 1));
            }
            else if(funcName == 'updateAsync' && nthArg(args, 1) instanceof List<SObject> && nthArg(args, 2) instanceof DataSource.AsyncSaveCallback) {
                return Database.updateAsync((List<SObject>)nthArg(args, 1), (DataSource.AsyncSaveCallback)nthArg(args, 2));
            }
            else if(funcName == 'updateAsync' && nthArg(args, 1) instanceof SObject && nthArg(args, 2) instanceof DataSource.AsyncSaveCallback) {
                return Database.updateAsync((SObject)nthArg(args, 1), (DataSource.AsyncSaveCallback)nthArg(args, 2));
            }
            else if(funcName == 'updateImmediate' && nthArg(args, 1) instanceof List<SObject>) {
                return Database.updateImmediate((List<SObject>)nthArg(args, 1));
            }
            else if(funcName == 'updateImmediate' && nthArg(args, 1) instanceof SObject) {
                return Database.updateImmediate((SObject)nthArg(args, 1));
            }

            return null;
        }
    }

    public static final DateClsFuncs DateCls = new DateClsFuncs();

    public class DateClsFuncs {
        private Func base = new DateClsFunc();

        public Func daysInMonth = base.apply('daysInMonth');
        public Func isLeapYear = base.apply('isLeapYear');
        public Func newInstance = base.apply('newInstance');
        public Func parse = base.apply('parse');
        public Func today = base.apply('today');
        public Func valueOf = base.apply('valueOf');
        public Func addDays = base.apply('addDays');
        public Func addMonths = base.apply('addMonths');
        public Func addYears = base.apply('addYears');
        public Func day = base.apply('day');
        public Func dayOfYear = base.apply('dayOfYear');
        public Func daysBetween = base.apply('daysBetween');
        public Func format = base.apply('format');
        public Func isSameDay = base.apply('isSameDay');
        public Func month = base.apply('month');
        public Func monthsBetween = base.apply('monthsBetween');
        public Func toStartOfMonth = base.apply('toStartOfMonth');
        public Func toStartOfWeek = base.apply('toStartOfWeek');
        public Func year = base.apply('year');
    }

    private class DateClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'daysInMonth' && args.size() == 3) {
                return Date.daysInMonth((Integer)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'isLeapYear' && args.size() == 2) {
                return Date.isLeapYear((Integer)nthArg(args, 1));
            }
            else if(funcName == 'newInstance' && args.size() == 4) {
                return Date.newInstance((Integer)nthArg(args, 1), (Integer)nthArg(args, 2), (Integer)nthArg(args, 3));
            }
            else if(funcName == 'parse' && args.size() == 2) {
                return Date.parse((String)nthArg(args, 1));
            }
            else if(funcName == 'today' && args.size() == 1) {
                return Date.today();
            }
            else if(funcName == 'valueOf' && nthArg(args, 1) instanceof String) {
                return Date.valueOf((String)nthArg(args, 1));
            }
            else if(funcName == 'valueOf') {
                return Date.valueOf((Object)nthArg(args, 1));
            }
            else if(funcName == 'addDays' && args.size() == 3) {
                return ((Date)nthArg(args, 2)).addDays((Integer)nthArg(args, 1));
            }
            else if(funcName == 'addMonths' && args.size() == 3) {
                return ((Date)nthArg(args, 2)).addMonths((Integer)nthArg(args, 1));
            }
            else if(funcName == 'addYears' && args.size() == 3) {
                return ((Date)nthArg(args, 2)).addYears((Integer)nthArg(args, 1));
            }
            else if(funcName == 'day' && args.size() == 2) {
                return ((Date)nthArg(args, 1)).day();
            }
            else if(funcName == 'dayOfYear' && args.size() == 2) {
                return ((Date)nthArg(args, 1)).dayOfYear();
            }
            else if(funcName == 'daysBetween' && args.size() == 3) {
                return ((Date)nthArg(args, 2)).daysBetween((Date)nthArg(args, 1));
            }
            else if(funcName == 'format' && args.size() == 2) {
                return ((Date)nthArg(args, 1)).format();
            }
            else if(funcName == 'isSameDay' && args.size() == 3) {
                return ((Date)nthArg(args, 2)).isSameDay((Date)nthArg(args, 1));
            }
            else if(funcName == 'month' && args.size() == 2) {
                return ((Date)nthArg(args, 1)).month();
            }
            else if(funcName == 'monthsBetween' && args.size() == 3) {
                return ((Date)nthArg(args, 2)).monthsBetween((Date)nthArg(args, 1));
            }
            else if(funcName == 'toStartOfMonth' && args.size() == 2) {
                return ((Date)nthArg(args, 1)).toStartOfMonth();
            }
            else if(funcName == 'toStartOfWeek' && args.size() == 2) {
                return ((Date)nthArg(args, 1)).toStartOfWeek();
            }
            else if(funcName == 'year' && args.size() == 2) {
                return ((Date)nthArg(args, 1)).year();
            }

            return null;
        }
    }

    public static final DatetimeClsFuncs DatetimeCls = new DatetimeClsFuncs();

    public class DatetimeClsFuncs {
        private Func base = new DatetimeClsFunc();

        public Func newInstance = base.apply('newInstance');
        public Func newInstanceGmt = base.apply('newInstanceGmt');
        public Func now = base.apply('now');
        public Func parse = base.apply('parse');
        public Func valueOf = base.apply('valueOf');
        public Func valueOfGmt = base.apply('valueOfGmt');
        public Func addDays = base.apply('addDays');
        public Func addHours = base.apply('addHours');
        public Func addMinutes = base.apply('addMinutes');
        public Func addMonths = base.apply('addMonths');
        public Func addSeconds = base.apply('addSeconds');
        public Func addYears = base.apply('addYears');
        public Func dateFn = base.apply('dateFn');
        public Func dateGMT = base.apply('dateGMT');
        public Func day = base.apply('day');
        public Func dayGmt = base.apply('dayGmt');
        public Func dayOfYear = base.apply('dayOfYear');
        public Func dayOfYearGmt = base.apply('dayOfYearGmt');
        public Func format = base.apply('format');
        public Func formatGmt = base.apply('formatGmt');
        public Func formatLong = base.apply('formatLong');
        public Func getTime = base.apply('getTime');
        public Func hour = base.apply('hour');
        public Func hourGmt = base.apply('hourGmt');
        public Func isSameDay = base.apply('isSameDay');
        public Func millisecond = base.apply('millisecond');
        public Func millisecondGmt = base.apply('millisecondGmt');
        public Func minute = base.apply('minute');
        public Func minuteGmt = base.apply('minuteGmt');
        public Func month = base.apply('month');
        public Func monthGmt = base.apply('monthGmt');
        public Func second = base.apply('second');
        public Func secondGmt = base.apply('secondGmt');
        public Func timeFn = base.apply('timeFn');
        public Func timeGmt = base.apply('timeGmt');
        public Func year = base.apply('year');
        public Func yearGmt = base.apply('yearGmt');
    }

    private class DatetimeClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'newInstance' && args.size() == 2) {
                return Datetime.newInstance((Long)nthArg(args, 1));
            }
            else if(funcName == 'newInstance' && args.size() == 3) {
                return Datetime.newInstance((Date)nthArg(args, 1), (Time)nthArg(args, 2));
            }
            else if(funcName == 'newInstance' && args.size() == 4) {
                return Datetime.newInstance((Integer)nthArg(args, 1), (Integer)nthArg(args, 2), (Integer)nthArg(args, 3));
            }
            else if(funcName == 'newInstance' && args.size() == 7) {
                return Datetime.newInstance((Integer)nthArg(args, 1), (Integer)nthArg(args, 2), (Integer)nthArg(args, 3), (Integer)nthArg(args, 4), (Integer)nthArg(args, 5), (Integer)nthArg(args, 6));
            }
            else if(funcName == 'newInstanceGmt' && args.size() == 3) {
                return Datetime.newInstanceGmt((Date)nthArg(args, 1), (Time)nthArg(args, 2));
            }
            else if(funcName == 'newInstanceGmt' && args.size() == 4) {
                return Datetime.newInstanceGmt((Integer)nthArg(args, 1), (Integer)nthArg(args, 2), (Integer)nthArg(args, 3));
            }
            else if(funcName == 'newInstanceGmt' && args.size() == 7) {
                return Datetime.newInstanceGmt((Integer)nthArg(args, 1), (Integer)nthArg(args, 2), (Integer)nthArg(args, 3), (Integer)nthArg(args, 4), (Integer)nthArg(args, 5), (Integer)nthArg(args, 6));
            }
            else if(funcName == 'now' && args.size() == 1) {
                return Datetime.now();
            }
            else if(funcName == 'parse' && args.size() == 2) {
                return Datetime.parse((String)nthArg(args, 1));
            }
            else if(funcName == 'valueOf' && nthArg(args, 1) instanceof String) {
                return Datetime.valueOf((String)nthArg(args, 1));
            }
            else if(funcName == 'valueOf') {
                return Datetime.valueOf((Object)nthArg(args, 1));
            }
            else if(funcName == 'valueOfGmt' && args.size() == 2) {
                return Datetime.valueOfGmt((String)nthArg(args, 1));
            }
            else if(funcName == 'addDays' && args.size() == 3) {
                return ((Datetime)nthArg(args, 2)).addDays((Integer)nthArg(args, 1));
            }
            else if(funcName == 'addHours' && args.size() == 3) {
                return ((Datetime)nthArg(args, 2)).addHours((Integer)nthArg(args, 1));
            }
            else if(funcName == 'addMinutes' && args.size() == 3) {
                return ((Datetime)nthArg(args, 2)).addMinutes((Integer)nthArg(args, 1));
            }
            else if(funcName == 'addMonths' && args.size() == 3) {
                return ((Datetime)nthArg(args, 2)).addMonths((Integer)nthArg(args, 1));
            }
            else if(funcName == 'addSeconds' && args.size() == 3) {
                return ((Datetime)nthArg(args, 2)).addSeconds((Integer)nthArg(args, 1));
            }
            else if(funcName == 'addYears' && args.size() == 3) {
                return ((Datetime)nthArg(args, 2)).addYears((Integer)nthArg(args, 1));
            }
            else if(funcName == 'dateFn' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).date();
            }
            else if(funcName == 'dateGMT' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).dateGMT();
            }
            else if(funcName == 'day' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).day();
            }
            else if(funcName == 'dayGmt' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).dayGmt();
            }
            else if(funcName == 'dayOfYear' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).dayOfYear();
            }
            else if(funcName == 'dayOfYearGmt' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).dayOfYearGmt();
            }
            else if(funcName == 'format' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).format();
            }
            else if(funcName == 'format' && args.size() == 3) {
                return ((Datetime)nthArg(args, 2)).format((String)nthArg(args, 1));
            }
            else if(funcName == 'format' && args.size() == 4) {
                return ((Datetime)nthArg(args, 3)).format((String)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'formatGmt' && args.size() == 3) {
                return ((Datetime)nthArg(args, 2)).formatGmt((String)nthArg(args, 1));
            }
            else if(funcName == 'formatLong' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).formatLong();
            }
            else if(funcName == 'getTime' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).getTime();
            }
            else if(funcName == 'hour' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).hour();
            }
            else if(funcName == 'hourGmt' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).hourGmt();
            }
            else if(funcName == 'isSameDay' && args.size() == 3) {
                return ((Datetime)nthArg(args, 2)).isSameDay((Datetime)nthArg(args, 1));
            }
            else if(funcName == 'millisecond' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).millisecond();
            }
            else if(funcName == 'millisecondGmt' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).millisecondGmt();
            }
            else if(funcName == 'minute' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).minute();
            }
            else if(funcName == 'minuteGmt' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).minuteGmt();
            }
            else if(funcName == 'month' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).month();
            }
            else if(funcName == 'monthGmt' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).monthGmt();
            }
            else if(funcName == 'second' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).second();
            }
            else if(funcName == 'secondGmt' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).secondGmt();
            }
            else if(funcName == 'timeFn' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).time();
            }
            else if(funcName == 'timeGmt' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).timeGmt();
            }
            else if(funcName == 'year' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).year();
            }
            else if(funcName == 'yearGmt' && args.size() == 2) {
                return ((Datetime)nthArg(args, 1)).yearGmt();
            }

            return null;
        }
    }

    public static final DecimalClsFuncs DecimalCls = new DecimalClsFuncs();

    public class DecimalClsFuncs {
        private Func base = new DecimalClsFunc();

        public Func valueOf = base.apply('valueOf');
        public Func abs = base.apply('abs');
        public Func divide = base.apply('divide');
        public Func doubleValue = base.apply('doubleValue');
        public Func format = base.apply('format');
        public Func intValue = base.apply('intValue');
        public Func longValue = base.apply('longValue');
        public Func pow = base.apply('pow');
        public Func precision = base.apply('precision');
        public Func round = base.apply('round');
        public Func scale = base.apply('scale');
        public Func setScale = base.apply('setScale');
        public Func stripTrailingZeros = base.apply('stripTrailingZeros');
        public Func toPlainString = base.apply('toPlainString');
    }

    private class DecimalClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'valueOf' && nthArg(args, 1) instanceof String) {
                return Decimal.valueOf((String)nthArg(args, 1));
            }
            else if(funcName == 'valueOf' && nthArg(args, 1) instanceof Long) {
                return Decimal.valueOf((Long)nthArg(args, 1));
            }
            else if(funcName == 'valueOf' && nthArg(args, 1) instanceof Double) {
                return Decimal.valueOf((Double)nthArg(args, 1));
            }
            else if(funcName == 'abs' && args.size() == 2) {
                return ((Decimal)nthArg(args, 1)).abs();
            }
            else if(funcName == 'divide' && args.size() == 4) {
                return ((Decimal)nthArg(args, 3)).divide((Decimal)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'divide' && args.size() == 5) {
                return ((Decimal)nthArg(args, 4)).divide((Decimal)nthArg(args, 1), (Integer)nthArg(args, 2), (System.RoundingMode)nthArg(args, 3));
            }
            else if(funcName == 'doubleValue' && args.size() == 2) {
                return ((Decimal)nthArg(args, 1)).doubleValue();
            }
            else if(funcName == 'format' && args.size() == 2) {
                return ((Decimal)nthArg(args, 1)).format();
            }
            else if(funcName == 'intValue' && args.size() == 2) {
                return ((Decimal)nthArg(args, 1)).intValue();
            }
            else if(funcName == 'longValue' && args.size() == 2) {
                return ((Decimal)nthArg(args, 1)).longValue();
            }
            else if(funcName == 'pow' && args.size() == 3) {
                return ((Decimal)nthArg(args, 2)).pow((Integer)nthArg(args, 1));
            }
            else if(funcName == 'precision' && args.size() == 2) {
                return ((Decimal)nthArg(args, 1)).precision();
            }
            else if(funcName == 'round' && args.size() == 2) {
                return ((Decimal)nthArg(args, 1)).round();
            }
            else if(funcName == 'round' && args.size() == 3) {
                return ((Decimal)nthArg(args, 2)).round((System.RoundingMode)nthArg(args, 1));
            }
            else if(funcName == 'scale' && args.size() == 2) {
                return ((Decimal)nthArg(args, 1)).scale();
            }
            else if(funcName == 'setScale' && args.size() == 3) {
                return ((Decimal)nthArg(args, 2)).setScale((Integer)nthArg(args, 1));
            }
            else if(funcName == 'setScale' && args.size() == 4) {
                return ((Decimal)nthArg(args, 3)).setScale((Integer)nthArg(args, 1), (System.RoundingMode)nthArg(args, 2));
            }
            else if(funcName == 'stripTrailingZeros' && args.size() == 2) {
                return ((Decimal)nthArg(args, 1)).stripTrailingZeros();
            }
            else if(funcName == 'toPlainString' && args.size() == 2) {
                return ((Decimal)nthArg(args, 1)).toPlainString();
            }

            return null;
        }
    }

    public static final DoubleClsFuncs DoubleCls = new DoubleClsFuncs();

    public class DoubleClsFuncs {
        private Func base = new DoubleClsFunc();

        public Func valueOf = base.apply('valueOf');
        public Func format = base.apply('format');
        public Func intValue = base.apply('intValue');
        public Func longValue = base.apply('longValue');
        public Func round = base.apply('round');
    }

    private class DoubleClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'valueOf' && nthArg(args, 1) instanceof String) {
                return Double.valueOf((String)nthArg(args, 1));
            }
            else if(funcName == 'valueOf') {
                return Double.valueOf((Object)nthArg(args, 1));
            }
            else if(funcName == 'format' && args.size() == 2) {
                return ((Double)nthArg(args, 1)).format();
            }
            else if(funcName == 'intValue' && args.size() == 2) {
                return ((Double)nthArg(args, 1)).intValue();
            }
            else if(funcName == 'longValue' && args.size() == 2) {
                return ((Double)nthArg(args, 1)).longValue();
            }
            else if(funcName == 'round' && args.size() == 2) {
                return ((Double)nthArg(args, 1)).round();
            }

            return null;
        }
    }

    public static final EncodingUtilClsFuncs EncodingUtilCls = new EncodingUtilClsFuncs();

    public class EncodingUtilClsFuncs {
        private Func base = new EncodingUtilClsFunc();

        public Func base64Decode = base.apply('base64Decode');
        public Func base64Encode = base.apply('base64Encode');
        public Func convertFromHex = base.apply('convertFromHex');
        public Func convertToHex = base.apply('convertToHex');
        public Func urlDecode = base.apply('urlDecode');
        public Func urlEncode = base.apply('urlEncode');
    }

    private class EncodingUtilClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'base64Decode' && args.size() == 2) {
                return EncodingUtil.base64Decode((String)nthArg(args, 1));
            }
            else if(funcName == 'base64Encode' && args.size() == 2) {
                return EncodingUtil.base64Encode((Blob)nthArg(args, 1));
            }
            else if(funcName == 'convertFromHex' && args.size() == 2) {
                return EncodingUtil.convertFromHex((String)nthArg(args, 1));
            }
            else if(funcName == 'convertToHex' && args.size() == 2) {
                return EncodingUtil.convertToHex((Blob)nthArg(args, 1));
            }
            else if(funcName == 'urlDecode' && args.size() == 3) {
                return EncodingUtil.urlDecode((String)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'urlEncode' && args.size() == 3) {
                return EncodingUtil.urlEncode((String)nthArg(args, 1), (String)nthArg(args, 2));
            }

            return null;
        }
    }

    public static final EventBusClsFuncs EventBusCls = new EventBusClsFuncs();

    public class EventBusClsFuncs {
        private Func base = new EventBusClsFunc();

        public Func publish = base.apply('publish');
    }

    private class EventBusClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'publish' && nthArg(args, 1) instanceof SObject) {
                return EventBus.publish((SObject)nthArg(args, 1));
            }
            else if(funcName == 'publish' && nthArg(args, 1) instanceof List<SObject>) {
                return EventBus.publish((List<SObject>)nthArg(args, 1));
            }

            return null;
        }
    }

    public static final FeatureManagementClsFuncs FeatureManagementCls = new FeatureManagementClsFuncs();

    public class FeatureManagementClsFuncs {
        private Func base = new FeatureManagementClsFunc();

        public Func changeProtection = base.apply('changeProtection');
        public Func checkPackageBooleanValue = base.apply('checkPackageBooleanValue');
        public Func checkPackageDateValue = base.apply('checkPackageDateValue');
        public Func checkPackageIntegerValue = base.apply('checkPackageIntegerValue');
        public Func checkPermission = base.apply('checkPermission');
        public Func setPackageBooleanValue = base.apply('setPackageBooleanValue');
        public Func setPackageDateValue = base.apply('setPackageDateValue');
        public Func setPackageIntegerValue = base.apply('setPackageIntegerValue');
    }

    private class FeatureManagementClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'changeProtection' && args.size() == 4) {
                FeatureManagement.changeProtection((String)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3));
                return null;
            }
            else if(funcName == 'checkPackageBooleanValue' && args.size() == 2) {
                return FeatureManagement.checkPackageBooleanValue((String)nthArg(args, 1));
            }
            else if(funcName == 'checkPackageDateValue' && args.size() == 2) {
                return FeatureManagement.checkPackageDateValue((String)nthArg(args, 1));
            }
            else if(funcName == 'checkPackageIntegerValue' && args.size() == 2) {
                return FeatureManagement.checkPackageIntegerValue((String)nthArg(args, 1));
            }
            else if(funcName == 'checkPermission' && args.size() == 2) {
                return FeatureManagement.checkPermission((String)nthArg(args, 1));
            }
            else if(funcName == 'setPackageBooleanValue' && args.size() == 3) {
                FeatureManagement.setPackageBooleanValue((String)nthArg(args, 1), (Boolean)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'setPackageDateValue' && args.size() == 3) {
                FeatureManagement.setPackageDateValue((String)nthArg(args, 1), (Date)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'setPackageIntegerValue' && args.size() == 3) {
                FeatureManagement.setPackageIntegerValue((String)nthArg(args, 1), (Integer)nthArg(args, 2));
                return null;
            }

            return null;
        }
    }

    public static final FlexQueueClsFuncs FlexQueueCls = new FlexQueueClsFuncs();

    public class FlexQueueClsFuncs {
        private Func base = new FlexQueueClsFunc();

        public Func moveAfterJob = base.apply('moveAfterJob');
        public Func moveBeforeJob = base.apply('moveBeforeJob');
        public Func moveJobToEnd = base.apply('moveJobToEnd');
        public Func moveJobToFront = base.apply('moveJobToFront');
    }

    private class FlexQueueClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'moveAfterJob' && args.size() == 3) {
                return FlexQueue.moveAfterJob((Id)nthArg(args, 1), (Id)nthArg(args, 2));
            }
            else if(funcName == 'moveBeforeJob' && args.size() == 3) {
                return FlexQueue.moveBeforeJob((Id)nthArg(args, 1), (Id)nthArg(args, 2));
            }
            else if(funcName == 'moveJobToEnd' && args.size() == 2) {
                return FlexQueue.moveJobToEnd((Id)nthArg(args, 1));
            }
            else if(funcName == 'moveJobToFront' && args.size() == 2) {
                return FlexQueue.moveJobToFront((Id)nthArg(args, 1));
            }

            return null;
        }
    }

    public static final HttpClsFuncs HttpCls = new HttpClsFuncs();

    public class HttpClsFuncs {
        private Func base = new HttpClsFunc();

        public Func send = base.apply('send');
        public Func toString = base.apply('toString');
    }

    private class HttpClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'send' && args.size() == 3) {
                return ((Http)nthArg(args, 2)).send((HttpRequest)nthArg(args, 1));
            }
            else if(funcName == 'toString' && args.size() == 2) {
                return ((Http)nthArg(args, 1)).toString();
            }

            return null;
        }
    }

    public static final HttpRequestClsFuncs HttpRequestCls = new HttpRequestClsFuncs();

    public class HttpRequestClsFuncs {
        private Func base = new HttpRequestClsFunc();

        public Func construct = base.apply('construct');
        public Func getBody = base.apply('getBody');
        public Func getBodyAsBlob = base.apply('getBodyAsBlob');
        public Func getBodyDocument = base.apply('getBodyDocument');
        public Func getCompressed = base.apply('getCompressed');
        public Func getEndpoint = base.apply('getEndpoint');
        public Func getHeader = base.apply('getHeader');
        public Func getMethod = base.apply('getMethod');
        public Func setBody = base.apply('setBody');
        public Func setBodyAsBlob = base.apply('setBodyAsBlob');
        public Func setBodyDocument = base.apply('setBodyDocument');
        public Func setClientCertificate = base.apply('setClientCertificate');
        public Func setClientCertificateName = base.apply('setClientCertificateName');
        public Func setCompressed = base.apply('setCompressed');
        public Func setEndpoint = base.apply('setEndpoint');
        public Func setHeader = base.apply('setHeader');
        public Func setMethod = base.apply('setMethod');
        public Func setTimeout = base.apply('setTimeout');
        public Func toString = base.apply('toString');
    }

    private class HttpRequestClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 1) {
                return new HttpRequest();
            }
            else if(funcName == 'getBody' && args.size() == 2) {
                return ((HttpRequest)nthArg(args, 1)).getBody();
            }
            else if(funcName == 'getBodyAsBlob' && args.size() == 2) {
                return ((HttpRequest)nthArg(args, 1)).getBodyAsBlob();
            }
            else if(funcName == 'getBodyDocument' && args.size() == 2) {
                return ((HttpRequest)nthArg(args, 1)).getBodyDocument();
            }
            else if(funcName == 'getCompressed' && args.size() == 2) {
                return ((HttpRequest)nthArg(args, 1)).getCompressed();
            }
            else if(funcName == 'getEndpoint' && args.size() == 2) {
                return ((HttpRequest)nthArg(args, 1)).getEndpoint();
            }
            else if(funcName == 'getHeader' && args.size() == 3) {
                return ((HttpRequest)nthArg(args, 2)).getHeader((String)nthArg(args, 1));
            }
            else if(funcName == 'getMethod' && args.size() == 2) {
                return ((HttpRequest)nthArg(args, 1)).getMethod();
            }
            else if(funcName == 'setBody' && args.size() == 3) {
                ((HttpRequest)nthArg(args, 2)).setBody((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setBodyAsBlob' && args.size() == 3) {
                ((HttpRequest)nthArg(args, 2)).setBodyAsBlob((Blob)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setBodyDocument' && args.size() == 3) {
                ((HttpRequest)nthArg(args, 2)).setBodyDocument((Dom.Document)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setClientCertificate' && args.size() == 4) {
                ((HttpRequest)nthArg(args, 3)).setClientCertificate((String)nthArg(args, 1), (String)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'setClientCertificateName' && args.size() == 3) {
                ((HttpRequest)nthArg(args, 2)).setClientCertificateName((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setCompressed' && args.size() == 3) {
                ((HttpRequest)nthArg(args, 2)).setCompressed((Boolean)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setEndpoint' && args.size() == 3) {
                ((HttpRequest)nthArg(args, 2)).setEndpoint((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setHeader' && args.size() == 4) {
                ((HttpRequest)nthArg(args, 3)).setHeader((String)nthArg(args, 1), (String)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'setMethod' && args.size() == 3) {
                ((HttpRequest)nthArg(args, 2)).setMethod((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setTimeout' && args.size() == 3) {
                ((HttpRequest)nthArg(args, 2)).setTimeout((Integer)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'toString' && args.size() == 2) {
                return ((HttpRequest)nthArg(args, 1)).toString();
            }

            return null;
        }
    }

    public static final HttpResponseClsFuncs HttpResponseCls = new HttpResponseClsFuncs();

    public class HttpResponseClsFuncs {
        private Func base = new HttpResponseClsFunc();

        public Func getBody = base.apply('getBody');
        public Func getBodyAsBlob = base.apply('getBodyAsBlob');
        public Func getBodyDocument = base.apply('getBodyDocument');
        public Func getHeader = base.apply('getHeader');
        public Func getHeaderKeys = base.apply('getHeaderKeys');
        public Func getStatus = base.apply('getStatus');
        public Func getStatusCode = base.apply('getStatusCode');
        public Func getXmlStreamReader = base.apply('getXmlStreamReader');
        public Func setBody = base.apply('setBody');
        public Func setBodyAsBlob = base.apply('setBodyAsBlob');
        public Func setHeader = base.apply('setHeader');
        public Func setStatus = base.apply('setStatus');
        public Func setStatusCode = base.apply('setStatusCode');
        public Func toString = base.apply('toString');
    }

    private class HttpResponseClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'getBody' && args.size() == 2) {
                return ((HttpResponse)nthArg(args, 1)).getBody();
            }
            else if(funcName == 'getBodyAsBlob' && args.size() == 2) {
                return ((HttpResponse)nthArg(args, 1)).getBodyAsBlob();
            }
            else if(funcName == 'getBodyDocument' && args.size() == 2) {
                return ((HttpResponse)nthArg(args, 1)).getBodyDocument();
            }
            else if(funcName == 'getHeader' && args.size() == 3) {
                return ((HttpResponse)nthArg(args, 2)).getHeader((String)nthArg(args, 1));
            }
            else if(funcName == 'getHeaderKeys' && args.size() == 2) {
                return ((HttpResponse)nthArg(args, 1)).getHeaderKeys();
            }
            else if(funcName == 'getStatus' && args.size() == 2) {
                return ((HttpResponse)nthArg(args, 1)).getStatus();
            }
            else if(funcName == 'getStatusCode' && args.size() == 2) {
                return ((HttpResponse)nthArg(args, 1)).getStatusCode();
            }
            else if(funcName == 'getXmlStreamReader' && args.size() == 2) {
                return ((HttpResponse)nthArg(args, 1)).getXmlStreamReader();
            }
            else if(funcName == 'setBody' && args.size() == 3) {
                ((HttpResponse)nthArg(args, 2)).setBody((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setBodyAsBlob' && args.size() == 3) {
                ((HttpResponse)nthArg(args, 2)).setBodyAsBlob((Blob)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setHeader' && args.size() == 4) {
                ((HttpResponse)nthArg(args, 3)).setHeader((String)nthArg(args, 1), (String)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'setStatus' && args.size() == 3) {
                ((HttpResponse)nthArg(args, 2)).setStatus((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setStatusCode' && args.size() == 3) {
                ((HttpResponse)nthArg(args, 2)).setStatusCode((Integer)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'toString' && args.size() == 2) {
                return ((HttpResponse)nthArg(args, 1)).toString();
            }

            return null;
        }
    }

    public static final IdClsFuncs IdCls = new IdClsFuncs();

    public class IdClsFuncs {
        private Func base = new IdClsFunc();

        public Func valueOf = base.apply('valueOf');
        public Func getSObjectType = base.apply('getSObjectType');
    }

    private class IdClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'valueOf' && args.size() == 2) {
                return Id.valueOf((String)nthArg(args, 1));
            }
            else if(funcName == 'getSObjectType' && args.size() == 2) {
                return ((Id)nthArg(args, 1)).getSObjectType();
            }

            return null;
        }
    }

    public static final IdeasClsFuncs IdeasCls = new IdeasClsFuncs();

    public class IdeasClsFuncs {
        private Func base = new IdeasClsFunc();

        public Func findSimilar = base.apply('findSimilar');
        public Func getAllRecentReplies = base.apply('getAllRecentReplies');
        public Func getReadRecentReplies = base.apply('getReadRecentReplies');
        public Func getUnreadRecentReplies = base.apply('getUnreadRecentReplies');
        public Func markRead = base.apply('markRead');
    }

    private class IdeasClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'findSimilar' && args.size() == 2) {
                return Ideas.findSimilar((Idea)nthArg(args, 1));
            }
            else if(funcName == 'getAllRecentReplies' && args.size() == 3) {
                return Ideas.getAllRecentReplies((String)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'getReadRecentReplies' && args.size() == 3) {
                return Ideas.getReadRecentReplies((String)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'getUnreadRecentReplies' && args.size() == 3) {
                return Ideas.getUnreadRecentReplies((String)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'markRead' && args.size() == 2) {
                Ideas.markRead((String)nthArg(args, 1));
                return null;
            }

            return null;
        }
    }

    public static final IntegerClsFuncs IntegerCls = new IntegerClsFuncs();

    public class IntegerClsFuncs {
        private Func base = new IntegerClsFunc();

        public Func valueOf = base.apply('valueOf');
        public Func format = base.apply('format');
    }

    private class IntegerClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'valueOf' && nthArg(args, 1) instanceof String) {
                return Integer.valueOf((String)nthArg(args, 1));
            }
            else if(funcName == 'valueOf') {
                return Integer.valueOf((Object)nthArg(args, 1));
            }
            else if(funcName == 'format' && args.size() == 2) {
                return ((Integer)nthArg(args, 1)).format();
            }

            return null;
        }
    }

    public static final JSONClsFuncs JSONCls = new JSONClsFuncs();

    public class JSONClsFuncs {
        private Func base = new JSONClsFunc();

        public Func createGenerator = base.apply('createGenerator');
        public Func createParser = base.apply('createParser');
        public Func deserialize = base.apply('deserialize');
        public Func deserializeStrict = base.apply('deserializeStrict');
        public Func deserializeUntyped = base.apply('deserializeUntyped');
        public Func serialize = base.apply('serialize');
        public Func serializePretty = base.apply('serializePretty');
    }

    private class JSONClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'createGenerator' && args.size() == 2) {
                return JSON.createGenerator((Boolean)nthArg(args, 1));
            }
            else if(funcName == 'createParser' && args.size() == 2) {
                return JSON.createParser((String)nthArg(args, 1));
            }
            else if(funcName == 'deserialize' && args.size() == 3) {
                return JSON.deserialize((String)nthArg(args, 1), (System.Type)nthArg(args, 2));
            }
            else if(funcName == 'deserializeStrict' && args.size() == 3) {
                return JSON.deserializeStrict((String)nthArg(args, 1), (System.Type)nthArg(args, 2));
            }
            else if(funcName == 'deserializeUntyped' && args.size() == 2) {
                return JSON.deserializeUntyped((String)nthArg(args, 1));
            }
            else if(funcName == 'serialize' && args.size() == 2) {
                return JSON.serialize((Object)nthArg(args, 1));
            }
            else if(funcName == 'serialize' && args.size() == 3) {
                return JSON.serialize((Object)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'serializePretty' && args.size() == 2) {
                return JSON.serializePretty((Object)nthArg(args, 1));
            }
            else if(funcName == 'serializePretty' && args.size() == 3) {
                return JSON.serializePretty((Object)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }

            return null;
        }
    }

    public static final JSONGeneratorClsFuncs JSONGeneratorCls = new JSONGeneratorClsFuncs();

    public class JSONGeneratorClsFuncs {
        private Func base = new JSONGeneratorClsFunc();

        public Func close = base.apply('close');
        public Func getAsString = base.apply('getAsString');
        public Func isClosed = base.apply('isClosed');
        public Func writeBlob = base.apply('writeBlob');
        public Func writeBlobField = base.apply('writeBlobField');
        public Func writeBoolean = base.apply('writeBoolean');
        public Func writeBooleanField = base.apply('writeBooleanField');
        public Func writeDate = base.apply('writeDate');
        public Func writeDateField = base.apply('writeDateField');
        public Func writeDateTime = base.apply('writeDateTime');
        public Func writeDateTimeField = base.apply('writeDateTimeField');
        public Func writeEndArray = base.apply('writeEndArray');
        public Func writeEndObject = base.apply('writeEndObject');
        public Func writeFieldName = base.apply('writeFieldName');
        public Func writeId = base.apply('writeId');
        public Func writeIdField = base.apply('writeIdField');
        public Func writeNull = base.apply('writeNull');
        public Func writeNullField = base.apply('writeNullField');
        public Func writeNumber = base.apply('writeNumber');
        public Func writeNumberField = base.apply('writeNumberField');
        public Func writeObject = base.apply('writeObject');
        public Func writeObjectField = base.apply('writeObjectField');
        public Func writeStartArray = base.apply('writeStartArray');
        public Func writeStartObject = base.apply('writeStartObject');
        public Func writeString = base.apply('writeString');
        public Func writeStringField = base.apply('writeStringField');
        public Func writeTime = base.apply('writeTime');
        public Func writeTimeField = base.apply('writeTimeField');
    }

    private class JSONGeneratorClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'close' && args.size() == 2) {
                ((JSONGenerator)nthArg(args, 1)).close();
                return null;
            }
            else if(funcName == 'getAsString' && args.size() == 2) {
                return ((JSONGenerator)nthArg(args, 1)).getAsString();
            }
            else if(funcName == 'isClosed' && args.size() == 2) {
                return ((JSONGenerator)nthArg(args, 1)).isClosed();
            }
            else if(funcName == 'writeBlob' && args.size() == 3) {
                ((JSONGenerator)nthArg(args, 2)).writeBlob((Blob)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeBlobField' && args.size() == 4) {
                ((JSONGenerator)nthArg(args, 3)).writeBlobField((String)nthArg(args, 1), (Blob)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'writeBoolean' && args.size() == 3) {
                ((JSONGenerator)nthArg(args, 2)).writeBoolean((Boolean)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeBooleanField' && args.size() == 4) {
                ((JSONGenerator)nthArg(args, 3)).writeBooleanField((String)nthArg(args, 1), (Boolean)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'writeDate' && args.size() == 3) {
                ((JSONGenerator)nthArg(args, 2)).writeDate((Date)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeDateField' && args.size() == 4) {
                ((JSONGenerator)nthArg(args, 3)).writeDateField((String)nthArg(args, 1), (Date)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'writeDateTime' && args.size() == 3) {
                ((JSONGenerator)nthArg(args, 2)).writeDateTime((Datetime)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeDateTimeField' && args.size() == 4) {
                ((JSONGenerator)nthArg(args, 3)).writeDateTimeField((String)nthArg(args, 1), (Datetime)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'writeEndArray' && args.size() == 2) {
                ((JSONGenerator)nthArg(args, 1)).writeEndArray();
                return null;
            }
            else if(funcName == 'writeEndObject' && args.size() == 2) {
                ((JSONGenerator)nthArg(args, 1)).writeEndObject();
                return null;
            }
            else if(funcName == 'writeFieldName' && args.size() == 3) {
                ((JSONGenerator)nthArg(args, 2)).writeFieldName((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeId' && args.size() == 3) {
                ((JSONGenerator)nthArg(args, 2)).writeId((ID)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeIdField' && args.size() == 4) {
                ((JSONGenerator)nthArg(args, 3)).writeIdField((String)nthArg(args, 1), (Id)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'writeNull' && args.size() == 2) {
                ((JSONGenerator)nthArg(args, 1)).writeNull();
                return null;
            }
            else if(funcName == 'writeNullField' && args.size() == 3) {
                ((JSONGenerator)nthArg(args, 2)).writeNullField((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeNumber' && nthArg(args, 1) instanceof Decimal && nthArg(args, 2) instanceof JSONGenerator) {
                ((JSONGenerator)nthArg(args, 2)).writeNumber((Decimal)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeNumber' && nthArg(args, 1) instanceof Integer && nthArg(args, 2) instanceof JSONGenerator) {
                ((JSONGenerator)nthArg(args, 2)).writeNumber((Integer)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeNumber' && nthArg(args, 1) instanceof Long && nthArg(args, 2) instanceof JSONGenerator) {
                ((JSONGenerator)nthArg(args, 2)).writeNumber((Long)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeNumber' && nthArg(args, 1) instanceof Double && nthArg(args, 2) instanceof JSONGenerator) {
                ((JSONGenerator)nthArg(args, 2)).writeNumber((Double)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeNumberField' && nthArg(args, 1) instanceof String && nthArg(args, 2) instanceof Decimal && nthArg(args, 3) instanceof JSONGenerator) {
                ((JSONGenerator)nthArg(args, 3)).writeNumberField((String)nthArg(args, 1), (Decimal)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'writeNumberField' && nthArg(args, 1) instanceof String && nthArg(args, 2) instanceof Double && nthArg(args, 3) instanceof JSONGenerator) {
                ((JSONGenerator)nthArg(args, 3)).writeNumberField((String)nthArg(args, 1), (Double)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'writeNumberField' && nthArg(args, 1) instanceof String && nthArg(args, 2) instanceof Integer && nthArg(args, 3) instanceof JSONGenerator) {
                ((JSONGenerator)nthArg(args, 3)).writeNumberField((String)nthArg(args, 1), (Integer)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'writeNumberField' && nthArg(args, 1) instanceof String && nthArg(args, 2) instanceof Long && nthArg(args, 3) instanceof JSONGenerator) {
                ((JSONGenerator)nthArg(args, 3)).writeNumberField((String)nthArg(args, 1), (Long)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'writeObject' && args.size() == 3) {
                ((JSONGenerator)nthArg(args, 2)).writeObject((Object)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeObjectField' && args.size() == 4) {
                ((JSONGenerator)nthArg(args, 3)).writeObjectField((String)nthArg(args, 1), (Object)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'writeStartArray' && args.size() == 2) {
                ((JSONGenerator)nthArg(args, 1)).writeStartArray();
                return null;
            }
            else if(funcName == 'writeStartObject' && args.size() == 2) {
                ((JSONGenerator)nthArg(args, 1)).writeStartObject();
                return null;
            }
            else if(funcName == 'writeString' && args.size() == 3) {
                ((JSONGenerator)nthArg(args, 2)).writeString((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeStringField' && args.size() == 4) {
                ((JSONGenerator)nthArg(args, 3)).writeStringField((String)nthArg(args, 1), (String)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'writeTime' && args.size() == 3) {
                ((JSONGenerator)nthArg(args, 2)).writeTime((Time)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeTimeField' && args.size() == 4) {
                ((JSONGenerator)nthArg(args, 3)).writeTimeField((String)nthArg(args, 1), (Time)nthArg(args, 2));
                return null;
            }

            return null;
        }
    }

    public static final JSONParserClsFuncs JSONParserCls = new JSONParserClsFuncs();

    public class JSONParserClsFuncs {
        private Func base = new JSONParserClsFunc();

        public Func clearCurrentToken = base.apply('clearCurrentToken');
        public Func getBlobValue = base.apply('getBlobValue');
        public Func getBooleanValue = base.apply('getBooleanValue');
        public Func getCurrentName = base.apply('getCurrentName');
        public Func getCurrentToken = base.apply('getCurrentToken');
        public Func getDatetimeValue = base.apply('getDatetimeValue');
        public Func getDateValue = base.apply('getDateValue');
        public Func getDecimalValue = base.apply('getDecimalValue');
        public Func getDoubleValue = base.apply('getDoubleValue');
        public Func getIdValue = base.apply('getIdValue');
        public Func getIntegerValue = base.apply('getIntegerValue');
        public Func getLastClearedToken = base.apply('getLastClearedToken');
        public Func getLongValue = base.apply('getLongValue');
        public Func getText = base.apply('getText');
        public Func getTimeValue = base.apply('getTimeValue');
        public Func hasCurrentToken = base.apply('hasCurrentToken');
        public Func nextToken = base.apply('nextToken');
        public Func nextValue = base.apply('nextValue');
        public Func readValueAs = base.apply('readValueAs');
        public Func readValueAsStrict = base.apply('readValueAsStrict');
        public Func skipChildren = base.apply('skipChildren');
    }

    private class JSONParserClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'clearCurrentToken' && args.size() == 2) {
                ((JSONParser)nthArg(args, 1)).clearCurrentToken();
                return null;
            }
            else if(funcName == 'getBlobValue' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).getBlobValue();
            }
            else if(funcName == 'getBooleanValue' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).getBooleanValue();
            }
            else if(funcName == 'getCurrentName' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).getCurrentName();
            }
            else if(funcName == 'getCurrentToken' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).getCurrentToken();
            }
            else if(funcName == 'getDatetimeValue' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).getDatetimeValue();
            }
            else if(funcName == 'getDateValue' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).getDateValue();
            }
            else if(funcName == 'getDecimalValue' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).getDecimalValue();
            }
            else if(funcName == 'getDoubleValue' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).getDoubleValue();
            }
            else if(funcName == 'getIdValue' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).getIdValue();
            }
            else if(funcName == 'getIntegerValue' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).getIntegerValue();
            }
            else if(funcName == 'getLastClearedToken' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).getLastClearedToken();
            }
            else if(funcName == 'getLongValue' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).getLongValue();
            }
            else if(funcName == 'getText' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).getText();
            }
            else if(funcName == 'getTimeValue' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).getTimeValue();
            }
            else if(funcName == 'hasCurrentToken' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).hasCurrentToken();
            }
            else if(funcName == 'nextToken' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).nextToken();
            }
            else if(funcName == 'nextValue' && args.size() == 2) {
                return ((JSONParser)nthArg(args, 1)).nextValue();
            }
            else if(funcName == 'readValueAs' && args.size() == 3) {
                return ((JSONParser)nthArg(args, 2)).readValueAs((System.Type)nthArg(args, 1));
            }
            else if(funcName == 'readValueAsStrict' && args.size() == 3) {
                return ((JSONParser)nthArg(args, 2)).readValueAsStrict((System.Type)nthArg(args, 1));
            }
            else if(funcName == 'skipChildren' && args.size() == 2) {
                ((JSONParser)nthArg(args, 1)).skipChildren();
                return null;
            }

            return null;
        }
    }

    public static final LimitsClsFuncs LimitsCls = new LimitsClsFuncs();

    public class LimitsClsFuncs {
        private Func base = new LimitsClsFunc();

        public Func getAggregateQueries = base.apply('getAggregateQueries');
        public Func getAsyncCalls = base.apply('getAsyncCalls');
        public Func getCallouts = base.apply('getCallouts');
        public Func getCpuTime = base.apply('getCpuTime');
        public Func getDMLRows = base.apply('getDMLRows');
        public Func getDMLStatements = base.apply('getDMLStatements');
        public Func getEmailInvocations = base.apply('getEmailInvocations');
        public Func getFindSimilarCalls = base.apply('getFindSimilarCalls');
        public Func getFutureCalls = base.apply('getFutureCalls');
        public Func getHeapSize = base.apply('getHeapSize');
        public Func getLimitAggregateQueries = base.apply('getLimitAggregateQueries');
        public Func getLimitAsyncCalls = base.apply('getLimitAsyncCalls');
        public Func getLimitCallouts = base.apply('getLimitCallouts');
        public Func getLimitCpuTime = base.apply('getLimitCpuTime');
        public Func getLimitDMLRows = base.apply('getLimitDMLRows');
        public Func getLimitDMLStatements = base.apply('getLimitDMLStatements');
        public Func getLimitEmailInvocations = base.apply('getLimitEmailInvocations');
        public Func getLimitFindSimilarCalls = base.apply('getLimitFindSimilarCalls');
        public Func getLimitFutureCalls = base.apply('getLimitFutureCalls');
        public Func getLimitHeapSize = base.apply('getLimitHeapSize');
        public Func getLimitMobilePushApexCalls = base.apply('getLimitMobilePushApexCalls');
        public Func getLimitQueries = base.apply('getLimitQueries');
        public Func getLimitQueryLocatorRows = base.apply('getLimitQueryLocatorRows');
        public Func getLimitQueryRows = base.apply('getLimitQueryRows');
        public Func getLimitQueueableJobs = base.apply('getLimitQueueableJobs');
        public Func getLimitRunAs = base.apply('getLimitRunAs');
        public Func getLimitSavepointRollbacks = base.apply('getLimitSavepointRollbacks');
        public Func getLimitSavepoints = base.apply('getLimitSavepoints');
        public Func getLimitSoslQueries = base.apply('getLimitSoslQueries');
        public Func getMobilePushApexCalls = base.apply('getMobilePushApexCalls');
        public Func getQueries = base.apply('getQueries');
        public Func getQueryLocatorRows = base.apply('getQueryLocatorRows');
        public Func getQueryRows = base.apply('getQueryRows');
        public Func getQueueableJobs = base.apply('getQueueableJobs');
        public Func getRunAs = base.apply('getRunAs');
        public Func getSavepointRollbacks = base.apply('getSavepointRollbacks');
        public Func getSavepoints = base.apply('getSavepoints');
        public Func getSoslQueries = base.apply('getSoslQueries');
    }

    private class LimitsClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'getAggregateQueries' && args.size() == 1) {
                return Limits.getAggregateQueries();
            }
            else if(funcName == 'getAsyncCalls' && args.size() == 1) {
                return Limits.getAsyncCalls();
            }
            else if(funcName == 'getCallouts' && args.size() == 1) {
                return Limits.getCallouts();
            }
            else if(funcName == 'getCpuTime' && args.size() == 1) {
                return Limits.getCpuTime();
            }
            else if(funcName == 'getDMLRows' && args.size() == 1) {
                return Limits.getDMLRows();
            }
            else if(funcName == 'getDMLStatements' && args.size() == 1) {
                return Limits.getDMLStatements();
            }
            else if(funcName == 'getEmailInvocations' && args.size() == 1) {
                return Limits.getEmailInvocations();
            }
            else if(funcName == 'getFindSimilarCalls' && args.size() == 1) {
                return Limits.getFindSimilarCalls();
            }
            else if(funcName == 'getFutureCalls' && args.size() == 1) {
                return Limits.getFutureCalls();
            }
            else if(funcName == 'getHeapSize' && args.size() == 1) {
                return Limits.getHeapSize();
            }
            else if(funcName == 'getLimitAggregateQueries' && args.size() == 1) {
                return Limits.getLimitAggregateQueries();
            }
            else if(funcName == 'getLimitAsyncCalls' && args.size() == 1) {
                return Limits.getLimitAsyncCalls();
            }
            else if(funcName == 'getLimitCallouts' && args.size() == 1) {
                return Limits.getLimitCallouts();
            }
            else if(funcName == 'getLimitCpuTime' && args.size() == 1) {
                return Limits.getLimitCpuTime();
            }
            else if(funcName == 'getLimitDMLRows' && args.size() == 1) {
                return Limits.getLimitDMLRows();
            }
            else if(funcName == 'getLimitDMLStatements' && args.size() == 1) {
                return Limits.getLimitDMLStatements();
            }
            else if(funcName == 'getLimitEmailInvocations' && args.size() == 1) {
                return Limits.getLimitEmailInvocations();
            }
            else if(funcName == 'getLimitFindSimilarCalls' && args.size() == 1) {
                return Limits.getLimitFindSimilarCalls();
            }
            else if(funcName == 'getLimitFutureCalls' && args.size() == 1) {
                return Limits.getLimitFutureCalls();
            }
            else if(funcName == 'getLimitHeapSize' && args.size() == 1) {
                return Limits.getLimitHeapSize();
            }
            else if(funcName == 'getLimitMobilePushApexCalls' && args.size() == 1) {
                return Limits.getLimitMobilePushApexCalls();
            }
            else if(funcName == 'getLimitQueries' && args.size() == 1) {
                return Limits.getLimitQueries();
            }
            else if(funcName == 'getLimitQueryLocatorRows' && args.size() == 1) {
                return Limits.getLimitQueryLocatorRows();
            }
            else if(funcName == 'getLimitQueryRows' && args.size() == 1) {
                return Limits.getLimitQueryRows();
            }
            else if(funcName == 'getLimitQueueableJobs' && args.size() == 1) {
                return Limits.getLimitQueueableJobs();
            }
            else if(funcName == 'getLimitRunAs' && args.size() == 1) {
                return Limits.getLimitRunAs();
            }
            else if(funcName == 'getLimitSavepointRollbacks' && args.size() == 1) {
                return Limits.getLimitSavepointRollbacks();
            }
            else if(funcName == 'getLimitSavepoints' && args.size() == 1) {
                return Limits.getLimitSavepoints();
            }
            else if(funcName == 'getLimitSoslQueries' && args.size() == 1) {
                return Limits.getLimitSoslQueries();
            }
            else if(funcName == 'getMobilePushApexCalls' && args.size() == 1) {
                return Limits.getMobilePushApexCalls();
            }
            else if(funcName == 'getQueries' && args.size() == 1) {
                return Limits.getQueries();
            }
            else if(funcName == 'getQueryLocatorRows' && args.size() == 1) {
                return Limits.getQueryLocatorRows();
            }
            else if(funcName == 'getQueryRows' && args.size() == 1) {
                return Limits.getQueryRows();
            }
            else if(funcName == 'getQueueableJobs' && args.size() == 1) {
                return Limits.getQueueableJobs();
            }
            else if(funcName == 'getRunAs' && args.size() == 1) {
                return Limits.getRunAs();
            }
            else if(funcName == 'getSavepointRollbacks' && args.size() == 1) {
                return Limits.getSavepointRollbacks();
            }
            else if(funcName == 'getSavepoints' && args.size() == 1) {
                return Limits.getSavepoints();
            }
            else if(funcName == 'getSoslQueries' && args.size() == 1) {
                return Limits.getSoslQueries();
            }

            return null;
        }
    }

    public static final ListClsFuncs ListCls = new ListClsFuncs();

    public class ListClsFuncs {
        private Func base = new ListClsFunc();

        public Func construct = base.apply('construct');
        public Func add = base.apply('add');
        public Func addAll = base.apply('addAll');
        public Func clear = base.apply('clear');
        public Func clone = base.apply('clone');
        public Func contains = base.apply('contains');
        public Func deepClone = base.apply('deepClone');
        public Func equals = base.apply('equals');
        public Func get = base.apply('get');
        public Func getSObjectType = base.apply('getSObjectType');
        public Func hashCode = base.apply('hashCode');
        public Func indexOf = base.apply('indexOf');
        public Func isEmpty = base.apply('isEmpty');
        public Func iterator = base.apply('iterator');
        public Func remove = base.apply('remove');
        public Func setFn = base.apply('setFn');
        public Func size = base.apply('size');
        public Func sortFn = base.apply('sortFn');
    }

    private class ListClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 1) {
                return new List<Object>();
            }
            else if(funcName == 'construct' && nthArg(args, 1) instanceof List<Object>) {
                return new List<Object>((List<Object>)nthArg(args, 1));
            }
            else if(funcName == 'construct' && nthArg(args, 1) instanceof Set<Object>) {
                return new List<Object>((Set<Object>)nthArg(args, 1));
            }
            else if(funcName == 'add' && args.size() == 3) {
                ((List<Object>)nthArg(args, 2)).add((Object)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'add' && args.size() == 4) {
                ((List<Object>)nthArg(args, 3)).add((Integer)nthArg(args, 1), (Object)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'addAll' && nthArg(args, 1) instanceof List<Object> && nthArg(args, 2) instanceof List<Object>) {
                ((List<Object>)nthArg(args, 2)).addAll((List<Object>)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'addAll' && nthArg(args, 1) instanceof Set<Object> && nthArg(args, 2) instanceof List<Object>) {
                ((List<Object>)nthArg(args, 2)).addAll((Set<Object>)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'clear' && args.size() == 2) {
                ((List<Object>)nthArg(args, 1)).clear();
                return null;
            }
            else if(funcName == 'clone' && args.size() == 2) {
                return ((List<Object>)nthArg(args, 1)).clone();
            }
            else if(funcName == 'contains' && args.size() == 3) {
                return ((List<Object>)nthArg(args, 2)).contains((Object)nthArg(args, 1));
            }
            else if(funcName == 'deepClone' && nthArg(args, 1) instanceof Boolean && nthArg(args, 2) instanceof Boolean && nthArg(args, 3) instanceof Boolean && nthArg(args, 4) instanceof List<Object>) {
                List<SObject> mList = (List<SObject>)R.toSObjectList.run(nthArg(args, 4));
                return mList.deepClone((Boolean)nthArg(args, 1), (Boolean)nthArg(args, 2), (Boolean)nthArg(args, 3));
            }

            else if(funcName == 'equals' && args.size() == 3) {
                return ((List<Object>)nthArg(args, 2)).equals((List<Object>)nthArg(args, 1));
            }
            else if(funcName == 'get' && args.size() == 3) {
                return ((List<Object>)nthArg(args, 2)).get((Integer)nthArg(args, 1));
            }
           else if(funcName == 'getSObjectType' && nthArg(args, 1) instanceof List<Object>) {
                List<SObject> mList = (List<SObject>)R.toSObjectList.run(nthArg(args, 1));
                return mList.getSObjectType();
            }

            else if(funcName == 'hashCode' && args.size() == 2) {
                return ((List<Object>)nthArg(args, 1)).hashCode();
            }
            else if(funcName == 'indexOf' && args.size() == 3) {
                return ((List<Object>)nthArg(args, 2)).indexOf((Object)nthArg(args, 1));
            }
            else if(funcName == 'isEmpty' && args.size() == 2) {
                return ((List<Object>)nthArg(args, 1)).isEmpty();
            }
            else if(funcName == 'iterator' && args.size() == 2) {
                return ((List<Object>)nthArg(args, 1)).iterator();
            }
            else if(funcName == 'remove' && args.size() == 3) {
                return ((List<Object>)nthArg(args, 2)).remove((Integer)nthArg(args, 1));
            }
            else if(funcName == 'setFn' && args.size() == 4) {
                ((List<Object>)nthArg(args, 3)).set((Integer)nthArg(args, 1), (Object)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'size' && args.size() == 2) {
                return ((List<Object>)nthArg(args, 1)).size();
            }
            else if(funcName == 'sortFn' && args.size() == 2) {
                ((List<Object>)nthArg(args, 1)).sort();
                return null;
            }

            return null;
        }
    }

    public static final LocationClsFuncs LocationCls = new LocationClsFuncs();

    public class LocationClsFuncs {
        private Func base = new LocationClsFunc();

        public Func getDistance = base.apply('getDistance');
        public Func newInstance = base.apply('newInstance');
        public Func getLatitude = base.apply('getLatitude');
        public Func getLongitude = base.apply('getLongitude');
    }

    private class LocationClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'getDistance' && args.size() == 4) {
                return ((Location)nthArg(args, 3)).getDistance((Location)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'getDistance' && args.size() == 4) {
                return Location.getDistance((Location)nthArg(args, 1), (Location)nthArg(args, 2), (String)nthArg(args, 3));
            }
            else if(funcName == 'newInstance' && args.size() == 3) {
                return Location.newInstance((Decimal)nthArg(args, 1), (Decimal)nthArg(args, 2));
            }
            else if(funcName == 'getLatitude' && args.size() == 2) {
                return ((Location)nthArg(args, 1)).getLatitude();
            }
            else if(funcName == 'getLongitude' && args.size() == 2) {
                return ((Location)nthArg(args, 1)).getLongitude();
            }

            return null;
        }
    }

    public static final LongClsFuncs LongCls = new LongClsFuncs();

    public class LongClsFuncs {
        private Func base = new LongClsFunc();

        public Func valueOf = base.apply('valueOf');
        public Func format = base.apply('format');
        public Func intValue = base.apply('intValue');
    }

    private class LongClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'valueOf' && args.size() == 2) {
                return Long.valueOf((String)nthArg(args, 1));
            }
            else if(funcName == 'format' && args.size() == 2) {
                return ((Long)nthArg(args, 1)).format();
            }
            else if(funcName == 'intValue' && args.size() == 2) {
                return ((Long)nthArg(args, 1)).intValue();
            }

            return null;
        }
    }

    public static final MapClsFuncs MapCls = new MapClsFuncs();

    public class MapClsFuncs {
        private Func base = new MapClsFunc();

        public Func construct = base.apply('construct');
        public Func clear = base.apply('clear');
        public Func clone = base.apply('clone');
        public Func containsKey = base.apply('containsKey');
        public Func deepClone = base.apply('deepClone');
        public Func equals = base.apply('equals');
        public Func get = base.apply('get');
        public Func getSObjectType = base.apply('getSObjectType');
        public Func hashCode = base.apply('hashCode');
        public Func isEmpty = base.apply('isEmpty');
        public Func keySet = base.apply('keySet');
        public Func put = base.apply('put');
        public Func putAll = base.apply('putAll');
        public Func remove = base.apply('remove');
        public Func size = base.apply('size');
        public Func values = base.apply('values');
    }

    private class MapClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 1) {
                return new Map<String, Object>();
            }
            else if(funcName == 'construct' && args.size() == 2) {
                return new Map<String, Object>((Map<String, Object>)nthArg(args, 1));
            }
            else if(funcName == 'clear' && args.size() == 2) {
                ((Map<String, Object>)nthArg(args, 1)).clear();
                return null;
            }
            else if(funcName == 'clone' && args.size() == 2) {
                return ((Map<String, Object>)nthArg(args, 1)).clone();
            }
            else if(funcName == 'containsKey' && args.size() == 3) {
                return ((Map<String, Object>)nthArg(args, 2)).containsKey((String)nthArg(args, 1));
            }
            else if(funcName == 'deepClone' && nthArg(args, 1) instanceof Map<String, Object>) {
                return ((Map<String, SObject>)R.toSObjectMap.run(nthArg(args, 1))).deepClone();
            }

            else if(funcName == 'equals' && args.size() == 3) {
                return ((Map<String, Object>)nthArg(args, 2)).equals((Map<String, Object>)nthArg(args, 1));
            }
            else if(funcName == 'get' && args.size() == 3) {
                return ((Map<String, Object>)nthArg(args, 2)).get((String)nthArg(args, 1));
            }
            else if(funcName == 'getSObjectType' && nthArg(args, 1) instanceof Map<String, Object>) {
                return ((Map<String, SObject>)R.toSObjectMap.run(nthArg(args, 1))).getSObjectType();
            }

            else if(funcName == 'hashCode' && args.size() == 2) {
                return ((Map<String, Object>)nthArg(args, 1)).hashCode();
            }
            else if(funcName == 'isEmpty' && args.size() == 2) {
                return ((Map<String, Object>)nthArg(args, 1)).isEmpty();
            }
            else if(funcName == 'keySet' && args.size() == 2) {
                return ((Map<String, Object>)nthArg(args, 1)).keySet();
            }
            else if(funcName == 'put' && args.size() == 4) {
                return ((Map<String, Object>)nthArg(args, 3)).put((String)nthArg(args, 1), (Object)nthArg(args, 2));
            }
            else if(funcName == 'putAll' && nthArg(args, 1) instanceof Map<String, Object> && nthArg(args, 2) instanceof Map<String, Object>) {
                ((Map<String, Object>)nthArg(args, 2)).putAll((Map<String, Object>)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'putAll' && nthArg(args, 1) instanceof List<SObject> && nthArg(args, 2) instanceof Map<String, Object>) {
                ((Map<String, SObject>)R.toSObjectMap.run(nthArg(args, 2))).putAll((List<SObject>)nthArg(args, 1));
                return null;
            }

            else if(funcName == 'remove' && args.size() == 3) {
                return ((Map<String, Object>)nthArg(args, 2)).remove((String)nthArg(args, 1));
            }
            else if(funcName == 'size' && args.size() == 2) {
                return ((Map<String, Object>)nthArg(args, 1)).size();
            }
            else if(funcName == 'values' && args.size() == 2) {
                return ((Map<String, Object>)nthArg(args, 1)).values();
            }

            return null;
        }
    }

    public static final MatcherClsFuncs MatcherCls = new MatcherClsFuncs();

    public class MatcherClsFuncs {
        private Func base = new MatcherClsFunc();

        public Func quoteReplacement = base.apply('quoteReplacement');
        public Func endFn = base.apply('endFn');
        public Func find = base.apply('find');
        public Func groupFn = base.apply('groupFn');
        public Func groupCount = base.apply('groupCount');
        public Func hasAnchoringBounds = base.apply('hasAnchoringBounds');
        public Func hasTransparentBounds = base.apply('hasTransparentBounds');
        public Func hitEnd = base.apply('hitEnd');
        public Func lookingAt = base.apply('lookingAt');
        public Func matches = base.apply('matches');
        public Func pattern = base.apply('pattern');
        public Func region = base.apply('region');
        public Func regionEnd = base.apply('regionEnd');
        public Func regionStart = base.apply('regionStart');
        public Func replaceAll = base.apply('replaceAll');
        public Func replaceFirst = base.apply('replaceFirst');
        public Func requireEnd = base.apply('requireEnd');
        public Func reset = base.apply('reset');
        public Func start = base.apply('start');
        public Func useAnchoringBounds = base.apply('useAnchoringBounds');
        public Func usePattern = base.apply('usePattern');
        public Func useTransparentBounds = base.apply('useTransparentBounds');
    }

    private class MatcherClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'quoteReplacement' && args.size() == 2) {
                return Matcher.quoteReplacement((String)nthArg(args, 1));
            }
            else if(funcName == 'endFn' && args.size() == 2) {
                return ((Matcher)nthArg(args, 1)).end();
            }
            else if(funcName == 'endFn' && args.size() == 3) {
                return ((Matcher)nthArg(args, 2)).end((Integer)nthArg(args, 1));
            }
            else if(funcName == 'find' && args.size() == 2) {
                return ((Matcher)nthArg(args, 1)).find();
            }
            else if(funcName == 'find' && args.size() == 3) {
                return ((Matcher)nthArg(args, 2)).find((Integer)nthArg(args, 1));
            }
            else if(funcName == 'groupFn' && args.size() == 2) {
                return ((Matcher)nthArg(args, 1)).group();
            }
            else if(funcName == 'groupFn' && args.size() == 3) {
                return ((Matcher)nthArg(args, 2)).group((Integer)nthArg(args, 1));
            }
            else if(funcName == 'groupCount' && args.size() == 2) {
                return ((Matcher)nthArg(args, 1)).groupCount();
            }
            else if(funcName == 'hasAnchoringBounds' && args.size() == 2) {
                return ((Matcher)nthArg(args, 1)).hasAnchoringBounds();
            }
            else if(funcName == 'hasTransparentBounds' && args.size() == 2) {
                return ((Matcher)nthArg(args, 1)).hasTransparentBounds();
            }
            else if(funcName == 'hitEnd' && args.size() == 2) {
                return ((Matcher)nthArg(args, 1)).hitEnd();
            }
            else if(funcName == 'lookingAt' && args.size() == 2) {
                return ((Matcher)nthArg(args, 1)).lookingAt();
            }
            else if(funcName == 'matches' && args.size() == 2) {
                return ((Matcher)nthArg(args, 1)).matches();
            }
            else if(funcName == 'pattern' && args.size() == 2) {
                return ((Matcher)nthArg(args, 1)).pattern();
            }
            else if(funcName == 'region' && args.size() == 4) {
                return ((Matcher)nthArg(args, 3)).region((Integer)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'regionEnd' && args.size() == 2) {
                return ((Matcher)nthArg(args, 1)).regionEnd();
            }
            else if(funcName == 'regionStart' && args.size() == 2) {
                return ((Matcher)nthArg(args, 1)).regionStart();
            }
            else if(funcName == 'replaceAll' && args.size() == 3) {
                return ((Matcher)nthArg(args, 2)).replaceAll((String)nthArg(args, 1));
            }
            else if(funcName == 'replaceFirst' && args.size() == 3) {
                return ((Matcher)nthArg(args, 2)).replaceFirst((String)nthArg(args, 1));
            }
            else if(funcName == 'requireEnd' && args.size() == 2) {
                return ((Matcher)nthArg(args, 1)).requireEnd();
            }
            else if(funcName == 'reset' && args.size() == 2) {
                return ((Matcher)nthArg(args, 1)).reset();
            }
            else if(funcName == 'reset' && args.size() == 3) {
                return ((Matcher)nthArg(args, 2)).reset((String)nthArg(args, 1));
            }
            else if(funcName == 'start' && args.size() == 2) {
                return ((Matcher)nthArg(args, 1)).start();
            }
            else if(funcName == 'start' && args.size() == 3) {
                return ((Matcher)nthArg(args, 2)).start((Integer)nthArg(args, 1));
            }
            else if(funcName == 'useAnchoringBounds' && args.size() == 3) {
                return ((Matcher)nthArg(args, 2)).useAnchoringBounds((Boolean)nthArg(args, 1));
            }
            else if(funcName == 'usePattern' && args.size() == 3) {
                return ((Matcher)nthArg(args, 2)).usePattern((Pattern)nthArg(args, 1));
            }
            else if(funcName == 'useTransparentBounds' && args.size() == 3) {
                return ((Matcher)nthArg(args, 2)).useTransparentBounds((Boolean)nthArg(args, 1));
            }

            return null;
        }
    }

    public static final MathClsFuncs MathCls = new MathClsFuncs();

    public class MathClsFuncs {
        private Func base = new MathClsFunc();

        public Func abs = base.apply('abs');
        public Func acos = base.apply('acos');
        public Func asin = base.apply('asin');
        public Func atan = base.apply('atan');
        public Func atan2 = base.apply('atan2');
        public Func cbrt = base.apply('cbrt');
        public Func ceil = base.apply('ceil');
        public Func cos = base.apply('cos');
        public Func cosh = base.apply('cosh');
        public Func exp = base.apply('exp');
        public Func floor = base.apply('floor');
        public Func log = base.apply('log');
        public Func log10 = base.apply('log10');
        public Func max = base.apply('max');
        public Func min = base.apply('min');
        public Func mod = base.apply('mod');
        public Func pow = base.apply('pow');
        public Func random = base.apply('random');
        public Func rint = base.apply('rint');
        public Func round = base.apply('round');
        public Func roundToLong = base.apply('roundToLong');
        public Func signum = base.apply('signum');
        public Func sin = base.apply('sin');
        public Func sinh = base.apply('sinh');
        public Func sqrt = base.apply('sqrt');
        public Func tan = base.apply('tan');
        public Func tanh = base.apply('tanh');
    }

    private class MathClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'abs' && nthArg(args, 1) instanceof Decimal) {
                return Math.abs((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'abs' && nthArg(args, 1) instanceof Double) {
                return Math.abs((Double)nthArg(args, 1));
            }
            else if(funcName == 'abs' && nthArg(args, 1) instanceof Long) {
                return Math.abs((Long)nthArg(args, 1));
            }
            else if(funcName == 'abs' && nthArg(args, 1) instanceof Integer) {
                return Math.abs((Integer)nthArg(args, 1));
            }
            else if(funcName == 'acos' && nthArg(args, 1) instanceof Double) {
                return Math.acos((Double)nthArg(args, 1));
            }
            else if(funcName == 'acos' && nthArg(args, 1) instanceof Decimal) {
                return Math.acos((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'asin' && nthArg(args, 1) instanceof Double) {
                return Math.asin((Double)nthArg(args, 1));
            }
            else if(funcName == 'asin' && nthArg(args, 1) instanceof Decimal) {
                return Math.asin((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'atan' && nthArg(args, 1) instanceof Decimal) {
                return Math.atan((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'atan' && nthArg(args, 1) instanceof Double) {
                return Math.atan((Double)nthArg(args, 1));
            }
            else if(funcName == 'atan2' && nthArg(args, 1) instanceof Decimal && nthArg(args, 2) instanceof Decimal) {
                return Math.atan2((Decimal)nthArg(args, 1), (Decimal)nthArg(args, 2));
            }
            else if(funcName == 'atan2' && nthArg(args, 1) instanceof Double && nthArg(args, 2) instanceof Double) {
                return Math.atan2((Double)nthArg(args, 1), (Double)nthArg(args, 2));
            }
            else if(funcName == 'cbrt' && nthArg(args, 1) instanceof Decimal) {
                return Math.cbrt((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'cbrt' && nthArg(args, 1) instanceof Double) {
                return Math.cbrt((Double)nthArg(args, 1));
            }
            else if(funcName == 'ceil' && nthArg(args, 1) instanceof Double) {
                return Math.ceil((Double)nthArg(args, 1));
            }
            else if(funcName == 'ceil' && nthArg(args, 1) instanceof Decimal) {
                return Math.ceil((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'cos' && nthArg(args, 1) instanceof Decimal) {
                return Math.cos((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'cos' && nthArg(args, 1) instanceof Double) {
                return Math.cos((Double)nthArg(args, 1));
            }
            else if(funcName == 'cosh' && nthArg(args, 1) instanceof Double) {
                return Math.cosh((Double)nthArg(args, 1));
            }
            else if(funcName == 'cosh' && nthArg(args, 1) instanceof Decimal) {
                return Math.cosh((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'exp' && nthArg(args, 1) instanceof Decimal) {
                return Math.exp((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'exp' && nthArg(args, 1) instanceof Double) {
                return Math.exp((Double)nthArg(args, 1));
            }
            else if(funcName == 'floor' && nthArg(args, 1) instanceof Decimal) {
                return Math.floor((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'floor' && nthArg(args, 1) instanceof Double) {
                return Math.floor((Double)nthArg(args, 1));
            }
            else if(funcName == 'log' && nthArg(args, 1) instanceof Decimal) {
                return Math.log((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'log' && nthArg(args, 1) instanceof Double) {
                return Math.log((Double)nthArg(args, 1));
            }
            else if(funcName == 'log10' && nthArg(args, 1) instanceof Decimal) {
                return Math.log10((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'log10' && nthArg(args, 1) instanceof Double) {
                return Math.log10((Double)nthArg(args, 1));
            }
            else if(funcName == 'max' && nthArg(args, 1) instanceof Decimal && nthArg(args, 2) instanceof Decimal) {
                return Math.max((Decimal)nthArg(args, 1), (Decimal)nthArg(args, 2));
            }
            else if(funcName == 'max' && nthArg(args, 1) instanceof Double && nthArg(args, 2) instanceof Double) {
                return Math.max((Double)nthArg(args, 1), (Double)nthArg(args, 2));
            }
            else if(funcName == 'max' && nthArg(args, 1) instanceof Integer && nthArg(args, 2) instanceof Integer) {
                return Math.max((Integer)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'max' && nthArg(args, 1) instanceof Long && nthArg(args, 2) instanceof Long) {
                return Math.max((Long)nthArg(args, 1), (Long)nthArg(args, 2));
            }
            else if(funcName == 'min' && nthArg(args, 1) instanceof Decimal && nthArg(args, 2) instanceof Decimal) {
                return Math.min((Decimal)nthArg(args, 1), (Decimal)nthArg(args, 2));
            }
            else if(funcName == 'min' && nthArg(args, 1) instanceof Double && nthArg(args, 2) instanceof Double) {
                return Math.min((Double)nthArg(args, 1), (Double)nthArg(args, 2));
            }
            else if(funcName == 'min' && nthArg(args, 1) instanceof Long && nthArg(args, 2) instanceof Long) {
                return Math.min((Long)nthArg(args, 1), (Long)nthArg(args, 2));
            }
            else if(funcName == 'min' && nthArg(args, 1) instanceof Integer && nthArg(args, 2) instanceof Integer) {
                return Math.min((Integer)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'mod' && nthArg(args, 1) instanceof Long && nthArg(args, 2) instanceof Long) {
                return Math.mod((Long)nthArg(args, 1), (Long)nthArg(args, 2));
            }
            else if(funcName == 'mod' && nthArg(args, 1) instanceof Integer && nthArg(args, 2) instanceof Integer) {
                return Math.mod((Integer)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'pow' && args.size() == 3) {
                return Math.pow((Double)nthArg(args, 1), (Double)nthArg(args, 2));
            }
            else if(funcName == 'random' && args.size() == 1) {
                return Math.random();
            }
            else if(funcName == 'rint' && nthArg(args, 1) instanceof Decimal) {
                return Math.rint((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'rint' && nthArg(args, 1) instanceof Double) {
                return Math.rint((Double)nthArg(args, 1));
            }
            else if(funcName == 'round' && nthArg(args, 1) instanceof Double) {
                return Math.round((Double)nthArg(args, 1));
            }
            else if(funcName == 'round' && nthArg(args, 1) instanceof Decimal) {
                return Math.round((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'roundToLong' && nthArg(args, 1) instanceof Decimal) {
                return Math.roundToLong((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'roundToLong' && nthArg(args, 1) instanceof Double) {
                return Math.roundToLong((Double)nthArg(args, 1));
            }
            else if(funcName == 'signum' && nthArg(args, 1) instanceof Decimal) {
                return Math.signum((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'signum' && nthArg(args, 1) instanceof Double) {
                return Math.signum((Double)nthArg(args, 1));
            }
            else if(funcName == 'sin' && nthArg(args, 1) instanceof Decimal) {
                return Math.sin((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'sin' && nthArg(args, 1) instanceof Double) {
                return Math.sin((Double)nthArg(args, 1));
            }
            else if(funcName == 'sinh' && nthArg(args, 1) instanceof Decimal) {
                return Math.sinh((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'sinh' && nthArg(args, 1) instanceof Double) {
                return Math.sinh((Double)nthArg(args, 1));
            }
            else if(funcName == 'sqrt' && nthArg(args, 1) instanceof Decimal) {
                return Math.sqrt((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'sqrt' && nthArg(args, 1) instanceof Double) {
                return Math.sqrt((Double)nthArg(args, 1));
            }
            else if(funcName == 'tan' && nthArg(args, 1) instanceof Decimal) {
                return Math.tan((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'tan' && nthArg(args, 1) instanceof Double) {
                return Math.tan((Double)nthArg(args, 1));
            }
            else if(funcName == 'tanh' && nthArg(args, 1) instanceof Decimal) {
                return Math.tanh((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'tanh' && nthArg(args, 1) instanceof Double) {
                return Math.tanh((Double)nthArg(args, 1));
            }

            return null;
        }
    }

    public static final MessagingClsFuncs MessagingCls = new MessagingClsFuncs();

    public class MessagingClsFuncs {
        private Func base = new MessagingClsFunc();

        public Func extractInboundEmail = base.apply('extractInboundEmail');
        public Func renderEmailTemplate = base.apply('renderEmailTemplate');
        public Func renderStoredEmailTemplate = base.apply('renderStoredEmailTemplate');
        public Func reserveMassEmailCapacity = base.apply('reserveMassEmailCapacity');
        public Func reserveSingleEmailCapacity = base.apply('reserveSingleEmailCapacity');
        public Func sendEmail = base.apply('sendEmail');
        public Func sendEmailMessage = base.apply('sendEmailMessage');
    }

    private class MessagingClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'extractInboundEmail' && nthArg(args, 1) instanceof Messaging.InboundEmail.BinaryAttachment && nthArg(args, 2) instanceof Boolean) {
                return Messaging.extractInboundEmail((Messaging.InboundEmail.BinaryAttachment)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'extractInboundEmail' && nthArg(args, 1) instanceof Blob && nthArg(args, 2) instanceof Boolean) {
                return Messaging.extractInboundEmail((Blob)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'renderEmailTemplate' && args.size() == 4) {
                return Messaging.renderEmailTemplate((String)nthArg(args, 1), (String)nthArg(args, 2), (List<String>)nthArg(args, 3));
            }
            else if(funcName == 'renderStoredEmailTemplate' && args.size() == 4) {
                return Messaging.renderStoredEmailTemplate((String)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3));
            }
            else if(funcName == 'renderStoredEmailTemplate' && args.size() == 5) {
                return Messaging.renderStoredEmailTemplate((String)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3), (Messaging.AttachmentRetrievalOption)nthArg(args, 4));
            }
            else if(funcName == 'renderStoredEmailTemplate' && args.size() == 6) {
                return Messaging.renderStoredEmailTemplate((String)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3), (Messaging.AttachmentRetrievalOption)nthArg(args, 4), (Boolean)nthArg(args, 5));
            }
            else if(funcName == 'reserveMassEmailCapacity' && args.size() == 2) {
                Messaging.reserveMassEmailCapacity((Integer)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'reserveSingleEmailCapacity' && args.size() == 2) {
                Messaging.reserveSingleEmailCapacity((Integer)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'sendEmail' && args.size() == 3) {
                return Messaging.sendEmail((Messaging.Email[])nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'sendEmailMessage' && args.size() == 3) {
                return Messaging.sendEmailMessage((List<ID>)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }

            return null;
        }
    }

    public static final MultiStaticResourceCalloutMockClsFuncs MultiStaticResourceCalloutMockCls = new MultiStaticResourceCalloutMockClsFuncs();

    public class MultiStaticResourceCalloutMockClsFuncs {
        private Func base = new MultiStaticResourceCalloutMockClsFunc();

        public Func construct = base.apply('construct');
        public Func setHeader = base.apply('setHeader');
        public Func setStaticResource = base.apply('setStaticResource');
        public Func setStatus = base.apply('setStatus');
        public Func setStatusCode = base.apply('setStatusCode');
    }

    private class MultiStaticResourceCalloutMockClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 1) {
                return new MultiStaticResourceCalloutMock();
            }
            else if(funcName == 'setHeader' && args.size() == 4) {
                ((MultiStaticResourceCalloutMock)nthArg(args, 3)).setHeader((String)nthArg(args, 1), (String)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'setStaticResource' && args.size() == 4) {
                ((MultiStaticResourceCalloutMock)nthArg(args, 3)).setStaticResource((String)nthArg(args, 1), (String)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'setStatus' && args.size() == 3) {
                ((MultiStaticResourceCalloutMock)nthArg(args, 2)).setStatus((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setStatusCode' && args.size() == 3) {
                ((MultiStaticResourceCalloutMock)nthArg(args, 2)).setStatusCode((Integer)nthArg(args, 1));
                return null;
            }

            return null;
        }
    }

    public static final NetworkClsFuncs NetworkCls = new NetworkClsFuncs();

    public class NetworkClsFuncs {
        private Func base = new NetworkClsFunc();

        public Func construct = base.apply('construct');
        public Func communitiesLanding = base.apply('communitiesLanding');
        public Func forwardToAuthPage = base.apply('forwardToAuthPage');
        public Func getLoginUrl = base.apply('getLoginUrl');
        public Func getLogoutUrl = base.apply('getLogoutUrl');
        public Func getNetworkId = base.apply('getNetworkId');
        public Func getSelfRegUrl = base.apply('getSelfRegUrl');
        public Func loadAllPackageDefaultNetworkDashboardSettings = base.apply('loadAllPackageDefaultNetworkDashboardSettings');
    }

    private class NetworkClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 1) {
                return new Network();
            }
            else if(funcName == 'communitiesLanding' && args.size() == 1) {
                return Network.communitiesLanding();
            }
            else if(funcName == 'forwardToAuthPage' && args.size() == 2) {
                return Network.forwardToAuthPage((String)nthArg(args, 1));
            }
            else if(funcName == 'getLoginUrl' && args.size() == 2) {
                return Network.getLoginUrl((String)nthArg(args, 1));
            }
            else if(funcName == 'getLogoutUrl' && args.size() == 2) {
                return Network.getLogoutUrl((String)nthArg(args, 1));
            }
            else if(funcName == 'getNetworkId' && args.size() == 1) {
                return Network.getNetworkId();
            }
            else if(funcName == 'getSelfRegUrl' && args.size() == 2) {
                return Network.getSelfRegUrl((String)nthArg(args, 1));
            }
            else if(funcName == 'loadAllPackageDefaultNetworkDashboardSettings' && args.size() == 1) {
                return Network.loadAllPackageDefaultNetworkDashboardSettings();
            }

            return null;
        }
    }

    public static final PatternClsFuncs PatternCls = new PatternClsFuncs();

    public class PatternClsFuncs {
        private Func base = new PatternClsFunc();

        public Func compile = base.apply('compile');
        public Func matches = base.apply('matches');
        public Func quote = base.apply('quote');
        public Func matcher = base.apply('matcher');
        public Func pattern = base.apply('pattern');
        public Func split = base.apply('split');
    }

    private class PatternClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'compile' && args.size() == 2) {
                return Pattern.compile((String)nthArg(args, 1));
            }
            else if(funcName == 'matches' && args.size() == 3) {
                return Pattern.matches((String)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'quote' && args.size() == 2) {
                return Pattern.quote((String)nthArg(args, 1));
            }
            else if(funcName == 'matcher' && args.size() == 3) {
                return ((Pattern)nthArg(args, 2)).matcher((String)nthArg(args, 1));
            }
            else if(funcName == 'pattern' && args.size() == 2) {
                return ((Pattern)nthArg(args, 1)).pattern();
            }
            else if(funcName == 'split' && args.size() == 3) {
                return ((Pattern)nthArg(args, 2)).split((String)nthArg(args, 1));
            }
            else if(funcName == 'split' && args.size() == 4) {
                return ((Pattern)nthArg(args, 3)).split((String)nthArg(args, 1), (Integer)nthArg(args, 2));
            }

            return null;
        }
    }

    public static final QuickActionClsFuncs QuickActionCls = new QuickActionClsFuncs();

    public class QuickActionClsFuncs {
        private Func base = new QuickActionClsFunc();

        public Func describeAvailableQuickActions = base.apply('describeAvailableQuickActions');
        public Func describeQuickActions = base.apply('describeQuickActions');
        public Func performQuickAction = base.apply('performQuickAction');
        public Func performQuickActions = base.apply('performQuickActions');
    }

    private class QuickActionClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'describeAvailableQuickActions' && args.size() == 2) {
                return QuickAction.describeAvailableQuickActions((String)nthArg(args, 1));
            }
            else if(funcName == 'describeQuickActions' && args.size() == 2) {
                return QuickAction.describeQuickActions((List<String>)nthArg(args, 1));
            }
            else if(funcName == 'performQuickAction' && args.size() == 2) {
                return QuickAction.performQuickAction((QuickAction.QuickActionRequest)nthArg(args, 1));
            }
            else if(funcName == 'performQuickAction' && args.size() == 3) {
                return QuickAction.performQuickAction((QuickAction.QuickActionRequest)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'performQuickActions' && args.size() == 2) {
                return QuickAction.performQuickActions((List<QuickAction.QuickActionRequest>)nthArg(args, 1));
            }
            else if(funcName == 'performQuickActions' && args.size() == 3) {
                return QuickAction.performQuickActions((List<QuickAction.QuickActionRequest>)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }

            return null;
        }
    }

    public static final RemoteObjectControllerClsFuncs RemoteObjectControllerCls = new RemoteObjectControllerClsFuncs();

    public class RemoteObjectControllerClsFuncs {
        private Func base = new RemoteObjectControllerClsFunc();

        public Func create = base.apply('create');
        public Func del = base.apply('del');
        public Func retrieveFn = base.apply('retrieveFn');
        public Func updat = base.apply('updat');
    }

    private class RemoteObjectControllerClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'create' && args.size() == 3) {
                return RemoteObjectController.create((String)nthArg(args, 1), (Map<String,Object>)nthArg(args, 2));
            }
            else if(funcName == 'del' && args.size() == 3) {
                return RemoteObjectController.del((String)nthArg(args, 1), (List<String>)nthArg(args, 2));
            }
            else if(funcName == 'retrieveFn' && args.size() == 4) {
                return RemoteObjectController.retrieve((String)nthArg(args, 1), (List<String>)nthArg(args, 2), (Map<String,Object>)nthArg(args, 3));
            }
            else if(funcName == 'updat' && args.size() == 4) {
                return RemoteObjectController.updat((String)nthArg(args, 1), (List<String>)nthArg(args, 2), (Map<String,Object>)nthArg(args, 3));
            }

            return null;
        }
    }

    public static final ResetPasswordResultClsFuncs ResetPasswordResultCls = new ResetPasswordResultClsFuncs();

    public class ResetPasswordResultClsFuncs {
        private Func base = new ResetPasswordResultClsFunc();

        public Func getPassword = base.apply('getPassword');
    }

    private class ResetPasswordResultClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'getPassword' && args.size() == 2) {
                return ((ResetPasswordResult)nthArg(args, 1)).getPassword();
            }

            return null;
        }
    }

    public static final RestRequestClsFuncs RestRequestCls = new RestRequestClsFuncs();

    public class RestRequestClsFuncs {
        private Func base = new RestRequestClsFunc();

        public Func construct = base.apply('construct');
        public Func addHeader = base.apply('addHeader');
        public Func addParameter = base.apply('addParameter');
    }

    private class RestRequestClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 1) {
                return new RestRequest();
            }
            else if(funcName == 'addHeader' && args.size() == 4) {
                ((RestRequest)nthArg(args, 3)).addHeader((String)nthArg(args, 1), (String)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'addParameter' && args.size() == 4) {
                ((RestRequest)nthArg(args, 3)).addParameter((String)nthArg(args, 1), (String)nthArg(args, 2));
                return null;
            }

            return null;
        }
    }

    public static final RestResponseClsFuncs RestResponseCls = new RestResponseClsFuncs();

    public class RestResponseClsFuncs {
        private Func base = new RestResponseClsFunc();

        public Func construct = base.apply('construct');
        public Func addHeader = base.apply('addHeader');
    }

    private class RestResponseClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 1) {
                return new RestResponse();
            }
            else if(funcName == 'addHeader' && args.size() == 4) {
                ((RestResponse)nthArg(args, 3)).addHeader((String)nthArg(args, 1), (String)nthArg(args, 2));
                return null;
            }

            return null;
        }
    }

    public static final SObjectClsFuncs SObjectCls = new SObjectClsFuncs();

    public class SObjectClsFuncs {
        private Func base = new SObjectClsFunc();

        public Func addError = base.apply('addError');
        public Func clear = base.apply('clear');
        public Func clone = base.apply('clone');
        public Func get = base.apply('get');
        public Func getCloneSourceId = base.apply('getCloneSourceId');
        public Func getOptions = base.apply('getOptions');
        public Func getPopulatedFieldsAsMap = base.apply('getPopulatedFieldsAsMap');
        public Func getQuickActionName = base.apply('getQuickActionName');
        public Func getSObject = base.apply('getSObject');
        public Func getSObjects = base.apply('getSObjects');
        public Func getSObjectType = base.apply('getSObjectType');
        public Func isClone = base.apply('isClone');
        public Func put = base.apply('put');
        public Func putSObject = base.apply('putSObject');
        public Func recalculateFormulas = base.apply('recalculateFormulas');
        public Func setOptions = base.apply('setOptions');
    }

    private class SObjectClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'addError' && nthArg(args, 1) instanceof String && nthArg(args, 2) instanceof SObject) {
                ((SObject)nthArg(args, 2)).addError((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'addError' && nthArg(args, 1) instanceof String && nthArg(args, 2) instanceof SObject) {
                ((SObject)nthArg(args, 2)).addError((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'addError' && nthArg(args, 1) instanceof Exception && nthArg(args, 2) instanceof SObject) {
                ((SObject)nthArg(args, 2)).addError((Exception)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'addError' && nthArg(args, 1) instanceof Exception && nthArg(args, 2) instanceof Boolean && nthArg(args, 3) instanceof SObject) {
                ((SObject)nthArg(args, 3)).addError((Exception)nthArg(args, 1), (Boolean)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'addError' && nthArg(args, 1) instanceof String && nthArg(args, 2) instanceof Boolean && nthArg(args, 3) instanceof SObject) {
                ((SObject)nthArg(args, 3)).addError((String)nthArg(args, 1), (Boolean)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'addError' && nthArg(args, 1) instanceof String && nthArg(args, 2) instanceof Boolean && nthArg(args, 3) instanceof SObject) {
                ((SObject)nthArg(args, 3)).addError((String)nthArg(args, 1), (Boolean)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'clear' && args.size() == 2) {
                ((SObject)nthArg(args, 1)).clear();
                return null;
            }
            else if(funcName == 'clone' && args.size() == 6) {
                return ((SObject)nthArg(args, 5)).clone((Boolean)nthArg(args, 1), (Boolean)nthArg(args, 2), (Boolean)nthArg(args, 3), (Boolean)nthArg(args, 4));
            }
            else if(funcName == 'get' && nthArg(args, 1) instanceof Schema.sObjectField && nthArg(args, 2) instanceof SObject) {
                return ((SObject)nthArg(args, 2)).get((Schema.sObjectField)nthArg(args, 1));
            }
            else if(funcName == 'get' && nthArg(args, 1) instanceof String && nthArg(args, 2) instanceof SObject) {
                return ((SObject)nthArg(args, 2)).get((String)nthArg(args, 1));
            }
            else if(funcName == 'getCloneSourceId' && args.size() == 2) {
                return ((SObject)nthArg(args, 1)).getCloneSourceId();
            }
            else if(funcName == 'getOptions' && args.size() == 2) {
                return ((SObject)nthArg(args, 1)).getOptions();
            }
            else if(funcName == 'getPopulatedFieldsAsMap' && args.size() == 2) {
                return ((SObject)nthArg(args, 1)).getPopulatedFieldsAsMap();
            }
            else if(funcName == 'getQuickActionName' && args.size() == 2) {
                return ((SObject)nthArg(args, 1)).getQuickActionName();
            }
            else if(funcName == 'getSObject' && nthArg(args, 1) instanceof Schema.SObjectField && nthArg(args, 2) instanceof SObject) {
                return ((SObject)nthArg(args, 2)).getSObject((Schema.SObjectField)nthArg(args, 1));
            }
            else if(funcName == 'getSObject' && nthArg(args, 1) instanceof String && nthArg(args, 2) instanceof SObject) {
                return ((SObject)nthArg(args, 2)).getSObject((String)nthArg(args, 1));
            }
            else if(funcName == 'getSObjects' && nthArg(args, 1) instanceof Schema.SObjectField && nthArg(args, 2) instanceof SObject) {
                return ((SObject)nthArg(args, 2)).getSObjects((Schema.SObjectField)nthArg(args, 1));
            }
            else if(funcName == 'getSObjects' && nthArg(args, 1) instanceof String && nthArg(args, 2) instanceof SObject) {
                return ((SObject)nthArg(args, 2)).getSObjects((String)nthArg(args, 1));
            }
            else if(funcName == 'getSObjectType' && args.size() == 2) {
                return ((SObject)nthArg(args, 1)).getSObjectType();
            }
            else if(funcName == 'isClone' && args.size() == 2) {
                return ((SObject)nthArg(args, 1)).isClone();
            }
            else if(funcName == 'put' && nthArg(args, 1) instanceof String && nthArg(args, 3) instanceof SObject) {
                return ((SObject)nthArg(args, 3)).put((String)nthArg(args, 1), (Object)nthArg(args, 2));
            }
            else if(funcName == 'put' && nthArg(args, 1) instanceof Schema.SObjectField && nthArg(args, 3) instanceof SObject) {
                return ((SObject)nthArg(args, 3)).put((Schema.SObjectField)nthArg(args, 1), (Object)nthArg(args, 2));
            }
            else if(funcName == 'putSObject' && nthArg(args, 1) instanceof String && nthArg(args, 2) instanceof sObject && nthArg(args, 3) instanceof SObject) {
                return ((SObject)nthArg(args, 3)).putSObject((String)nthArg(args, 1), (sObject)nthArg(args, 2));
            }
            else if(funcName == 'putSObject' && nthArg(args, 1) instanceof Schema.SObjectField && nthArg(args, 2) instanceof sObject && nthArg(args, 3) instanceof SObject) {
                return ((SObject)nthArg(args, 3)).putSObject((Schema.SObjectField)nthArg(args, 1), (sObject)nthArg(args, 2));
            }
            else if(funcName == 'recalculateFormulas' && args.size() == 2) {
                ((SObject)nthArg(args, 1)).recalculateFormulas();
                return null;
            }
            else if(funcName == 'setOptions' && args.size() == 3) {
                ((SObject)nthArg(args, 2)).setOptions((database.DMLOptions)nthArg(args, 1));
                return null;
            }

            return null;
        }
    }

    public static final SchemaClsFuncs SchemaCls = new SchemaClsFuncs();

    public class SchemaClsFuncs {
        private Func base = new SchemaClsFunc();

        public Func describeDataCategoryGroups = base.apply('describeDataCategoryGroups');
        public Func describeDataCategoryGroupStructures = base.apply('describeDataCategoryGroupStructures');
        public Func describeSObjects = base.apply('describeSObjects');
        public Func describeTabs = base.apply('describeTabs');
        public Func getGlobalDescribe = base.apply('getGlobalDescribe');
    }

    private class SchemaClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'describeDataCategoryGroups' && args.size() == 2) {
                return Schema.describeDataCategoryGroups((List<String>)nthArg(args, 1));
            }
            else if(funcName == 'describeDataCategoryGroupStructures' && args.size() == 3) {
                return Schema.describeDataCategoryGroupStructures((List<Schema.DataCategoryGroupSobjectTypePair>)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'describeSObjects' && args.size() == 2) {
                return Schema.describeSObjects((List<String>)nthArg(args, 1));
            }
            else if(funcName == 'describeTabs' && args.size() == 1) {
                return Schema.describeTabs();
            }
            else if(funcName == 'getGlobalDescribe' && args.size() == 1) {
                return Schema.getGlobalDescribe();
            }

            return null;
        }
    }

    public static final SearchClsFuncs SearchCls = new SearchClsFuncs();

    public class SearchClsFuncs {
        private Func base = new SearchClsFunc();

        public Func find = base.apply('find');
        public Func query = base.apply('query');
        public Func suggest = base.apply('suggest');
    }

    private class SearchClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'find' && args.size() == 2) {
                return Search.find((String)nthArg(args, 1));
            }
            else if(funcName == 'query' && args.size() == 2) {
                return Search.query((String)nthArg(args, 1));
            }
            else if(funcName == 'suggest' && args.size() == 4) {
                return Search.suggest((String)nthArg(args, 1), (String)nthArg(args, 2), (Search.SuggestionOption)nthArg(args, 3));
            }

            return null;
        }
    }

    public static final SelectOptionClsFuncs SelectOptionCls = new SelectOptionClsFuncs();

    public class SelectOptionClsFuncs {
        private Func base = new SelectOptionClsFunc();

        public Func construct = base.apply('construct');
        public Func getDisabled = base.apply('getDisabled');
        public Func getEscapeItem = base.apply('getEscapeItem');
        public Func getLabel = base.apply('getLabel');
        public Func getValue = base.apply('getValue');
        public Func setDisabled = base.apply('setDisabled');
        public Func setEscapeItem = base.apply('setEscapeItem');
        public Func setLabel = base.apply('setLabel');
        public Func setValue = base.apply('setValue');
    }

    private class SelectOptionClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 3) {
                return new SelectOption((String)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'construct' && args.size() == 4) {
                return new SelectOption((String)nthArg(args, 1), (String)nthArg(args, 2), (Boolean)nthArg(args, 3));
            }
            else if(funcName == 'getDisabled' && args.size() == 2) {
                return ((SelectOption)nthArg(args, 1)).getDisabled();
            }
            else if(funcName == 'getEscapeItem' && args.size() == 2) {
                return ((SelectOption)nthArg(args, 1)).getEscapeItem();
            }
            else if(funcName == 'getLabel' && args.size() == 2) {
                return ((SelectOption)nthArg(args, 1)).getLabel();
            }
            else if(funcName == 'getValue' && args.size() == 2) {
                return ((SelectOption)nthArg(args, 1)).getValue();
            }
            else if(funcName == 'setDisabled' && args.size() == 3) {
                ((SelectOption)nthArg(args, 2)).setDisabled((Boolean)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setEscapeItem' && args.size() == 3) {
                ((SelectOption)nthArg(args, 2)).setEscapeItem((Boolean)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setLabel' && args.size() == 3) {
                ((SelectOption)nthArg(args, 2)).setLabel((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setValue' && args.size() == 3) {
                ((SelectOption)nthArg(args, 2)).setValue((String)nthArg(args, 1));
                return null;
            }

            return null;
        }
    }

    public static final SetClsFuncs SetCls = new SetClsFuncs();

    public class SetClsFuncs {
        private Func base = new SetClsFunc();

        public Func construct = base.apply('construct');
        public Func add = base.apply('add');
        public Func addAll = base.apply('addAll');
        public Func clear = base.apply('clear');
        public Func clone = base.apply('clone');
        public Func contains = base.apply('contains');
        public Func containsAll = base.apply('containsAll');
        public Func equals = base.apply('equals');
        public Func hashCode = base.apply('hashCode');
        public Func isEmpty = base.apply('isEmpty');
        public Func remove = base.apply('remove');
        public Func removeAll = base.apply('removeAll');
        public Func retainAll = base.apply('retainAll');
        public Func size = base.apply('size');
    }

    private class SetClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 1) {
                return new Set<Object>();
            }
            else if(funcName == 'construct' && nthArg(args, 1) instanceof List<Object>) {
                return new Set<Object>((List<Object>)nthArg(args, 1));
            }
            else if(funcName == 'construct' && nthArg(args, 1) instanceof Set<Object>) {
                return new Set<Object>((Set<Object>)nthArg(args, 1));
            }
            else if(funcName == 'add' && args.size() == 3) {
                return ((Set<Object>)nthArg(args, 2)).add((Object)nthArg(args, 1));
            }
            else if(funcName == 'addAll' && nthArg(args, 1) instanceof List<Object> && nthArg(args, 2) instanceof Set<Object>) {
                return ((Set<Object>)nthArg(args, 2)).addAll((List<Object>)nthArg(args, 1));
            }
            else if(funcName == 'addAll' && nthArg(args, 1) instanceof Set<Object> && nthArg(args, 2) instanceof Set<Object>) {
                return ((Set<Object>)nthArg(args, 2)).addAll((Set<Object>)nthArg(args, 1));
            }
            else if(funcName == 'clear' && args.size() == 2) {
                ((Set<Object>)nthArg(args, 1)).clear();
                return null;
            }
            else if(funcName == 'clone' && args.size() == 2) {
                return ((Set<Object>)nthArg(args, 1)).clone();
            }
            else if(funcName == 'contains' && args.size() == 3) {
                return ((Set<Object>)nthArg(args, 2)).contains((Object)nthArg(args, 1));
            }
            else if(funcName == 'containsAll' && nthArg(args, 1) instanceof List<Object> && nthArg(args, 2) instanceof Set<Object>) {
                return ((Set<Object>)nthArg(args, 2)).containsAll((List<Object>)nthArg(args, 1));
            }
            else if(funcName == 'containsAll' && nthArg(args, 1) instanceof Set<Object> && nthArg(args, 2) instanceof Set<Object>) {
                return ((Set<Object>)nthArg(args, 2)).containsAll((Set<Object>)nthArg(args, 1));
            }
            else if(funcName == 'equals' && args.size() == 3) {
                return ((Set<Object>)nthArg(args, 2)).equals((Set<Object>)nthArg(args, 1));
            }
            else if(funcName == 'hashCode' && args.size() == 2) {
                return ((Set<Object>)nthArg(args, 1)).hashCode();
            }
            else if(funcName == 'isEmpty' && args.size() == 2) {
                return ((Set<Object>)nthArg(args, 1)).isEmpty();
            }
            else if(funcName == 'remove' && args.size() == 3) {
                return ((Set<Object>)nthArg(args, 2)).remove((Object)nthArg(args, 1));
            }
            else if(funcName == 'removeAll' && nthArg(args, 1) instanceof List<Object> && nthArg(args, 2) instanceof Set<Object>) {
                return ((Set<Object>)nthArg(args, 2)).removeAll((List<Object>)nthArg(args, 1));
            }
            else if(funcName == 'removeAll' && nthArg(args, 1) instanceof Set<Object> && nthArg(args, 2) instanceof Set<Object>) {
                return ((Set<Object>)nthArg(args, 2)).removeAll((Set<Object>)nthArg(args, 1));
            }
            else if(funcName == 'retainAll' && nthArg(args, 1) instanceof List<Object> && nthArg(args, 2) instanceof Set<Object>) {
                return ((Set<Object>)nthArg(args, 2)).retainAll((List<Object>)nthArg(args, 1));
            }
            else if(funcName == 'retainAll' && nthArg(args, 1) instanceof Set<Object> && nthArg(args, 2) instanceof Set<Object>) {
                return ((Set<Object>)nthArg(args, 2)).retainAll((Set<Object>)nthArg(args, 1));
            }
            else if(funcName == 'size' && args.size() == 2) {
                return ((Set<Object>)nthArg(args, 1)).size();
            }

            return null;
        }
    }

    public static final SiteClsFuncs SiteCls = new SiteClsFuncs();

    public class SiteClsFuncs {
        private Func base = new SiteClsFunc();

        public Func changePassword = base.apply('changePassword');
        public Func createExternalUser = base.apply('createExternalUser');
        public Func createPersonAccountPortalUser = base.apply('createPersonAccountPortalUser');
        public Func createPortalUser = base.apply('createPortalUser');
        public Func forgotPassword = base.apply('forgotPassword');
        public Func getAdminEmail = base.apply('getAdminEmail');
        public Func getAdminId = base.apply('getAdminId');
        public Func getAnalyticsTrackingCode = base.apply('getAnalyticsTrackingCode');
        public Func getBaseCustomUrl = base.apply('getBaseCustomUrl');
        public Func getBaseInsecureUrl = base.apply('getBaseInsecureUrl');
        public Func getBaseRequestUrl = base.apply('getBaseRequestUrl');
        public Func getBaseSecureUrl = base.apply('getBaseSecureUrl');
        public Func getBaseUrl = base.apply('getBaseUrl');
        public Func getDomain = base.apply('getDomain');
        public Func getErrorDescription = base.apply('getErrorDescription');
        public Func getErrorMessage = base.apply('getErrorMessage');
        public Func getExperienceId = base.apply('getExperienceId');
        public Func getMasterLabel = base.apply('getMasterLabel');
        public Func getName = base.apply('getName');
        public Func getOriginalUrl = base.apply('getOriginalUrl');
        public Func getPasswordPolicyStatement = base.apply('getPasswordPolicyStatement');
        public Func getPathPrefix = base.apply('getPathPrefix');
        public Func getSiteId = base.apply('getSiteId');
        public Func getSiteType = base.apply('getSiteType');
        public Func getSiteTypeLabel = base.apply('getSiteTypeLabel');
        public Func getTemplate = base.apply('getTemplate');
        public Func isLoginEnabled = base.apply('isLoginEnabled');
        public Func isPasswordExpired = base.apply('isPasswordExpired');
        public Func isRegistrationEnabled = base.apply('isRegistrationEnabled');
        public Func isValidUsername = base.apply('isValidUsername');
        public Func login = base.apply('login');
        public Func passwordlessLogin = base.apply('passwordlessLogin');
        public Func setExperienceId = base.apply('setExperienceId');
        public Func setPortalUserAsAuthProvider = base.apply('setPortalUserAsAuthProvider');
        public Func validatePassword = base.apply('validatePassword');
    }

    private class SiteClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'changePassword' && args.size() == 4) {
                return Site.changePassword((String)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3));
            }
            else if(funcName == 'createExternalUser' && args.size() == 3) {
                return Site.createExternalUser((SObject)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'createExternalUser' && args.size() == 4) {
                return Site.createExternalUser((SObject)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3));
            }
            else if(funcName == 'createExternalUser' && args.size() == 5) {
                return Site.createExternalUser((SObject)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3), (Boolean)nthArg(args, 4));
            }
            else if(funcName == 'createPersonAccountPortalUser' && args.size() == 4) {
                return Site.createPersonAccountPortalUser((sObject)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3));
            }
            else if(funcName == 'createPersonAccountPortalUser' && args.size() == 5) {
                return Site.createPersonAccountPortalUser((sObject)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3), (String)nthArg(args, 4));
            }
            else if(funcName == 'createPortalUser' && args.size() == 5) {
                return Site.createPortalUser((sObject)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3), (Boolean)nthArg(args, 4));
            }
            else if(funcName == 'forgotPassword' && args.size() == 2) {
                return Site.forgotPassword((String)nthArg(args, 1));
            }
            else if(funcName == 'getAdminEmail' && args.size() == 1) {
                return Site.getAdminEmail();
            }
            else if(funcName == 'getAdminId' && args.size() == 1) {
                return Site.getAdminId();
            }
            else if(funcName == 'getAnalyticsTrackingCode' && args.size() == 1) {
                return Site.getAnalyticsTrackingCode();
            }
            else if(funcName == 'getBaseCustomUrl' && args.size() == 1) {
                return Site.getBaseCustomUrl();
            }
            else if(funcName == 'getBaseInsecureUrl' && args.size() == 1) {
                return Site.getBaseInsecureUrl();
            }
            else if(funcName == 'getBaseRequestUrl' && args.size() == 1) {
                return Site.getBaseRequestUrl();
            }
            else if(funcName == 'getBaseSecureUrl' && args.size() == 1) {
                return Site.getBaseSecureUrl();
            }
            else if(funcName == 'getBaseUrl' && args.size() == 1) {
                return Site.getBaseUrl();
            }
            else if(funcName == 'getDomain' && args.size() == 1) {
                return Site.getDomain();
            }
            else if(funcName == 'getErrorDescription' && args.size() == 1) {
                return Site.getErrorDescription();
            }
            else if(funcName == 'getErrorMessage' && args.size() == 1) {
                return Site.getErrorMessage();
            }
            else if(funcName == 'getExperienceId' && args.size() == 1) {
                return Site.getExperienceId();
            }
            else if(funcName == 'getMasterLabel' && args.size() == 1) {
                return Site.getMasterLabel();
            }
            else if(funcName == 'getName' && args.size() == 1) {
                return Site.getName();
            }
            else if(funcName == 'getOriginalUrl' && args.size() == 1) {
                return Site.getOriginalUrl();
            }
            else if(funcName == 'getPasswordPolicyStatement' && args.size() == 1) {
                return Site.getPasswordPolicyStatement();
            }
            else if(funcName == 'getPathPrefix' && args.size() == 1) {
                return Site.getPathPrefix();
            }
            else if(funcName == 'getSiteId' && args.size() == 1) {
                return Site.getSiteId();
            }
            else if(funcName == 'getSiteType' && args.size() == 1) {
                return Site.getSiteType();
            }
            else if(funcName == 'getSiteTypeLabel' && args.size() == 1) {
                return Site.getSiteTypeLabel();
            }
            else if(funcName == 'getTemplate' && args.size() == 1) {
                return Site.getTemplate();
            }
            else if(funcName == 'isLoginEnabled' && args.size() == 1) {
                return Site.isLoginEnabled();
            }
            else if(funcName == 'isPasswordExpired' && args.size() == 1) {
                return Site.isPasswordExpired();
            }
            else if(funcName == 'isRegistrationEnabled' && args.size() == 1) {
                return Site.isRegistrationEnabled();
            }
            else if(funcName == 'isValidUsername' && args.size() == 2) {
                return Site.isValidUsername((String)nthArg(args, 1));
            }
            else if(funcName == 'login' && args.size() == 4) {
                return Site.login((String)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3));
            }
            else if(funcName == 'passwordlessLogin' && args.size() == 4) {
                return Site.passwordlessLogin((Id)nthArg(args, 1), (List<Auth.VerificationMethod>)nthArg(args, 2), (String)nthArg(args, 3));
            }
            else if(funcName == 'setExperienceId' && args.size() == 2) {
                Site.setExperienceId((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setPortalUserAsAuthProvider' && args.size() == 3) {
                Site.setPortalUserAsAuthProvider((sObject)nthArg(args, 1), (String)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'validatePassword' && args.size() == 4) {
                Site.validatePassword((SObject)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3));
                return null;
            }

            return null;
        }
    }

    public static final StaticResourceCalloutMockClsFuncs StaticResourceCalloutMockCls = new StaticResourceCalloutMockClsFuncs();

    public class StaticResourceCalloutMockClsFuncs {
        private Func base = new StaticResourceCalloutMockClsFunc();

        public Func construct = base.apply('construct');
        public Func setHeader = base.apply('setHeader');
        public Func setStaticResource = base.apply('setStaticResource');
        public Func setStatus = base.apply('setStatus');
        public Func setStatusCode = base.apply('setStatusCode');
    }

    private class StaticResourceCalloutMockClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 1) {
                return new StaticResourceCalloutMock();
            }
            else if(funcName == 'setHeader' && args.size() == 4) {
                ((StaticResourceCalloutMock)nthArg(args, 3)).setHeader((String)nthArg(args, 1), (String)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'setStaticResource' && args.size() == 3) {
                ((StaticResourceCalloutMock)nthArg(args, 2)).setStaticResource((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setStatus' && args.size() == 3) {
                ((StaticResourceCalloutMock)nthArg(args, 2)).setStatus((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setStatusCode' && args.size() == 3) {
                ((StaticResourceCalloutMock)nthArg(args, 2)).setStatusCode((Integer)nthArg(args, 1));
                return null;
            }

            return null;
        }
    }

    public static final StringClsFuncs StringCls = new StringClsFuncs();

    public class StringClsFuncs {
        private Func base = new StringClsFunc();

        public Func escapeSingleQuotes = base.apply('escapeSingleQuotes');
        public Func format = base.apply('format');
        public Func fromCharArray = base.apply('fromCharArray');
        public Func getCommonPrefix = base.apply('getCommonPrefix');
        public Func isBlank = base.apply('isBlank');
        public Func isEmpty = base.apply('isEmpty');
        public Func isNotBlank = base.apply('isNotBlank');
        public Func isNotEmpty = base.apply('isNotEmpty');
        public Func joinFn = base.apply('joinFn');
        public Func valueOf = base.apply('valueOf');
        public Func valueOfGmt = base.apply('valueOfGmt');
        public Func abbreviate = base.apply('abbreviate');
        public Func capitalize = base.apply('capitalize');
        public Func center = base.apply('center');
        public Func charAt = base.apply('charAt');
        public Func codePointAt = base.apply('codePointAt');
        public Func codePointBefore = base.apply('codePointBefore');
        public Func codePointCount = base.apply('codePointCount');
        public Func compareTo = base.apply('compareTo');
        public Func contains = base.apply('contains');
        public Func containsAny = base.apply('containsAny');
        public Func containsIgnoreCase = base.apply('containsIgnoreCase');
        public Func containsNone = base.apply('containsNone');
        public Func containsOnly = base.apply('containsOnly');
        public Func containsWhitespace = base.apply('containsWhitespace');
        public Func countMatches = base.apply('countMatches');
        public Func deleteWhitespace = base.apply('deleteWhitespace');
        public Func difference = base.apply('difference');
        public Func endsWith = base.apply('endsWith');
        public Func endsWithIgnoreCase = base.apply('endsWithIgnoreCase');
        public Func equals = base.apply('equals');
        public Func equalsIgnoreCase = base.apply('equalsIgnoreCase');
        public Func escapeCsv = base.apply('escapeCsv');
        public Func escapeEcmaScript = base.apply('escapeEcmaScript');
        public Func escapeHtml3 = base.apply('escapeHtml3');
        public Func escapeHtml4 = base.apply('escapeHtml4');
        public Func escapeJava = base.apply('escapeJava');
        public Func escapeUnicode = base.apply('escapeUnicode');
        public Func escapeXml = base.apply('escapeXml');
        public Func getChars = base.apply('getChars');
        public Func getLevenshteinDistance = base.apply('getLevenshteinDistance');
        public Func hashCode = base.apply('hashCode');
        public Func indexOf = base.apply('indexOf');
        public Func indexOfAny = base.apply('indexOfAny');
        public Func indexOfAnyBut = base.apply('indexOfAnyBut');
        public Func indexOfChar = base.apply('indexOfChar');
        public Func indexOfDifference = base.apply('indexOfDifference');
        public Func indexOfIgnoreCase = base.apply('indexOfIgnoreCase');
        public Func isAllLowerCase = base.apply('isAllLowerCase');
        public Func isAllUpperCase = base.apply('isAllUpperCase');
        public Func isAlpha = base.apply('isAlpha');
        public Func isAlphanumeric = base.apply('isAlphanumeric');
        public Func isAlphanumericSpace = base.apply('isAlphanumericSpace');
        public Func isAlphaSpace = base.apply('isAlphaSpace');
        public Func isAsciiPrintable = base.apply('isAsciiPrintable');
        public Func isNumeric = base.apply('isNumeric');
        public Func isNumericSpace = base.apply('isNumericSpace');
        public Func isWhitespace = base.apply('isWhitespace');
        public Func lastIndexOf = base.apply('lastIndexOf');
        public Func lastIndexOfChar = base.apply('lastIndexOfChar');
        public Func lastIndexOfIgnoreCase = base.apply('lastIndexOfIgnoreCase');
        public Func left = base.apply('left');
        public Func leftPad = base.apply('leftPad');
        public Func length = base.apply('length');
        public Func mid = base.apply('mid');
        public Func normalizeSpace = base.apply('normalizeSpace');
        public Func offsetByCodePoints = base.apply('offsetByCodePoints');
        public Func remove = base.apply('remove');
        public Func removeEnd = base.apply('removeEnd');
        public Func removeEndIgnoreCase = base.apply('removeEndIgnoreCase');
        public Func removeStart = base.apply('removeStart');
        public Func removeStartIgnoreCase = base.apply('removeStartIgnoreCase');
        public Func repeat = base.apply('repeat');
        public Func replace = base.apply('replace');
        public Func replaceAll = base.apply('replaceAll');
        public Func replaceFirst = base.apply('replaceFirst');
        public Func reverse = base.apply('reverse');
        public Func right = base.apply('right');
        public Func rightPad = base.apply('rightPad');
        public Func split = base.apply('split');
        public Func splitByCharacterType = base.apply('splitByCharacterType');
        public Func splitByCharacterTypeCamelCase = base.apply('splitByCharacterTypeCamelCase');
        public Func startsWith = base.apply('startsWith');
        public Func startsWithIgnoreCase = base.apply('startsWithIgnoreCase');
        public Func stripHtmlTags = base.apply('stripHtmlTags');
        public Func substring = base.apply('substring');
        public Func substringAfter = base.apply('substringAfter');
        public Func substringAfterLast = base.apply('substringAfterLast');
        public Func substringBefore = base.apply('substringBefore');
        public Func substringBeforeLast = base.apply('substringBeforeLast');
        public Func substringBetween = base.apply('substringBetween');
        public Func swapCase = base.apply('swapCase');
        public Func toLowerCase = base.apply('toLowerCase');
        public Func toUpperCase = base.apply('toUpperCase');
        public Func trim = base.apply('trim');
        public Func uncapitalize = base.apply('uncapitalize');
        public Func unescapeCsv = base.apply('unescapeCsv');
        public Func unescapeEcmaScript = base.apply('unescapeEcmaScript');
        public Func unescapeHtml3 = base.apply('unescapeHtml3');
        public Func unescapeHtml4 = base.apply('unescapeHtml4');
        public Func unescapeJava = base.apply('unescapeJava');
        public Func unescapeUnicode = base.apply('unescapeUnicode');
        public Func unescapeXml = base.apply('unescapeXml');
    }

    private class StringClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'escapeSingleQuotes' && args.size() == 2) {
                return String.escapeSingleQuotes((String)nthArg(args, 1));
            }
            else if(funcName == 'format' && args.size() == 3) {
                return String.format((String)nthArg(args, 1), (List<String>)nthArg(args, 2));
            }
            else if(funcName == 'fromCharArray' && args.size() == 2) {
                return String.fromCharArray((List<Integer>)nthArg(args, 1));
            }
            else if(funcName == 'getCommonPrefix' && args.size() == 2) {
                return String.getCommonPrefix((List<String>)nthArg(args, 1));
            }
            else if(funcName == 'isBlank' && args.size() == 2) {
                return String.isBlank((String)nthArg(args, 1));
            }
            else if(funcName == 'isEmpty' && args.size() == 2) {
                return String.isEmpty((String)nthArg(args, 1));
            }
            else if(funcName == 'isNotBlank' && args.size() == 2) {
                return String.isNotBlank((String)nthArg(args, 1));
            }
            else if(funcName == 'isNotEmpty' && args.size() == 2) {
                return String.isNotEmpty((String)nthArg(args, 1));
            }
            else if(funcName == 'joinFn' && nthArg(args, 2) instanceof String) {
                Object target = nthArg(args, 1);
                if(target instanceof List<Object>) {
                    return String.join((List<Object>)target, (String)nthArg(args, 2));
                }
                else if(target instanceof Iterable<Object>) {
                    return String.join((Iterable<Object>)target, (String)nthArg(args, 2));
                }

                return null;
            }

            else if(funcName == 'valueOf') {
                return String.valueOf((Object)nthArg(args, 1));
            }
            else if(funcName == 'valueOf' && nthArg(args, 1) instanceof Date) {
                return String.valueOf((Date)nthArg(args, 1));
            }
            else if(funcName == 'valueOf' && nthArg(args, 1) instanceof Datetime) {
                return String.valueOf((Datetime)nthArg(args, 1));
            }
            else if(funcName == 'valueOf' && nthArg(args, 1) instanceof Decimal) {
                return String.valueOf((Decimal)nthArg(args, 1));
            }
            else if(funcName == 'valueOf' && nthArg(args, 1) instanceof Double) {
                return String.valueOf((Double)nthArg(args, 1));
            }
            else if(funcName == 'valueOf' && nthArg(args, 1) instanceof Integer) {
                return String.valueOf((Integer)nthArg(args, 1));
            }
            else if(funcName == 'valueOf' && nthArg(args, 1) instanceof Long) {
                return String.valueOf((Long)nthArg(args, 1));
            }
            else if(funcName == 'valueOfGmt' && args.size() == 2) {
                return String.valueOfGmt((Datetime)nthArg(args, 1));
            }
            else if(funcName == 'abbreviate' && args.size() == 3) {
                return ((String)nthArg(args, 2)).abbreviate((Integer)nthArg(args, 1));
            }
            else if(funcName == 'abbreviate' && args.size() == 4) {
                return ((String)nthArg(args, 3)).abbreviate((Integer)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'capitalize' && args.size() == 2) {
                return ((String)nthArg(args, 1)).capitalize();
            }
            else if(funcName == 'center' && args.size() == 3) {
                return ((String)nthArg(args, 2)).center((Integer)nthArg(args, 1));
            }
            else if(funcName == 'center' && args.size() == 4) {
                return ((String)nthArg(args, 3)).center((Integer)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'charAt' && args.size() == 3) {
                return ((String)nthArg(args, 2)).charAt((Integer)nthArg(args, 1));
            }
            else if(funcName == 'codePointAt' && args.size() == 3) {
                return ((String)nthArg(args, 2)).codePointAt((Integer)nthArg(args, 1));
            }
            else if(funcName == 'codePointBefore' && args.size() == 3) {
                return ((String)nthArg(args, 2)).codePointBefore((Integer)nthArg(args, 1));
            }
            else if(funcName == 'codePointCount' && args.size() == 4) {
                return ((String)nthArg(args, 3)).codePointCount((Integer)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'compareTo' && args.size() == 3) {
                return ((String)nthArg(args, 2)).compareTo((String)nthArg(args, 1));
            }
            else if(funcName == 'contains' && args.size() == 3) {
                return ((String)nthArg(args, 2)).contains((String)nthArg(args, 1));
            }
            else if(funcName == 'containsAny' && args.size() == 3) {
                return ((String)nthArg(args, 2)).containsAny((String)nthArg(args, 1));
            }
            else if(funcName == 'containsIgnoreCase' && args.size() == 3) {
                return ((String)nthArg(args, 2)).containsIgnoreCase((String)nthArg(args, 1));
            }
            else if(funcName == 'containsNone' && args.size() == 3) {
                return ((String)nthArg(args, 2)).containsNone((String)nthArg(args, 1));
            }
            else if(funcName == 'containsOnly' && args.size() == 3) {
                return ((String)nthArg(args, 2)).containsOnly((String)nthArg(args, 1));
            }
            else if(funcName == 'containsWhitespace' && args.size() == 2) {
                return ((String)nthArg(args, 1)).containsWhitespace();
            }
            else if(funcName == 'countMatches' && args.size() == 3) {
                return ((String)nthArg(args, 2)).countMatches((String)nthArg(args, 1));
            }
            else if(funcName == 'deleteWhitespace' && args.size() == 2) {
                return ((String)nthArg(args, 1)).deleteWhitespace();
            }
            else if(funcName == 'difference' && args.size() == 3) {
                return ((String)nthArg(args, 2)).difference((String)nthArg(args, 1));
            }
            else if(funcName == 'endsWith' && args.size() == 3) {
                return ((String)nthArg(args, 2)).endsWith((String)nthArg(args, 1));
            }
            else if(funcName == 'endsWithIgnoreCase' && args.size() == 3) {
                return ((String)nthArg(args, 2)).endsWithIgnoreCase((String)nthArg(args, 1));
            }
            else if(funcName == 'equals' && nthArg(args, 1) instanceof String && nthArg(args, 2) instanceof String) {
                return ((String)nthArg(args, 2)).equals((String)nthArg(args, 1));
            }
            else if(funcName == 'equals' && nthArg(args, 2) instanceof String) {
                return ((String)nthArg(args, 2)).equals((Object)nthArg(args, 1));
            }
            else if(funcName == 'equalsIgnoreCase' && args.size() == 3) {
                return ((String)nthArg(args, 2)).equalsIgnoreCase((String)nthArg(args, 1));
            }
            else if(funcName == 'escapeCsv' && args.size() == 2) {
                return ((String)nthArg(args, 1)).escapeCsv();
            }
            else if(funcName == 'escapeEcmaScript' && args.size() == 2) {
                return ((String)nthArg(args, 1)).escapeEcmaScript();
            }
            else if(funcName == 'escapeHtml3' && args.size() == 2) {
                return ((String)nthArg(args, 1)).escapeHtml3();
            }
            else if(funcName == 'escapeHtml4' && args.size() == 2) {
                return ((String)nthArg(args, 1)).escapeHtml4();
            }
            else if(funcName == 'escapeJava' && args.size() == 2) {
                return ((String)nthArg(args, 1)).escapeJava();
            }
            else if(funcName == 'escapeUnicode' && args.size() == 2) {
                return ((String)nthArg(args, 1)).escapeUnicode();
            }
            else if(funcName == 'escapeXml' && args.size() == 2) {
                return ((String)nthArg(args, 1)).escapeXml();
            }
            else if(funcName == 'getChars' && args.size() == 2) {
                return ((String)nthArg(args, 1)).getChars();
            }
            else if(funcName == 'getLevenshteinDistance' && args.size() == 3) {
                return ((String)nthArg(args, 2)).getLevenshteinDistance((String)nthArg(args, 1));
            }
            else if(funcName == 'getLevenshteinDistance' && args.size() == 4) {
                return ((String)nthArg(args, 3)).getLevenshteinDistance((String)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'hashCode' && args.size() == 2) {
                return ((String)nthArg(args, 1)).hashCode();
            }
            else if(funcName == 'indexOf' && args.size() == 3) {
                return ((String)nthArg(args, 2)).indexOf((String)nthArg(args, 1));
            }
            else if(funcName == 'indexOf' && args.size() == 4) {
                return ((String)nthArg(args, 3)).indexOf((String)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'indexOfAny' && args.size() == 3) {
                return ((String)nthArg(args, 2)).indexOfAny((String)nthArg(args, 1));
            }
            else if(funcName == 'indexOfAnyBut' && args.size() == 3) {
                return ((String)nthArg(args, 2)).indexOfAnyBut((String)nthArg(args, 1));
            }
            else if(funcName == 'indexOfChar' && args.size() == 3) {
                return ((String)nthArg(args, 2)).indexOfChar((Integer)nthArg(args, 1));
            }
            else if(funcName == 'indexOfChar' && args.size() == 4) {
                return ((String)nthArg(args, 3)).indexOfChar((Integer)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'indexOfDifference' && args.size() == 3) {
                return ((String)nthArg(args, 2)).indexOfDifference((String)nthArg(args, 1));
            }
            else if(funcName == 'indexOfIgnoreCase' && args.size() == 3) {
                return ((String)nthArg(args, 2)).indexOfIgnoreCase((String)nthArg(args, 1));
            }
            else if(funcName == 'indexOfIgnoreCase' && args.size() == 4) {
                return ((String)nthArg(args, 3)).indexOfIgnoreCase((String)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'isAllLowerCase' && args.size() == 2) {
                return ((String)nthArg(args, 1)).isAllLowerCase();
            }
            else if(funcName == 'isAllUpperCase' && args.size() == 2) {
                return ((String)nthArg(args, 1)).isAllUpperCase();
            }
            else if(funcName == 'isAlpha' && args.size() == 2) {
                return ((String)nthArg(args, 1)).isAlpha();
            }
            else if(funcName == 'isAlphanumeric' && args.size() == 2) {
                return ((String)nthArg(args, 1)).isAlphanumeric();
            }
            else if(funcName == 'isAlphanumericSpace' && args.size() == 2) {
                return ((String)nthArg(args, 1)).isAlphanumericSpace();
            }
            else if(funcName == 'isAlphaSpace' && args.size() == 2) {
                return ((String)nthArg(args, 1)).isAlphaSpace();
            }
            else if(funcName == 'isAsciiPrintable' && args.size() == 2) {
                return ((String)nthArg(args, 1)).isAsciiPrintable();
            }
            else if(funcName == 'isNumeric' && args.size() == 2) {
                return ((String)nthArg(args, 1)).isNumeric();
            }
            else if(funcName == 'isNumericSpace' && args.size() == 2) {
                return ((String)nthArg(args, 1)).isNumericSpace();
            }
            else if(funcName == 'isWhitespace' && args.size() == 2) {
                return ((String)nthArg(args, 1)).isWhitespace();
            }
            else if(funcName == 'lastIndexOf' && args.size() == 3) {
                return ((String)nthArg(args, 2)).lastIndexOf((String)nthArg(args, 1));
            }
            else if(funcName == 'lastIndexOf' && args.size() == 4) {
                return ((String)nthArg(args, 3)).lastIndexOf((String)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'lastIndexOfChar' && args.size() == 3) {
                return ((String)nthArg(args, 2)).lastIndexOfChar((Integer)nthArg(args, 1));
            }
            else if(funcName == 'lastIndexOfChar' && args.size() == 4) {
                return ((String)nthArg(args, 3)).lastIndexOfChar((Integer)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'lastIndexOfIgnoreCase' && args.size() == 3) {
                return ((String)nthArg(args, 2)).lastIndexOfIgnoreCase((String)nthArg(args, 1));
            }
            else if(funcName == 'lastIndexOfIgnoreCase' && args.size() == 4) {
                return ((String)nthArg(args, 3)).lastIndexOfIgnoreCase((String)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'left' && args.size() == 3) {
                return ((String)nthArg(args, 2)).left((Integer)nthArg(args, 1));
            }
            else if(funcName == 'leftPad' && args.size() == 3) {
                return ((String)nthArg(args, 2)).leftPad((Integer)nthArg(args, 1));
            }
            else if(funcName == 'leftPad' && args.size() == 4) {
                return ((String)nthArg(args, 3)).leftPad((Integer)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'length' && args.size() == 2) {
                return ((String)nthArg(args, 1)).length();
            }
            else if(funcName == 'mid' && args.size() == 4) {
                return ((String)nthArg(args, 3)).mid((Integer)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'normalizeSpace' && args.size() == 2) {
                return ((String)nthArg(args, 1)).normalizeSpace();
            }
            else if(funcName == 'offsetByCodePoints' && args.size() == 4) {
                return ((String)nthArg(args, 3)).offsetByCodePoints((Integer)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'remove' && args.size() == 3) {
                return ((String)nthArg(args, 2)).remove((String)nthArg(args, 1));
            }
            else if(funcName == 'removeEnd' && args.size() == 3) {
                return ((String)nthArg(args, 2)).removeEnd((String)nthArg(args, 1));
            }
            else if(funcName == 'removeEndIgnoreCase' && args.size() == 3) {
                return ((String)nthArg(args, 2)).removeEndIgnoreCase((String)nthArg(args, 1));
            }
            else if(funcName == 'removeStart' && args.size() == 3) {
                return ((String)nthArg(args, 2)).removeStart((String)nthArg(args, 1));
            }
            else if(funcName == 'removeStartIgnoreCase' && args.size() == 3) {
                return ((String)nthArg(args, 2)).removeStartIgnoreCase((String)nthArg(args, 1));
            }
            else if(funcName == 'repeat' && args.size() == 3) {
                return ((String)nthArg(args, 2)).repeat((Integer)nthArg(args, 1));
            }
            else if(funcName == 'repeat' && args.size() == 4) {
                return ((String)nthArg(args, 3)).repeat((String)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'replace' && args.size() == 4) {
                return ((String)nthArg(args, 3)).replace((String)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'replaceAll' && args.size() == 4) {
                return ((String)nthArg(args, 3)).replaceAll((String)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'replaceFirst' && args.size() == 4) {
                return ((String)nthArg(args, 3)).replaceFirst((String)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'reverse' && args.size() == 2) {
                return ((String)nthArg(args, 1)).reverse();
            }
            else if(funcName == 'right' && args.size() == 3) {
                return ((String)nthArg(args, 2)).right((Integer)nthArg(args, 1));
            }
            else if(funcName == 'rightPad' && args.size() == 3) {
                return ((String)nthArg(args, 2)).rightPad((Integer)nthArg(args, 1));
            }
            else if(funcName == 'rightPad' && args.size() == 4) {
                return ((String)nthArg(args, 3)).rightPad((Integer)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'split' && args.size() == 3) {
                return ((String)nthArg(args, 2)).split((String)nthArg(args, 1));
            }
            else if(funcName == 'split' && args.size() == 4) {
                return ((String)nthArg(args, 3)).split((String)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'splitByCharacterType' && args.size() == 2) {
                return ((String)nthArg(args, 1)).splitByCharacterType();
            }
            else if(funcName == 'splitByCharacterTypeCamelCase' && args.size() == 2) {
                return ((String)nthArg(args, 1)).splitByCharacterTypeCamelCase();
            }
            else if(funcName == 'startsWith' && args.size() == 3) {
                return ((String)nthArg(args, 2)).startsWith((String)nthArg(args, 1));
            }
            else if(funcName == 'startsWithIgnoreCase' && args.size() == 3) {
                return ((String)nthArg(args, 2)).startsWithIgnoreCase((String)nthArg(args, 1));
            }
            else if(funcName == 'stripHtmlTags' && args.size() == 2) {
                return ((String)nthArg(args, 1)).stripHtmlTags();
            }
            else if(funcName == 'substring' && args.size() == 3) {
                return ((String)nthArg(args, 2)).substring((Integer)nthArg(args, 1));
            }
            else if(funcName == 'substring' && args.size() == 4) {
                return ((String)nthArg(args, 3)).substring((Integer)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'substringAfter' && args.size() == 3) {
                return ((String)nthArg(args, 2)).substringAfter((String)nthArg(args, 1));
            }
            else if(funcName == 'substringAfterLast' && args.size() == 3) {
                return ((String)nthArg(args, 2)).substringAfterLast((String)nthArg(args, 1));
            }
            else if(funcName == 'substringBefore' && args.size() == 3) {
                return ((String)nthArg(args, 2)).substringBefore((String)nthArg(args, 1));
            }
            else if(funcName == 'substringBeforeLast' && args.size() == 3) {
                return ((String)nthArg(args, 2)).substringBeforeLast((String)nthArg(args, 1));
            }
            else if(funcName == 'substringBetween' && args.size() == 3) {
                return ((String)nthArg(args, 2)).substringBetween((String)nthArg(args, 1));
            }
            else if(funcName == 'substringBetween' && args.size() == 4) {
                return ((String)nthArg(args, 3)).substringBetween((String)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'swapCase' && args.size() == 2) {
                return ((String)nthArg(args, 1)).swapCase();
            }
            else if(funcName == 'toLowerCase' && args.size() == 2) {
                return ((String)nthArg(args, 1)).toLowerCase();
            }
            else if(funcName == 'toLowerCase' && args.size() == 3) {
                return ((String)nthArg(args, 2)).toLowerCase((String)nthArg(args, 1));
            }
            else if(funcName == 'toUpperCase' && args.size() == 2) {
                return ((String)nthArg(args, 1)).toUpperCase();
            }
            else if(funcName == 'toUpperCase' && args.size() == 3) {
                return ((String)nthArg(args, 2)).toUpperCase((String)nthArg(args, 1));
            }
            else if(funcName == 'trim' && args.size() == 2) {
                return ((String)nthArg(args, 1)).trim();
            }
            else if(funcName == 'uncapitalize' && args.size() == 2) {
                return ((String)nthArg(args, 1)).uncapitalize();
            }
            else if(funcName == 'unescapeCsv' && args.size() == 2) {
                return ((String)nthArg(args, 1)).unescapeCsv();
            }
            else if(funcName == 'unescapeEcmaScript' && args.size() == 2) {
                return ((String)nthArg(args, 1)).unescapeEcmaScript();
            }
            else if(funcName == 'unescapeHtml3' && args.size() == 2) {
                return ((String)nthArg(args, 1)).unescapeHtml3();
            }
            else if(funcName == 'unescapeHtml4' && args.size() == 2) {
                return ((String)nthArg(args, 1)).unescapeHtml4();
            }
            else if(funcName == 'unescapeJava' && args.size() == 2) {
                return ((String)nthArg(args, 1)).unescapeJava();
            }
            else if(funcName == 'unescapeUnicode' && args.size() == 2) {
                return ((String)nthArg(args, 1)).unescapeUnicode();
            }
            else if(funcName == 'unescapeXml' && args.size() == 2) {
                return ((String)nthArg(args, 1)).unescapeXml();
            }

            return null;
        }
    }

    public static final SystemClsFuncs SystemCls = new SystemClsFuncs();

    public class SystemClsFuncs {
        private Func base = new SystemClsFunc();

        public Func abortJob = base.apply('abortJob');
        public Func assert = base.apply('assert');
        public Func assertEquals = base.apply('assertEquals');
        public Func assertNotEquals = base.apply('assertNotEquals');
        public Func currentPageReference = base.apply('currentPageReference');
        public Func currentTimeMillis = base.apply('currentTimeMillis');
        public Func debug = base.apply('debug');
        public Func enqueueJob = base.apply('enqueueJob');
        public Func equals = base.apply('equals');
        public Func getApplicationReadWriteMode = base.apply('getApplicationReadWriteMode');
        public Func hashCode = base.apply('hashCode');
        public Func isBatch = base.apply('isBatch');
        public Func isFuture = base.apply('isFuture');
        public Func isQueueable = base.apply('isQueueable');
        public Func isScheduled = base.apply('isScheduled');
        public Func now = base.apply('now');
        public Func process = base.apply('process');
        public Func purgeOldAsyncJobs = base.apply('purgeOldAsyncJobs');
        public Func requestVersion = base.apply('requestVersion');
        public Func resetPassword = base.apply('resetPassword');
        public Func resetPasswordWithEmailTemplate = base.apply('resetPasswordWithEmailTemplate');
        public Func setPassword = base.apply('setPassword');
        public Func submit = base.apply('submit');
        public Func today = base.apply('today');
    }

    private class SystemClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'abortJob' && args.size() == 2) {
                System.abortJob((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'assert' && args.size() == 3) {
                System.assert((Boolean)nthArg(args, 1), (Object)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'assertEquals' && args.size() == 4) {
                System.assertEquals((Object)nthArg(args, 1), (Object)nthArg(args, 2), (Object)nthArg(args, 3));
                return null;
            }
            else if(funcName == 'assertNotEquals' && args.size() == 4) {
                System.assertNotEquals((Object)nthArg(args, 1), (Object)nthArg(args, 2), (Object)nthArg(args, 3));
                return null;
            }
            else if(funcName == 'currentPageReference' && args.size() == 1) {
                return System.currentPageReference();
            }
            else if(funcName == 'currentTimeMillis' && args.size() == 1) {
                return System.currentTimeMillis();
            }
            else if(funcName == 'debug' && args.size() == 2) {
                System.debug((Object)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'debug' && args.size() == 3) {
                System.debug((LoggingLevel)nthArg(args, 1), (Object)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'enqueueJob' && args.size() == 2) {
                return System.enqueueJob((Object)nthArg(args, 1));
            }
            else if(funcName == 'equals' && args.size() == 3) {
                return System.equals((Object)nthArg(args, 1), (Object)nthArg(args, 2));
            }
            else if(funcName == 'getApplicationReadWriteMode' && args.size() == 1) {
                return System.getApplicationReadWriteMode();
            }
            else if(funcName == 'hashCode' && args.size() == 2) {
                return System.hashCode((Object)nthArg(args, 1));
            }
            else if(funcName == 'isBatch' && args.size() == 1) {
                return System.isBatch();
            }
            else if(funcName == 'isFuture' && args.size() == 1) {
                return System.isFuture();
            }
            else if(funcName == 'isQueueable' && args.size() == 1) {
                return System.isQueueable();
            }
            else if(funcName == 'isScheduled' && args.size() == 1) {
                return System.isScheduled();
            }
            else if(funcName == 'now' && args.size() == 1) {
                return System.now();
            }
            else if(funcName == 'process' && args.size() == 5) {
                return System.process((List<Id>)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3), (String)nthArg(args, 4));
            }
            else if(funcName == 'purgeOldAsyncJobs' && args.size() == 2) {
                return System.purgeOldAsyncJobs((Date)nthArg(args, 1));
            }
            else if(funcName == 'requestVersion' && args.size() == 1) {
                return System.requestVersion();
            }
            else if(funcName == 'resetPassword' && args.size() == 3) {
                return System.resetPassword((ID)nthArg(args, 1), (Boolean)nthArg(args, 2));
            }
            else if(funcName == 'resetPasswordWithEmailTemplate' && args.size() == 4) {
                return System.resetPasswordWithEmailTemplate((Id)nthArg(args, 1), (Boolean)nthArg(args, 2), (String)nthArg(args, 3));
            }
            else if(funcName == 'setPassword' && args.size() == 3) {
                System.setPassword((ID)nthArg(args, 1), (String)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'submit' && args.size() == 4) {
                return System.submit((List<ID>)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3));
            }
            else if(funcName == 'today' && args.size() == 1) {
                return System.today();
            }

            return null;
        }
    }

    public static final TestClsFuncs TestCls = new TestClsFuncs();

    public class TestClsFuncs {
        private Func base = new TestClsFunc();

        public Func clearApexPageMessages = base.apply('clearApexPageMessages');
        public Func createStub = base.apply('createStub');
        public Func enqueueBatchJobs = base.apply('enqueueBatchJobs');
        public Func getEventBus = base.apply('getEventBus');
        public Func getFlexQueueOrder = base.apply('getFlexQueueOrder');
        public Func getStandardPricebookId = base.apply('getStandardPricebookId');
        public Func invokeContinuationMethod = base.apply('invokeContinuationMethod');
        public Func isRunningTest = base.apply('isRunningTest');
        public Func loadData = base.apply('loadData');
        public Func newSendEmailQuickActionDefaults = base.apply('newSendEmailQuickActionDefaults');
        public Func setContinuationResponse = base.apply('setContinuationResponse');
        public Func setCreatedDate = base.apply('setCreatedDate');
        public Func setCurrentPage = base.apply('setCurrentPage');
        public Func setCurrentPageReference = base.apply('setCurrentPageReference');
        public Func setFixedSearchResults = base.apply('setFixedSearchResults');
        public Func setMock = base.apply('setMock');
        public Func setReadOnlyApplicationMode = base.apply('setReadOnlyApplicationMode');
        public Func startTest = base.apply('startTest');
        public Func stopTest = base.apply('stopTest');
        public Func testInstall = base.apply('testInstall');
        public Func testUninstall = base.apply('testUninstall');
    }

    private class TestClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'clearApexPageMessages' && args.size() == 1) {
                Test.clearApexPageMessages();
                return null;
            }
            else if(funcName == 'createStub' && args.size() == 3) {
                return Test.createStub((System.Type)nthArg(args, 1), (System.StubProvider)nthArg(args, 2));
            }
            else if(funcName == 'enqueueBatchJobs' && args.size() == 2) {
                return Test.enqueueBatchJobs((Integer)nthArg(args, 1));
            }
            else if(funcName == 'getEventBus' && args.size() == 1) {
                return Test.getEventBus();
            }
            else if(funcName == 'getFlexQueueOrder' && args.size() == 1) {
                return Test.getFlexQueueOrder();
            }
            else if(funcName == 'getStandardPricebookId' && args.size() == 1) {
                return Test.getStandardPricebookId();
            }
            else if(funcName == 'invokeContinuationMethod' && args.size() == 3) {
                return Test.invokeContinuationMethod((Object)nthArg(args, 1), (Continuation)nthArg(args, 2));
            }
            else if(funcName == 'isRunningTest' && args.size() == 1) {
                return Test.isRunningTest();
            }
            else if(funcName == 'loadData' && args.size() == 3) {
                return Test.loadData((Schema.SObjectType)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'newSendEmailQuickActionDefaults' && args.size() == 3) {
                return Test.newSendEmailQuickActionDefaults((ID)nthArg(args, 1), (ID)nthArg(args, 2));
            }
            else if(funcName == 'setContinuationResponse' && args.size() == 3) {
                Test.setContinuationResponse((String)nthArg(args, 1), (System.HttpResponse)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'setCreatedDate' && args.size() == 3) {
                Test.setCreatedDate((Id)nthArg(args, 1), (Datetime)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'setCurrentPage' && args.size() == 2) {
                Test.setCurrentPage((PageReference)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setCurrentPageReference' && args.size() == 2) {
                Test.setCurrentPageReference((PageReference)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setFixedSearchResults' && args.size() == 2) {
                Test.setFixedSearchResults((ID[])nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setMock' && args.size() == 3) {
                Test.setMock((Type)nthArg(args, 1), (Object)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'setReadOnlyApplicationMode' && args.size() == 2) {
                Test.setReadOnlyApplicationMode((Boolean)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'startTest' && args.size() == 1) {
                Test.startTest();
                return null;
            }
            else if(funcName == 'stopTest' && args.size() == 1) {
                Test.stopTest();
                return null;
            }
            else if(funcName == 'testInstall' && args.size() == 4) {
                Test.testInstall((InstallHandler)nthArg(args, 1), (Version)nthArg(args, 2), (Boolean)nthArg(args, 3));
                return null;
            }
            else if(funcName == 'testUninstall' && args.size() == 2) {
                Test.testUninstall((UninstallHandler)nthArg(args, 1));
                return null;
            }

            return null;
        }
    }

    public static final TimeClsFuncs TimeCls = new TimeClsFuncs();

    public class TimeClsFuncs {
        private Func base = new TimeClsFunc();

        public Func newInstance = base.apply('newInstance');
        public Func addHours = base.apply('addHours');
        public Func addMilliseconds = base.apply('addMilliseconds');
        public Func addMinutes = base.apply('addMinutes');
        public Func addSeconds = base.apply('addSeconds');
        public Func hour = base.apply('hour');
        public Func millisecond = base.apply('millisecond');
        public Func minute = base.apply('minute');
        public Func second = base.apply('second');
    }

    private class TimeClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'newInstance' && args.size() == 5) {
                return Time.newInstance((Integer)nthArg(args, 1), (Integer)nthArg(args, 2), (Integer)nthArg(args, 3), (Integer)nthArg(args, 4));
            }
            else if(funcName == 'addHours' && args.size() == 3) {
                return ((Time)nthArg(args, 2)).addHours((Integer)nthArg(args, 1));
            }
            else if(funcName == 'addMilliseconds' && args.size() == 3) {
                return ((Time)nthArg(args, 2)).addMilliseconds((Integer)nthArg(args, 1));
            }
            else if(funcName == 'addMinutes' && args.size() == 3) {
                return ((Time)nthArg(args, 2)).addMinutes((Integer)nthArg(args, 1));
            }
            else if(funcName == 'addSeconds' && args.size() == 3) {
                return ((Time)nthArg(args, 2)).addSeconds((Integer)nthArg(args, 1));
            }
            else if(funcName == 'hour' && args.size() == 2) {
                return ((Time)nthArg(args, 1)).hour();
            }
            else if(funcName == 'millisecond' && args.size() == 2) {
                return ((Time)nthArg(args, 1)).millisecond();
            }
            else if(funcName == 'minute' && args.size() == 2) {
                return ((Time)nthArg(args, 1)).minute();
            }
            else if(funcName == 'second' && args.size() == 2) {
                return ((Time)nthArg(args, 1)).second();
            }

            return null;
        }
    }

    public static final TimeZoneClsFuncs TimeZoneCls = new TimeZoneClsFuncs();

    public class TimeZoneClsFuncs {
        private Func base = new TimeZoneClsFunc();

        public Func getTimeZone = base.apply('getTimeZone');
        public Func getDisplayName = base.apply('getDisplayName');
        public Func getID = base.apply('getID');
        public Func getOffset = base.apply('getOffset');
        public Func toString = base.apply('toString');
    }

    private class TimeZoneClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'getTimeZone' && args.size() == 2) {
                return TimeZone.getTimeZone((String)nthArg(args, 1));
            }
            else if(funcName == 'getDisplayName' && args.size() == 2) {
                return ((TimeZone)nthArg(args, 1)).getDisplayName();
            }
            else if(funcName == 'getID' && args.size() == 2) {
                return ((TimeZone)nthArg(args, 1)).getID();
            }
            else if(funcName == 'getOffset' && args.size() == 3) {
                return ((TimeZone)nthArg(args, 2)).getOffset((Datetime)nthArg(args, 1));
            }
            else if(funcName == 'toString' && args.size() == 2) {
                return ((TimeZone)nthArg(args, 1)).toString();
            }

            return null;
        }
    }

    public static final TypeClsFuncs TypeCls = new TypeClsFuncs();

    public class TypeClsFuncs {
        private Func base = new TypeClsFunc();

        public Func forName = base.apply('forName');
        public Func equals = base.apply('equals');
        public Func getName = base.apply('getName');
        public Func hashCode = base.apply('hashCode');
        public Func newInstance = base.apply('newInstance');
        public Func toString = base.apply('toString');
    }

    private class TypeClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'forName' && args.size() == 2) {
                return Type.forName((String)nthArg(args, 1));
            }
            else if(funcName == 'forName' && args.size() == 3) {
                return Type.forName((String)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'equals' && args.size() == 3) {
                return ((Type)nthArg(args, 2)).equals((Object)nthArg(args, 1));
            }
            else if(funcName == 'getName' && args.size() == 2) {
                return ((Type)nthArg(args, 1)).getName();
            }
            else if(funcName == 'hashCode' && args.size() == 2) {
                return ((Type)nthArg(args, 1)).hashCode();
            }
            else if(funcName == 'newInstance' && args.size() == 2) {
                return ((Type)nthArg(args, 1)).newInstance();
            }
            else if(funcName == 'toString' && args.size() == 2) {
                return ((Type)nthArg(args, 1)).toString();
            }

            return null;
        }
    }

    public static final URLClsFuncs URLCls = new URLClsFuncs();

    public class URLClsFuncs {
        private Func base = new URLClsFunc();

        public Func construct = base.apply('construct');
        public Func getCurrentRequestUrl = base.apply('getCurrentRequestUrl');
        public Func getFileFieldURL = base.apply('getFileFieldURL');
        public Func getSalesforceBaseUrl = base.apply('getSalesforceBaseUrl');
        public Func getAuthority = base.apply('getAuthority');
        public Func getDefaultPort = base.apply('getDefaultPort');
        public Func getFile = base.apply('getFile');
        public Func getHost = base.apply('getHost');
        public Func getPath = base.apply('getPath');
        public Func getPort = base.apply('getPort');
        public Func getProtocol = base.apply('getProtocol');
        public Func getQuery = base.apply('getQuery');
        public Func getRef = base.apply('getRef');
        public Func getUserInfo = base.apply('getUserInfo');
        public Func sameFile = base.apply('sameFile');
        public Func toExternalForm = base.apply('toExternalForm');
    }

    private class URLClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 2) {
                return new Url((String)nthArg(args, 1));
            }
            else if(funcName == 'construct' && args.size() == 3) {
                return new Url((Url)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'construct' && args.size() == 4) {
                return new Url((String)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3));
            }
            else if(funcName == 'construct' && args.size() == 5) {
                return new Url((String)nthArg(args, 1), (String)nthArg(args, 2), (Integer)nthArg(args, 3), (String)nthArg(args, 4));
            }
            else if(funcName == 'getCurrentRequestUrl' && args.size() == 1) {
                return URL.getCurrentRequestUrl();
            }
            else if(funcName == 'getFileFieldURL' && args.size() == 3) {
                return URL.getFileFieldURL((String)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'getSalesforceBaseUrl' && args.size() == 1) {
                return URL.getSalesforceBaseUrl();
            }
            else if(funcName == 'getAuthority' && args.size() == 2) {
                return ((Url)nthArg(args, 1)).getAuthority();
            }
            else if(funcName == 'getDefaultPort' && args.size() == 2) {
                return ((Url)nthArg(args, 1)).getDefaultPort();
            }
            else if(funcName == 'getFile' && args.size() == 2) {
                return ((Url)nthArg(args, 1)).getFile();
            }
            else if(funcName == 'getHost' && args.size() == 2) {
                return ((Url)nthArg(args, 1)).getHost();
            }
            else if(funcName == 'getPath' && args.size() == 2) {
                return ((Url)nthArg(args, 1)).getPath();
            }
            else if(funcName == 'getPort' && args.size() == 2) {
                return ((Url)nthArg(args, 1)).getPort();
            }
            else if(funcName == 'getProtocol' && args.size() == 2) {
                return ((Url)nthArg(args, 1)).getProtocol();
            }
            else if(funcName == 'getQuery' && args.size() == 2) {
                return ((Url)nthArg(args, 1)).getQuery();
            }
            else if(funcName == 'getRef' && args.size() == 2) {
                return ((Url)nthArg(args, 1)).getRef();
            }
            else if(funcName == 'getUserInfo' && args.size() == 2) {
                return ((Url)nthArg(args, 1)).getUserInfo();
            }
            else if(funcName == 'sameFile' && args.size() == 3) {
                return ((Url)nthArg(args, 2)).sameFile((System.URL)nthArg(args, 1));
            }
            else if(funcName == 'toExternalForm' && args.size() == 2) {
                return ((Url)nthArg(args, 1)).toExternalForm();
            }

            return null;
        }
    }

    public static final UserInfoClsFuncs UserInfoCls = new UserInfoClsFuncs();

    public class UserInfoClsFuncs {
        private Func base = new UserInfoClsFunc();

        public Func getDefaultCurrency = base.apply('getDefaultCurrency');
        public Func getFirstName = base.apply('getFirstName');
        public Func getLanguage = base.apply('getLanguage');
        public Func getLastName = base.apply('getLastName');
        public Func getLocale = base.apply('getLocale');
        public Func getName = base.apply('getName');
        public Func getOrganizationId = base.apply('getOrganizationId');
        public Func getOrganizationName = base.apply('getOrganizationName');
        public Func getProfileId = base.apply('getProfileId');
        public Func getSessionId = base.apply('getSessionId');
        public Func getTimeZone = base.apply('getTimeZone');
        public Func getUiTheme = base.apply('getUiTheme');
        public Func getUiThemeDisplayed = base.apply('getUiThemeDisplayed');
        public Func getUserEmail = base.apply('getUserEmail');
        public Func getUserId = base.apply('getUserId');
        public Func getUserName = base.apply('getUserName');
        public Func getUserRoleId = base.apply('getUserRoleId');
        public Func getUserType = base.apply('getUserType');
        public Func isCurrentUserLicensed = base.apply('isCurrentUserLicensed');
        public Func isMultiCurrencyOrganization = base.apply('isMultiCurrencyOrganization');
    }

    private class UserInfoClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'getDefaultCurrency' && args.size() == 1) {
                return UserInfo.getDefaultCurrency();
            }
            else if(funcName == 'getFirstName' && args.size() == 1) {
                return UserInfo.getFirstName();
            }
            else if(funcName == 'getLanguage' && args.size() == 1) {
                return UserInfo.getLanguage();
            }
            else if(funcName == 'getLastName' && args.size() == 1) {
                return UserInfo.getLastName();
            }
            else if(funcName == 'getLocale' && args.size() == 1) {
                return UserInfo.getLocale();
            }
            else if(funcName == 'getName' && args.size() == 1) {
                return UserInfo.getName();
            }
            else if(funcName == 'getOrganizationId' && args.size() == 1) {
                return UserInfo.getOrganizationId();
            }
            else if(funcName == 'getOrganizationName' && args.size() == 1) {
                return UserInfo.getOrganizationName();
            }
            else if(funcName == 'getProfileId' && args.size() == 1) {
                return UserInfo.getProfileId();
            }
            else if(funcName == 'getSessionId' && args.size() == 1) {
                return UserInfo.getSessionId();
            }
            else if(funcName == 'getTimeZone' && args.size() == 1) {
                return UserInfo.getTimeZone();
            }
            else if(funcName == 'getUiTheme' && args.size() == 1) {
                return UserInfo.getUiTheme();
            }
            else if(funcName == 'getUiThemeDisplayed' && args.size() == 1) {
                return UserInfo.getUiThemeDisplayed();
            }
            else if(funcName == 'getUserEmail' && args.size() == 1) {
                return UserInfo.getUserEmail();
            }
            else if(funcName == 'getUserId' && args.size() == 1) {
                return UserInfo.getUserId();
            }
            else if(funcName == 'getUserName' && args.size() == 1) {
                return UserInfo.getUserName();
            }
            else if(funcName == 'getUserRoleId' && args.size() == 1) {
                return UserInfo.getUserRoleId();
            }
            else if(funcName == 'getUserType' && args.size() == 1) {
                return UserInfo.getUserType();
            }
            else if(funcName == 'isCurrentUserLicensed' && args.size() == 2) {
                return UserInfo.isCurrentUserLicensed((String)nthArg(args, 1));
            }
            else if(funcName == 'isMultiCurrencyOrganization' && args.size() == 1) {
                return UserInfo.isMultiCurrencyOrganization();
            }

            return null;
        }
    }

    public static final UserManagementClsFuncs UserManagementCls = new UserManagementClsFuncs();

    public class UserManagementClsFuncs {
        private Func base = new UserManagementClsFunc();

        public Func construct = base.apply('construct');
        public Func compareTo = base.apply('compareTo');
        public Func major = base.apply('major');
        public Func minor = base.apply('minor');
        public Func patch = base.apply('patch');
    }

    private class UserManagementClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 3) {
                return new Version((Integer)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'construct' && args.size() == 4) {
                return new Version((Integer)nthArg(args, 1), (Integer)nthArg(args, 2), (Integer)nthArg(args, 3));
            }
            else if(funcName == 'compareTo' && args.size() == 3) {
                return ((Version)nthArg(args, 2)).compareTo((System.Version)nthArg(args, 1));
            }
            else if(funcName == 'major' && args.size() == 2) {
                return ((Version)nthArg(args, 1)).major();
            }
            else if(funcName == 'minor' && args.size() == 2) {
                return ((Version)nthArg(args, 1)).minor();
            }
            else if(funcName == 'patch' && args.size() == 2) {
                return ((Version)nthArg(args, 1)).patch();
            }

            return null;
        }
    }

    public static final VersionClsFuncs VersionCls = new VersionClsFuncs();

    public class VersionClsFuncs {
        private Func base = new VersionClsFunc();

        public Func construct = base.apply('construct');
        public Func compareTo = base.apply('compareTo');
        public Func major = base.apply('major');
        public Func minor = base.apply('minor');
        public Func patch = base.apply('patch');
    }

    private class VersionClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 3) {
                return new Version((Integer)nthArg(args, 1), (Integer)nthArg(args, 2));
            }
            else if(funcName == 'construct' && args.size() == 4) {
                return new Version((Integer)nthArg(args, 1), (Integer)nthArg(args, 2), (Integer)nthArg(args, 3));
            }
            else if(funcName == 'compareTo' && args.size() == 3) {
                return ((Version)nthArg(args, 2)).compareTo((System.Version)nthArg(args, 1));
            }
            else if(funcName == 'major' && args.size() == 2) {
                return ((Version)nthArg(args, 1)).major();
            }
            else if(funcName == 'minor' && args.size() == 2) {
                return ((Version)nthArg(args, 1)).minor();
            }
            else if(funcName == 'patch' && args.size() == 2) {
                return ((Version)nthArg(args, 1)).patch();
            }

            return null;
        }
    }

    public static final WebServiceCalloutClsFuncs WebServiceCalloutCls = new WebServiceCalloutClsFuncs();

    public class WebServiceCalloutClsFuncs {
        private Func base = new WebServiceCalloutClsFunc();

        public Func invoke = base.apply('invoke');
    }

    private class WebServiceCalloutClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'invoke' && args.size() == 5) {
                WebServiceCallout.invoke((Object)nthArg(args, 1), (Object)nthArg(args, 2), (Map<String,Object>)nthArg(args, 3), (List<String>)nthArg(args, 4));
                return null;
            }

            return null;
        }
    }

    public static final XmlStreamReaderClsFuncs XmlStreamReaderCls = new XmlStreamReaderClsFuncs();

    public class XmlStreamReaderClsFuncs {
        private Func base = new XmlStreamReaderClsFunc();

        public Func construct = base.apply('construct');
        public Func getAttributeCount = base.apply('getAttributeCount');
        public Func getAttributeLocalName = base.apply('getAttributeLocalName');
        public Func getAttributeNamespace = base.apply('getAttributeNamespace');
        public Func getAttributePrefix = base.apply('getAttributePrefix');
        public Func getAttributeType = base.apply('getAttributeType');
        public Func getAttributeValue = base.apply('getAttributeValue');
        public Func getAttributeValueAt = base.apply('getAttributeValueAt');
        public Func getEventType = base.apply('getEventType');
        public Func getLocalName = base.apply('getLocalName');
        public Func getLocation = base.apply('getLocation');
        public Func getNamespace = base.apply('getNamespace');
        public Func getNamespaceCount = base.apply('getNamespaceCount');
        public Func getNamespacePrefix = base.apply('getNamespacePrefix');
        public Func getNamespaceURI = base.apply('getNamespaceURI');
        public Func getNamespaceURIAt = base.apply('getNamespaceURIAt');
        public Func getPIData = base.apply('getPIData');
        public Func getPITarget = base.apply('getPITarget');
        public Func getPrefix = base.apply('getPrefix');
        public Func getText = base.apply('getText');
        public Func getVersion = base.apply('getVersion');
        public Func hasName = base.apply('hasName');
        public Func hasNext = base.apply('hasNext');
        public Func hasText = base.apply('hasText');
        public Func isCharacters = base.apply('isCharacters');
        public Func isEndElement = base.apply('isEndElement');
        public Func isStartElement = base.apply('isStartElement');
        public Func isWhiteSpace = base.apply('isWhiteSpace');
        public Func next = base.apply('next');
        public Func nextTag = base.apply('nextTag');
        public Func setCoalescing = base.apply('setCoalescing');
        public Func setNamespaceAware = base.apply('setNamespaceAware');
        public Func toString = base.apply('toString');
    }

    private class XmlStreamReaderClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 2) {
                return new XmlStreamReader((String)nthArg(args, 1));
            }
            else if(funcName == 'getAttributeCount' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).getAttributeCount();
            }
            else if(funcName == 'getAttributeLocalName' && args.size() == 3) {
                return ((XmlStreamReader)nthArg(args, 2)).getAttributeLocalName((Integer)nthArg(args, 1));
            }
            else if(funcName == 'getAttributeNamespace' && args.size() == 3) {
                return ((XmlStreamReader)nthArg(args, 2)).getAttributeNamespace((Integer)nthArg(args, 1));
            }
            else if(funcName == 'getAttributePrefix' && args.size() == 3) {
                return ((XmlStreamReader)nthArg(args, 2)).getAttributePrefix((Integer)nthArg(args, 1));
            }
            else if(funcName == 'getAttributeType' && args.size() == 3) {
                return ((XmlStreamReader)nthArg(args, 2)).getAttributeType((Integer)nthArg(args, 1));
            }
            else if(funcName == 'getAttributeValue' && args.size() == 4) {
                return ((XmlStreamReader)nthArg(args, 3)).getAttributeValue((String)nthArg(args, 1), (String)nthArg(args, 2));
            }
            else if(funcName == 'getAttributeValueAt' && args.size() == 3) {
                return ((XmlStreamReader)nthArg(args, 2)).getAttributeValueAt((Integer)nthArg(args, 1));
            }
            else if(funcName == 'getEventType' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).getEventType();
            }
            else if(funcName == 'getLocalName' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).getLocalName();
            }
            else if(funcName == 'getLocation' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).getLocation();
            }
            else if(funcName == 'getNamespace' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).getNamespace();
            }
            else if(funcName == 'getNamespaceCount' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).getNamespaceCount();
            }
            else if(funcName == 'getNamespacePrefix' && args.size() == 3) {
                return ((XmlStreamReader)nthArg(args, 2)).getNamespacePrefix((Integer)nthArg(args, 1));
            }
            else if(funcName == 'getNamespaceURI' && args.size() == 3) {
                return ((XmlStreamReader)nthArg(args, 2)).getNamespaceURI((String)nthArg(args, 1));
            }
            else if(funcName == 'getNamespaceURIAt' && args.size() == 3) {
                return ((XmlStreamReader)nthArg(args, 2)).getNamespaceURIAt((Integer)nthArg(args, 1));
            }
            else if(funcName == 'getPIData' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).getPIData();
            }
            else if(funcName == 'getPITarget' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).getPITarget();
            }
            else if(funcName == 'getPrefix' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).getPrefix();
            }
            else if(funcName == 'getText' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).getText();
            }
            else if(funcName == 'getVersion' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).getVersion();
            }
            else if(funcName == 'hasName' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).hasName();
            }
            else if(funcName == 'hasNext' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).hasNext();
            }
            else if(funcName == 'hasText' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).hasText();
            }
            else if(funcName == 'isCharacters' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).isCharacters();
            }
            else if(funcName == 'isEndElement' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).isEndElement();
            }
            else if(funcName == 'isStartElement' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).isStartElement();
            }
            else if(funcName == 'isWhiteSpace' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).isWhiteSpace();
            }
            else if(funcName == 'next' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).next();
            }
            else if(funcName == 'nextTag' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).nextTag();
            }
            else if(funcName == 'setCoalescing' && args.size() == 3) {
                ((XmlStreamReader)nthArg(args, 2)).setCoalescing((Boolean)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'setNamespaceAware' && args.size() == 3) {
                ((XmlStreamReader)nthArg(args, 2)).setNamespaceAware((Boolean)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'toString' && args.size() == 2) {
                return ((XmlStreamReader)nthArg(args, 1)).toString();
            }

            return null;
        }
    }

    public static final XmlStreamWriterClsFuncs XmlStreamWriterCls = new XmlStreamWriterClsFuncs();

    public class XmlStreamWriterClsFuncs {
        private Func base = new XmlStreamWriterClsFunc();

        public Func construct = base.apply('construct');
        public Func close = base.apply('close');
        public Func getXmlString = base.apply('getXmlString');
        public Func setDefaultNamespace = base.apply('setDefaultNamespace');
        public Func writeAttribute = base.apply('writeAttribute');
        public Func writeCData = base.apply('writeCData');
        public Func writeCharacters = base.apply('writeCharacters');
        public Func writeComment = base.apply('writeComment');
        public Func writeDefaultNamespace = base.apply('writeDefaultNamespace');
        public Func writeEmptyElement = base.apply('writeEmptyElement');
        public Func writeEndDocument = base.apply('writeEndDocument');
        public Func writeEndElement = base.apply('writeEndElement');
        public Func writeNamespace = base.apply('writeNamespace');
        public Func writeProcessingInstruction = base.apply('writeProcessingInstruction');
        public Func writeStartDocument = base.apply('writeStartDocument');
        public Func writeStartElement = base.apply('writeStartElement');
    }

    private class XmlStreamWriterClsFunc extends Func {
        public override Object execN(List<Object> args) {
            String funcName = (String)args.get(0);

            if(funcName == 'construct' && args.size() == 1) {
                return new XmlStreamWriter();
            }
            else if(funcName == 'close' && args.size() == 2) {
                ((XmlStreamWriter)nthArg(args, 1)).close();
                return null;
            }
            else if(funcName == 'getXmlString' && args.size() == 2) {
                return ((XmlStreamWriter)nthArg(args, 1)).getXmlString();
            }
            else if(funcName == 'setDefaultNamespace' && args.size() == 3) {
                ((XmlStreamWriter)nthArg(args, 2)).setDefaultNamespace((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeAttribute' && args.size() == 6) {
                ((XmlStreamWriter)nthArg(args, 5)).writeAttribute((String)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3), (String)nthArg(args, 4));
                return null;
            }
            else if(funcName == 'writeCData' && args.size() == 3) {
                ((XmlStreamWriter)nthArg(args, 2)).writeCData((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeCharacters' && args.size() == 3) {
                ((XmlStreamWriter)nthArg(args, 2)).writeCharacters((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeComment' && args.size() == 3) {
                ((XmlStreamWriter)nthArg(args, 2)).writeComment((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeDefaultNamespace' && args.size() == 3) {
                ((XmlStreamWriter)nthArg(args, 2)).writeDefaultNamespace((String)nthArg(args, 1));
                return null;
            }
            else if(funcName == 'writeEmptyElement' && args.size() == 5) {
                ((XmlStreamWriter)nthArg(args, 4)).writeEmptyElement((String)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3));
                return null;
            }
            else if(funcName == 'writeEndDocument' && args.size() == 2) {
                ((XmlStreamWriter)nthArg(args, 1)).writeEndDocument();
                return null;
            }
            else if(funcName == 'writeEndElement' && args.size() == 2) {
                ((XmlStreamWriter)nthArg(args, 1)).writeEndElement();
                return null;
            }
            else if(funcName == 'writeNamespace' && args.size() == 4) {
                ((XmlStreamWriter)nthArg(args, 3)).writeNamespace((String)nthArg(args, 1), (String)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'writeProcessingInstruction' && args.size() == 4) {
                ((XmlStreamWriter)nthArg(args, 3)).writeProcessingInstruction((String)nthArg(args, 1), (String)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'writeStartDocument' && args.size() == 4) {
                ((XmlStreamWriter)nthArg(args, 3)).writeStartDocument((String)nthArg(args, 1), (String)nthArg(args, 2));
                return null;
            }
            else if(funcName == 'writeStartElement' && args.size() == 5) {
                ((XmlStreamWriter)nthArg(args, 4)).writeStartElement((String)nthArg(args, 1), (String)nthArg(args, 2), (String)nthArg(args, 3));
                return null;
            }

            return null;
        }
    }

}