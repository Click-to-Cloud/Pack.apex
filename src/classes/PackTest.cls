// Generated by Pack.apex. Please do not modify this file.
@isTest
private class PackTest {
    private static Object defaultValue(String typeName) {
        if(typeName == 'Boolean') {
            return true;
        }
        else if(typeName == 'Integer') {
            return (Integer)0;
        }
        else if(typeName == 'Long') {
            return (Long)0;
        }
        else if(typeName == 'Double') {
            return (Double)0;
        }
        else if(typeName == 'Decimal') {
            return (Decimal)0;
        }
        else if(typeName == 'String') {
            return '';
        }
        else if(typeName == 'SObject') {
            return new Account();
        }
        else if(typeName == 'Date') {
            return Date.newInstance(2018, 1, 1);
        }
        else if(typeName == 'Time') {
            return Time.newInstance(10, 0, 0, 0);
        }
        else if(typeName == 'Datetime') {
            return Datetime.newInstance(2018, 1, 1, 10, 0, 0);
        }
        else if(typeName == 'List<Object>') {
            return new List<Object>();
        }
        else if(typeName == 'Set<Object>') {
            return new Set<Object>();
        }
        else if(typeName == 'Map<String, Object>') {
            return new Map<String, Object>();
        }
        else {
            return null;
        }
    }

    @isTest
    private static void AddressClsTest() {
        try {
            Pack.AddressCls.getCity.runN(new List<Object>{ defaultValue('Address') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.AddressCls.getCountry.runN(new List<Object>{ defaultValue('Address') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.AddressCls.getCountryCode.runN(new List<Object>{ defaultValue('Address') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.AddressCls.getDistance.runN(new List<Object>{ defaultValue('Location'), defaultValue('String'), defaultValue('Address') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.AddressCls.getGeocodeAccuracy.runN(new List<Object>{ defaultValue('Address') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.AddressCls.getLatitude.runN(new List<Object>{ defaultValue('Address') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.AddressCls.getLongitude.runN(new List<Object>{ defaultValue('Address') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.AddressCls.getPostalCode.runN(new List<Object>{ defaultValue('Address') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.AddressCls.getState.runN(new List<Object>{ defaultValue('Address') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.AddressCls.getStateCode.runN(new List<Object>{ defaultValue('Address') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.AddressCls.getStreet.runN(new List<Object>{ defaultValue('Address') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void ApprovalClsTest() {
        try {
            Pack.ApprovalCls.isLocked.runN(new List<Object>{ defaultValue('Id') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.isLocked.runN(new List<Object>{ defaultValue('List<Id>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.isLocked.runN(new List<Object>{ defaultValue('List<SObject>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.isLocked.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.lock.runN(new List<Object>{ defaultValue('List<Id>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.lock.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.lock.runN(new List<Object>{ defaultValue('Id') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.lock.runN(new List<Object>{ defaultValue('List<SObject>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.lock.runN(new List<Object>{ defaultValue('Id'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.lock.runN(new List<Object>{ defaultValue('List<Id>'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.lock.runN(new List<Object>{ defaultValue('SObject'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.lock.runN(new List<Object>{ defaultValue('List<SObject>'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.process.runN(new List<Object>{ defaultValue('Approval.ProcessRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.process.runN(new List<Object>{ defaultValue('Approval.ProcessRequest[]') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.process.runN(new List<Object>{ defaultValue('Approval.ProcessRequest'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.process.runN(new List<Object>{ defaultValue('Approval.ProcessRequest[]'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.unlock.runN(new List<Object>{ defaultValue('Id') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.unlock.runN(new List<Object>{ defaultValue('List<Id>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.unlock.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.unlock.runN(new List<Object>{ defaultValue('List<SObject>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.unlock.runN(new List<Object>{ defaultValue('Id'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.unlock.runN(new List<Object>{ defaultValue('List<Id>'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.unlock.runN(new List<Object>{ defaultValue('SObject'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ApprovalCls.unlock.runN(new List<Object>{ defaultValue('List<SObject>'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void BlobClsTest() {
        try {
            Pack.BlobCls.toPdf.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.BlobCls.valueOf.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.BlobCls.size.runN(new List<Object>{ defaultValue('Blob') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.BlobCls.toString.runN(new List<Object>{ defaultValue('Blob') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void BooleanClsTest() {
        try {
            Pack.BooleanCls.valueOf.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.BooleanCls.valueOf.runN(new List<Object>{ defaultValue('Object') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void BusinessHoursClsTest() {
        try {
            Pack.BusinessHoursCls.add.runN(new List<Object>{ defaultValue('String'), defaultValue('Datetime'), defaultValue('Long') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.BusinessHoursCls.addGmt.runN(new List<Object>{ defaultValue('String'), defaultValue('Datetime'), defaultValue('Long') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.BusinessHoursCls.diff.runN(new List<Object>{ defaultValue('String'), defaultValue('Datetime'), defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.BusinessHoursCls.isWithin.runN(new List<Object>{ defaultValue('String'), defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.BusinessHoursCls.nextStartDate.runN(new List<Object>{ defaultValue('String'), defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void ContinuationClsTest() {
        try {
            Pack.ContinuationCls.construct.runN(new List<Object>{ defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ContinuationCls.getResponse.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ContinuationCls.addHttpRequest.runN(new List<Object>{ defaultValue('System.HttpRequest'), defaultValue('Continuation') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ContinuationCls.getRequests.runN(new List<Object>{ defaultValue('Continuation') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void CookieClsTest() {
        try {
            Pack.CookieCls.construct.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('String'), defaultValue('Integer'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CookieCls.getDomain.runN(new List<Object>{ defaultValue('Cookie') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CookieCls.getMaxAge.runN(new List<Object>{ defaultValue('Cookie') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CookieCls.getName.runN(new List<Object>{ defaultValue('Cookie') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CookieCls.getPath.runN(new List<Object>{ defaultValue('Cookie') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CookieCls.getValue.runN(new List<Object>{ defaultValue('Cookie') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CookieCls.isSecure.runN(new List<Object>{ defaultValue('Cookie') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void CryptoClsTest() {
        try {
            Pack.CryptoCls.decrypt.runN(new List<Object>{ defaultValue('String'), defaultValue('Blob'), defaultValue('Blob'), defaultValue('Blob') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CryptoCls.decryptWithManagedIV.runN(new List<Object>{ defaultValue('String'), defaultValue('Blob'), defaultValue('Blob') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CryptoCls.encrypt.runN(new List<Object>{ defaultValue('String'), defaultValue('Blob'), defaultValue('Blob'), defaultValue('Blob') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CryptoCls.encryptWithManagedIV.runN(new List<Object>{ defaultValue('String'), defaultValue('Blob'), defaultValue('Blob') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CryptoCls.generateDigest.runN(new List<Object>{ defaultValue('String'), defaultValue('Blob') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CryptoCls.generateMac.runN(new List<Object>{ defaultValue('String'), defaultValue('Blob'), defaultValue('Blob') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CryptoCls.getRandomInteger.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CryptoCls.getRandomLong.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CryptoCls.sign.runN(new List<Object>{ defaultValue('String'), defaultValue('Blob'), defaultValue('Blob') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CryptoCls.signWithCertificate.runN(new List<Object>{ defaultValue('String'), defaultValue('Blob'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CryptoCls.signXML.runN(new List<Object>{ defaultValue('String'), defaultValue('Dom.XmlNode'), defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.CryptoCls.signXML.runN(new List<Object>{ defaultValue('String'), defaultValue('Dom.XmlNode'), defaultValue('String'), defaultValue('String'), defaultValue('Dom.XmlNode') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void DatabaseClsTest() {
        try {
            Pack.DatabaseCls.convertLead.runN(new List<Object>{ defaultValue('Database.LeadConvert'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.convertLead.runN(new List<Object>{ defaultValue('List<Database.LeadConvert>'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.countQuery.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.deleteFn.runN(new List<Object>{ defaultValue('SObject'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.deleteFn.runN(new List<Object>{ defaultValue('List<Id>'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.deleteFn.runN(new List<Object>{ defaultValue('List<SObject>'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.deleteFn.runN(new List<Object>{ defaultValue('Id'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.deleteAsync.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.deleteAsync.runN(new List<Object>{ defaultValue('List<SObject>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.deleteAsync.runN(new List<Object>{ defaultValue('SObject'), defaultValue('DataSource.AsyncDeleteCallback') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.deleteAsync.runN(new List<Object>{ defaultValue('List<SObject>'), defaultValue('DataSource.AsyncDeleteCallback') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.deleteImmediate.runN(new List<Object>{ defaultValue('List<SObject>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.deleteImmediate.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.emptyRecycleBin.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.emptyRecycleBin.runN(new List<Object>{ defaultValue('List<Id>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.emptyRecycleBin.runN(new List<Object>{ defaultValue('List<SObject>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.executeBatch.runN(new List<Object>{ defaultValue('Database.Batchable<SObject>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.executeBatch.runN(new List<Object>{ defaultValue('Database.Batchable<SObject>'), defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.getAsyncDeleteResult.runN(new List<Object>{ defaultValue('Database.DeleteResult') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.getAsyncLocator.runN(new List<Object>{ defaultValue('Database.SaveResult') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.getAsyncLocator.runN(new List<Object>{ defaultValue('Database.DeleteResult') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.getAsyncSaveResult.runN(new List<Object>{ defaultValue('Database.SaveResult') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.getQueryLocator.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.insertFn.runN(new List<Object>{ defaultValue('SObject'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.insertFn.runN(new List<Object>{ defaultValue('List<SObject>'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.insertFn.runN(new List<Object>{ defaultValue('SObject'), defaultValue('Database.DMLOptions') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.insertFn.runN(new List<Object>{ defaultValue('List<SObject>'), defaultValue('Database.DMLOptions') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.insertAsync.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.insertAsync.runN(new List<Object>{ defaultValue('List<SObject>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.insertAsync.runN(new List<Object>{ defaultValue('SObject'), defaultValue('DataSource.AsyncSaveCallback') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.insertAsync.runN(new List<Object>{ defaultValue('List<SObject>'), defaultValue('DataSource.AsyncSaveCallback') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.insertImmediate.runN(new List<Object>{ defaultValue('List<SObject>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.insertImmediate.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.mergeFn.runN(new List<Object>{ defaultValue('sObject'), defaultValue('Id') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.mergeFn.runN(new List<Object>{ defaultValue('sObject'), defaultValue('sObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.mergeFn.runN(new List<Object>{ defaultValue('sObject'), defaultValue('List<Id>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.mergeFn.runN(new List<Object>{ defaultValue('sObject'), defaultValue('List<SObject>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.mergeFn.runN(new List<Object>{ defaultValue('sObject'), defaultValue('Id'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.mergeFn.runN(new List<Object>{ defaultValue('sObject'), defaultValue('sObject'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.mergeFn.runN(new List<Object>{ defaultValue('sObject'), defaultValue('List<Id>'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.mergeFn.runN(new List<Object>{ defaultValue('sObject'), defaultValue('List<SObject>'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.query.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.rollbackFn.runN(new List<Object>{ defaultValue('System.Savepoint') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.setSavepoint.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.undeleteFn.runN(new List<Object>{ defaultValue('sObject[]'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.undeleteFn.runN(new List<Object>{ defaultValue('ID'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.undeleteFn.runN(new List<Object>{ defaultValue('ID[]'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.undeleteFn.runN(new List<Object>{ defaultValue('sObject'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.updateFn.runN(new List<Object>{ defaultValue('sObject'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.updateFn.runN(new List<Object>{ defaultValue('sObject[]'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.updateFn.runN(new List<Object>{ defaultValue('sObject'), defaultValue('Database.DmlOptions') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.updateFn.runN(new List<Object>{ defaultValue('sObject[]'), defaultValue('Database.DMLOptions') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.updateAsync.runN(new List<Object>{ defaultValue('List<SObject>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.updateAsync.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.updateAsync.runN(new List<Object>{ defaultValue('List<SObject>'), defaultValue('DataSource.AsyncSaveCallback') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.updateAsync.runN(new List<Object>{ defaultValue('SObject'), defaultValue('DataSource.AsyncSaveCallback') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.updateImmediate.runN(new List<Object>{ defaultValue('List<SObject>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatabaseCls.updateImmediate.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void DateClsTest() {
        try {
            Pack.DateCls.daysInMonth.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.isLeapYear.runN(new List<Object>{ defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.newInstance.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer'), defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.parse.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.today.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.valueOf.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.valueOf.runN(new List<Object>{ defaultValue('Object') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.addDays.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Date') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.addMonths.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Date') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.addYears.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Date') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.day.runN(new List<Object>{ defaultValue('Date') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.dayOfYear.runN(new List<Object>{ defaultValue('Date') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.daysBetween.runN(new List<Object>{ defaultValue('Date'), defaultValue('Date') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.format.runN(new List<Object>{ defaultValue('Date') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.isSameDay.runN(new List<Object>{ defaultValue('Date'), defaultValue('Date') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.month.runN(new List<Object>{ defaultValue('Date') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.monthsBetween.runN(new List<Object>{ defaultValue('Date'), defaultValue('Date') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.toStartOfMonth.runN(new List<Object>{ defaultValue('Date') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.toStartOfWeek.runN(new List<Object>{ defaultValue('Date') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DateCls.year.runN(new List<Object>{ defaultValue('Date') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void DatetimeClsTest() {
        try {
            Pack.DatetimeCls.newInstance.runN(new List<Object>{ defaultValue('Long') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.newInstance.runN(new List<Object>{ defaultValue('Date'), defaultValue('Time') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.newInstance.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer'), defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.newInstance.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer'), defaultValue('Integer'), defaultValue('Integer'), defaultValue('Integer'), defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.newInstanceGmt.runN(new List<Object>{ defaultValue('Date'), defaultValue('Time') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.newInstanceGmt.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer'), defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.newInstanceGmt.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer'), defaultValue('Integer'), defaultValue('Integer'), defaultValue('Integer'), defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.now.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.parse.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.valueOf.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.valueOf.runN(new List<Object>{ defaultValue('Object') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.valueOfGmt.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.addDays.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.addHours.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.addMinutes.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.addMonths.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.addSeconds.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.addYears.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.dateFn.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.dateGMT.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.day.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.dayGmt.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.dayOfYear.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.dayOfYearGmt.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.format.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.format.runN(new List<Object>{ defaultValue('String'), defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.format.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.formatGmt.runN(new List<Object>{ defaultValue('String'), defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.formatLong.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.getTime.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.hour.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.hourGmt.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.isSameDay.runN(new List<Object>{ defaultValue('Datetime'), defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.millisecond.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.millisecondGmt.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.minute.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.minuteGmt.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.month.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.monthGmt.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.second.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.secondGmt.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.timeFn.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.timeGmt.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.year.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DatetimeCls.yearGmt.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void DecimalClsTest() {
        try {
            Pack.DecimalCls.valueOf.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.valueOf.runN(new List<Object>{ defaultValue('Long') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.valueOf.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.abs.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.divide.runN(new List<Object>{ defaultValue('Decimal'), defaultValue('Integer'), defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.divide.runN(new List<Object>{ defaultValue('Decimal'), defaultValue('Integer'), defaultValue('System.RoundingMode'), defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.doubleValue.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.format.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.intValue.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.longValue.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.pow.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.precision.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.round.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.round.runN(new List<Object>{ defaultValue('System.RoundingMode'), defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.scale.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.setScale.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.setScale.runN(new List<Object>{ defaultValue('Integer'), defaultValue('System.RoundingMode'), defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.stripTrailingZeros.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DecimalCls.toPlainString.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void DoubleClsTest() {
        try {
            Pack.DoubleCls.valueOf.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DoubleCls.valueOf.runN(new List<Object>{ defaultValue('Object') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DoubleCls.format.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DoubleCls.intValue.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DoubleCls.longValue.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.DoubleCls.round.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void EncodingUtilClsTest() {
        try {
            Pack.EncodingUtilCls.base64Decode.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.EncodingUtilCls.base64Encode.runN(new List<Object>{ defaultValue('Blob') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.EncodingUtilCls.convertFromHex.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.EncodingUtilCls.convertToHex.runN(new List<Object>{ defaultValue('Blob') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.EncodingUtilCls.urlDecode.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.EncodingUtilCls.urlEncode.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void EventBusClsTest() {
        try {
            Pack.EventBusCls.publish.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.EventBusCls.publish.runN(new List<Object>{ defaultValue('List<SObject>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void FlexQueueClsTest() {
        try {
            Pack.FlexQueueCls.moveAfterJob.runN(new List<Object>{ defaultValue('Id'), defaultValue('Id') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.FlexQueueCls.moveBeforeJob.runN(new List<Object>{ defaultValue('Id'), defaultValue('Id') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.FlexQueueCls.moveJobToEnd.runN(new List<Object>{ defaultValue('Id') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.FlexQueueCls.moveJobToFront.runN(new List<Object>{ defaultValue('Id') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void HttpClsTest() {
        try {
            Pack.HttpCls.send.runN(new List<Object>{ defaultValue('HttpRequest'), defaultValue('Http') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpCls.toString.runN(new List<Object>{ defaultValue('Http') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void HttpRequestClsTest() {
        try {
            Pack.HttpRequestCls.construct.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.getBody.runN(new List<Object>{ defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.getBodyAsBlob.runN(new List<Object>{ defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.getBodyDocument.runN(new List<Object>{ defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.getCompressed.runN(new List<Object>{ defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.getEndpoint.runN(new List<Object>{ defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.getHeader.runN(new List<Object>{ defaultValue('String'), defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.getMethod.runN(new List<Object>{ defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.setBody.runN(new List<Object>{ defaultValue('String'), defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.setBodyAsBlob.runN(new List<Object>{ defaultValue('Blob'), defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.setBodyDocument.runN(new List<Object>{ defaultValue('Dom.Document'), defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.setClientCertificate.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.setClientCertificateName.runN(new List<Object>{ defaultValue('String'), defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.setCompressed.runN(new List<Object>{ defaultValue('Boolean'), defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.setEndpoint.runN(new List<Object>{ defaultValue('String'), defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.setHeader.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.setMethod.runN(new List<Object>{ defaultValue('String'), defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.setTimeout.runN(new List<Object>{ defaultValue('Integer'), defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpRequestCls.toString.runN(new List<Object>{ defaultValue('HttpRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void HttpResponseClsTest() {
        try {
            Pack.HttpResponseCls.getBody.runN(new List<Object>{ defaultValue('HttpResponse') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpResponseCls.getBodyAsBlob.runN(new List<Object>{ defaultValue('HttpResponse') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpResponseCls.getBodyDocument.runN(new List<Object>{ defaultValue('HttpResponse') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpResponseCls.getHeader.runN(new List<Object>{ defaultValue('String'), defaultValue('HttpResponse') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpResponseCls.getHeaderKeys.runN(new List<Object>{ defaultValue('HttpResponse') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpResponseCls.getStatus.runN(new List<Object>{ defaultValue('HttpResponse') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpResponseCls.getStatusCode.runN(new List<Object>{ defaultValue('HttpResponse') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpResponseCls.getXmlStreamReader.runN(new List<Object>{ defaultValue('HttpResponse') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpResponseCls.setBody.runN(new List<Object>{ defaultValue('String'), defaultValue('HttpResponse') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpResponseCls.setBodyAsBlob.runN(new List<Object>{ defaultValue('Blob'), defaultValue('HttpResponse') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpResponseCls.setHeader.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('HttpResponse') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpResponseCls.setStatus.runN(new List<Object>{ defaultValue('String'), defaultValue('HttpResponse') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpResponseCls.setStatusCode.runN(new List<Object>{ defaultValue('Integer'), defaultValue('HttpResponse') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.HttpResponseCls.toString.runN(new List<Object>{ defaultValue('HttpResponse') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void IdClsTest() {
        try {
            Pack.IdCls.valueOf.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.IdCls.getSObjectType.runN(new List<Object>{ defaultValue('Id') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void IdeasClsTest() {
        try {
            Pack.IdeasCls.findSimilar.runN(new List<Object>{ defaultValue('Idea') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.IdeasCls.getAllRecentReplies.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.IdeasCls.getReadRecentReplies.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.IdeasCls.getUnreadRecentReplies.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.IdeasCls.markRead.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void IntegerClsTest() {
        try {
            Pack.IntegerCls.valueOf.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.IntegerCls.valueOf.runN(new List<Object>{ defaultValue('Object') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.IntegerCls.format.runN(new List<Object>{ defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void JSONClsTest() {
        try {
            Pack.JSONCls.createGenerator.runN(new List<Object>{ defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONCls.createParser.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONCls.deserialize.runN(new List<Object>{ defaultValue('String'), defaultValue('System.Type') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONCls.deserializeStrict.runN(new List<Object>{ defaultValue('String'), defaultValue('System.Type') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONCls.deserializeUntyped.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONCls.serialize.runN(new List<Object>{ defaultValue('Object') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONCls.serialize.runN(new List<Object>{ defaultValue('Object'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONCls.serializePretty.runN(new List<Object>{ defaultValue('Object') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONCls.serializePretty.runN(new List<Object>{ defaultValue('Object'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void JSONGeneratorClsTest() {
        try {
            Pack.JSONGeneratorCls.close.runN(new List<Object>{ defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.getAsString.runN(new List<Object>{ defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.isClosed.runN(new List<Object>{ defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeBlob.runN(new List<Object>{ defaultValue('Blob'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeBlobField.runN(new List<Object>{ defaultValue('String'), defaultValue('Blob'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeBoolean.runN(new List<Object>{ defaultValue('Boolean'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeBooleanField.runN(new List<Object>{ defaultValue('String'), defaultValue('Boolean'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeDate.runN(new List<Object>{ defaultValue('Date'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeDateField.runN(new List<Object>{ defaultValue('String'), defaultValue('Date'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeDateTime.runN(new List<Object>{ defaultValue('Datetime'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeDateTimeField.runN(new List<Object>{ defaultValue('String'), defaultValue('Datetime'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeEndArray.runN(new List<Object>{ defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeEndObject.runN(new List<Object>{ defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeFieldName.runN(new List<Object>{ defaultValue('String'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeId.runN(new List<Object>{ defaultValue('ID'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeIdField.runN(new List<Object>{ defaultValue('String'), defaultValue('Id'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeNull.runN(new List<Object>{ defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeNullField.runN(new List<Object>{ defaultValue('String'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeNumber.runN(new List<Object>{ defaultValue('Decimal'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeNumber.runN(new List<Object>{ defaultValue('Integer'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeNumber.runN(new List<Object>{ defaultValue('Long'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeNumber.runN(new List<Object>{ defaultValue('Double'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeNumberField.runN(new List<Object>{ defaultValue('String'), defaultValue('Decimal'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeNumberField.runN(new List<Object>{ defaultValue('String'), defaultValue('Double'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeNumberField.runN(new List<Object>{ defaultValue('String'), defaultValue('Integer'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeNumberField.runN(new List<Object>{ defaultValue('String'), defaultValue('Long'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeObject.runN(new List<Object>{ defaultValue('Object'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeObjectField.runN(new List<Object>{ defaultValue('String'), defaultValue('Object'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeStartArray.runN(new List<Object>{ defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeStartObject.runN(new List<Object>{ defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeString.runN(new List<Object>{ defaultValue('String'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeStringField.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeTime.runN(new List<Object>{ defaultValue('Time'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONGeneratorCls.writeTimeField.runN(new List<Object>{ defaultValue('String'), defaultValue('Time'), defaultValue('JSONGenerator') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void JSONParserClsTest() {
        try {
            Pack.JSONParserCls.clearCurrentToken.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.getBlobValue.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.getBooleanValue.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.getCurrentName.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.getCurrentToken.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.getDatetimeValue.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.getDateValue.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.getDecimalValue.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.getDoubleValue.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.getIdValue.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.getIntegerValue.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.getLastClearedToken.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.getLongValue.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.getText.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.getTimeValue.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.hasCurrentToken.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.nextToken.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.nextValue.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.readValueAs.runN(new List<Object>{ defaultValue('System.Type'), defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.readValueAsStrict.runN(new List<Object>{ defaultValue('System.Type'), defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.JSONParserCls.skipChildren.runN(new List<Object>{ defaultValue('JSONParser') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void LimitsClsTest() {
        try {
            Pack.LimitsCls.getAggregateQueries.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getAsyncCalls.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getCallouts.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getCpuTime.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getDMLRows.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getDMLStatements.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getEmailInvocations.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getFindSimilarCalls.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getFutureCalls.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getHeapSize.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitAggregateQueries.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitAsyncCalls.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitCallouts.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitCpuTime.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitDMLRows.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitDMLStatements.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitEmailInvocations.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitFindSimilarCalls.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitFutureCalls.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitHeapSize.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitMobilePushApexCalls.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitQueries.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitQueryLocatorRows.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitQueryRows.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitQueueableJobs.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitRunAs.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitSavepointRollbacks.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitSavepoints.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getLimitSoslQueries.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getMobilePushApexCalls.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getQueries.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getQueryLocatorRows.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getQueryRows.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getQueueableJobs.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getRunAs.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getSavepointRollbacks.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getSavepoints.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LimitsCls.getSoslQueries.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void ListClsTest() {
        try {
            Pack.ListCls.construct.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.construct.runN(new List<Object>{ defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.construct.runN(new List<Object>{ defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.add.runN(new List<Object>{ defaultValue('Object'), defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.add.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Object'), defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.addAll.runN(new List<Object>{ defaultValue('List<Object>'), defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.addAll.runN(new List<Object>{ defaultValue('Set<Object>'), defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.clear.runN(new List<Object>{ defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.clone.runN(new List<Object>{ defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.contains.runN(new List<Object>{ defaultValue('Object'), defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.deepClone.runN(new List<Object>{ defaultValue('Boolean'), defaultValue('Boolean'), defaultValue('Boolean'), defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.equals.runN(new List<Object>{ defaultValue('List<Object>'), defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.get.runN(new List<Object>{ defaultValue('Integer'), defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.getSObjectType.runN(new List<Object>{ defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.hashCode.runN(new List<Object>{ defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.indexOf.runN(new List<Object>{ defaultValue('Object'), defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.isEmpty.runN(new List<Object>{ defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.iterator.runN(new List<Object>{ defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.remove.runN(new List<Object>{ defaultValue('Integer'), defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.setFn.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Object'), defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.size.runN(new List<Object>{ defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.ListCls.sortFn.runN(new List<Object>{ defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void LocationClsTest() {
        try {
            Pack.LocationCls.getDistance.runN(new List<Object>{ defaultValue('Location'), defaultValue('Location'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LocationCls.getDistance.runN(new List<Object>{ defaultValue('Location'), defaultValue('String'), defaultValue('Location') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LocationCls.newInstance.runN(new List<Object>{ defaultValue('Decimal'), defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LocationCls.getLatitude.runN(new List<Object>{ defaultValue('Location') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LocationCls.getLongitude.runN(new List<Object>{ defaultValue('Location') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void LongClsTest() {
        try {
            Pack.LongCls.valueOf.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LongCls.format.runN(new List<Object>{ defaultValue('Long') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.LongCls.intValue.runN(new List<Object>{ defaultValue('Long') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void MapClsTest() {
        try {
            Pack.MapCls.construct.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.construct.runN(new List<Object>{ defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.clear.runN(new List<Object>{ defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.clone.runN(new List<Object>{ defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.containsKey.runN(new List<Object>{ defaultValue('String'), defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.deepClone.runN(new List<Object>{ defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.equals.runN(new List<Object>{ defaultValue('Map<String, Object>'), defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.get.runN(new List<Object>{ defaultValue('String'), defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.getSObjectType.runN(new List<Object>{ defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.hashCode.runN(new List<Object>{ defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.isEmpty.runN(new List<Object>{ defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.keySet.runN(new List<Object>{ defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.put.runN(new List<Object>{ defaultValue('String'), defaultValue('Object'), defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.putAll.runN(new List<Object>{ defaultValue('Map<String, Object>'), defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.putAll.runN(new List<Object>{ defaultValue('List<SObject>'), defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.remove.runN(new List<Object>{ defaultValue('String'), defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.size.runN(new List<Object>{ defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MapCls.values.runN(new List<Object>{ defaultValue('Map<String, Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void MatcherClsTest() {
        try {
            Pack.MatcherCls.quoteReplacement.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.endFn.runN(new List<Object>{ defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.endFn.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.find.runN(new List<Object>{ defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.find.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.groupFn.runN(new List<Object>{ defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.groupFn.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.groupCount.runN(new List<Object>{ defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.hasAnchoringBounds.runN(new List<Object>{ defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.hasTransparentBounds.runN(new List<Object>{ defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.hitEnd.runN(new List<Object>{ defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.lookingAt.runN(new List<Object>{ defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.matches.runN(new List<Object>{ defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.pattern.runN(new List<Object>{ defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.region.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer'), defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.regionEnd.runN(new List<Object>{ defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.regionStart.runN(new List<Object>{ defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.replaceAll.runN(new List<Object>{ defaultValue('String'), defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.replaceFirst.runN(new List<Object>{ defaultValue('String'), defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.requireEnd.runN(new List<Object>{ defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.reset.runN(new List<Object>{ defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.reset.runN(new List<Object>{ defaultValue('String'), defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.start.runN(new List<Object>{ defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.start.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.useAnchoringBounds.runN(new List<Object>{ defaultValue('Boolean'), defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.usePattern.runN(new List<Object>{ defaultValue('Pattern'), defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MatcherCls.useTransparentBounds.runN(new List<Object>{ defaultValue('Boolean'), defaultValue('Matcher') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void MathClsTest() {
        try {
            Pack.MathCls.abs.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.abs.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.abs.runN(new List<Object>{ defaultValue('Long') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.abs.runN(new List<Object>{ defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.acos.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.acos.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.asin.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.asin.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.atan.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.atan.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.atan2.runN(new List<Object>{ defaultValue('Decimal'), defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.atan2.runN(new List<Object>{ defaultValue('Double'), defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.cbrt.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.cbrt.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.ceil.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.ceil.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.cos.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.cos.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.cosh.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.cosh.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.exp.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.exp.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.floor.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.floor.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.log.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.log.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.log10.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.log10.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.max.runN(new List<Object>{ defaultValue('Decimal'), defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.max.runN(new List<Object>{ defaultValue('Double'), defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.max.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.max.runN(new List<Object>{ defaultValue('Long'), defaultValue('Long') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.min.runN(new List<Object>{ defaultValue('Decimal'), defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.min.runN(new List<Object>{ defaultValue('Double'), defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.min.runN(new List<Object>{ defaultValue('Long'), defaultValue('Long') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.min.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.mod.runN(new List<Object>{ defaultValue('Long'), defaultValue('Long') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.mod.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.pow.runN(new List<Object>{ defaultValue('Double'), defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.random.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.rint.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.rint.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.round.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.round.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.roundToLong.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.roundToLong.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.signum.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.signum.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.sin.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.sin.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.sinh.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.sinh.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.sqrt.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.sqrt.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.tan.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.tan.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.tanh.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MathCls.tanh.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void MultiStaticResourceCalloutMockClsTest() {
        try {
            Pack.MultiStaticResourceCalloutMockCls.construct.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MultiStaticResourceCalloutMockCls.setHeader.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('MultiStaticResourceCalloutMock') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MultiStaticResourceCalloutMockCls.setStaticResource.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('MultiStaticResourceCalloutMock') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MultiStaticResourceCalloutMockCls.setStatus.runN(new List<Object>{ defaultValue('String'), defaultValue('MultiStaticResourceCalloutMock') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.MultiStaticResourceCalloutMockCls.setStatusCode.runN(new List<Object>{ defaultValue('Integer'), defaultValue('MultiStaticResourceCalloutMock') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void NetworkClsTest() {
        try {
            Pack.NetworkCls.construct.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.NetworkCls.communitiesLanding.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.NetworkCls.forwardToAuthPage.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.NetworkCls.getLoginUrl.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.NetworkCls.getLogoutUrl.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.NetworkCls.getNetworkId.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.NetworkCls.getSelfRegUrl.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.NetworkCls.loadAllPackageDefaultNetworkDashboardSettings.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void PatternClsTest() {
        try {
            Pack.PatternCls.compile.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.PatternCls.matches.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.PatternCls.quote.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.PatternCls.matcher.runN(new List<Object>{ defaultValue('String'), defaultValue('Pattern') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.PatternCls.pattern.runN(new List<Object>{ defaultValue('Pattern') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.PatternCls.split.runN(new List<Object>{ defaultValue('String'), defaultValue('Pattern') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.PatternCls.split.runN(new List<Object>{ defaultValue('String'), defaultValue('Integer'), defaultValue('Pattern') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void QuickActionClsTest() {
        try {
            Pack.QuickActionCls.describeAvailableQuickActions.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.QuickActionCls.describeQuickActions.runN(new List<Object>{ defaultValue('List<String>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.QuickActionCls.performQuickAction.runN(new List<Object>{ defaultValue('QuickAction.QuickActionRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.QuickActionCls.performQuickAction.runN(new List<Object>{ defaultValue('QuickAction.QuickActionRequest'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.QuickActionCls.performQuickActions.runN(new List<Object>{ defaultValue('List<QuickAction.QuickActionRequest>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.QuickActionCls.performQuickActions.runN(new List<Object>{ defaultValue('List<QuickAction.QuickActionRequest>'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void RemoteObjectControllerClsTest() {
        try {
            Pack.RemoteObjectControllerCls.create.runN(new List<Object>{ defaultValue('String'), defaultValue('Map<String,Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.RemoteObjectControllerCls.del.runN(new List<Object>{ defaultValue('String'), defaultValue('List<String>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.RemoteObjectControllerCls.retrieveFn.runN(new List<Object>{ defaultValue('String'), defaultValue('List<String>'), defaultValue('Map<String,Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.RemoteObjectControllerCls.updat.runN(new List<Object>{ defaultValue('String'), defaultValue('List<String>'), defaultValue('Map<String,Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void ResetPasswordResultClsTest() {
        try {
            Pack.ResetPasswordResultCls.getPassword.runN(new List<Object>{ defaultValue('ResetPasswordResult') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void RestRequestClsTest() {
        try {
            Pack.RestRequestCls.construct.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.RestRequestCls.addHeader.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('RestRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.RestRequestCls.addParameter.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('RestRequest') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void RestResponseClsTest() {
        try {
            Pack.RestResponseCls.construct.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.RestResponseCls.addHeader.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('RestResponse') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void SObjectClsTest() {
        try {
            Pack.SObjectCls.addError.runN(new List<Object>{ defaultValue('String'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.addError.runN(new List<Object>{ defaultValue('String'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.addError.runN(new List<Object>{ defaultValue('Exception'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.addError.runN(new List<Object>{ defaultValue('Exception'), defaultValue('Boolean'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.addError.runN(new List<Object>{ defaultValue('String'), defaultValue('Boolean'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.addError.runN(new List<Object>{ defaultValue('String'), defaultValue('Boolean'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.clear.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.clone.runN(new List<Object>{ defaultValue('Boolean'), defaultValue('Boolean'), defaultValue('Boolean'), defaultValue('Boolean'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.get.runN(new List<Object>{ defaultValue('Schema.sObjectField'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.get.runN(new List<Object>{ defaultValue('String'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.getCloneSourceId.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.getOptions.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.getPopulatedFieldsAsMap.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.getQuickActionName.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.getSObject.runN(new List<Object>{ defaultValue('Schema.SObjectField'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.getSObject.runN(new List<Object>{ defaultValue('String'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.getSObjects.runN(new List<Object>{ defaultValue('Schema.SObjectField'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.getSObjects.runN(new List<Object>{ defaultValue('String'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.getSObjectType.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.isClone.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.put.runN(new List<Object>{ defaultValue('String'), defaultValue('Object'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.put.runN(new List<Object>{ defaultValue('Schema.SObjectField'), defaultValue('Object'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.putSObject.runN(new List<Object>{ defaultValue('String'), defaultValue('sObject'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.putSObject.runN(new List<Object>{ defaultValue('Schema.SObjectField'), defaultValue('sObject'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.recalculateFormulas.runN(new List<Object>{ defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SObjectCls.setOptions.runN(new List<Object>{ defaultValue('database.DMLOptions'), defaultValue('SObject') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void SchemaClsTest() {
        try {
            Pack.SchemaCls.describeDataCategoryGroups.runN(new List<Object>{ defaultValue('List<String>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SchemaCls.describeDataCategoryGroupStructures.runN(new List<Object>{ defaultValue('List<Schema.DataCategoryGroupSobjectTypePair>'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SchemaCls.describeSObjects.runN(new List<Object>{ defaultValue('List<String>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SchemaCls.describeTabs.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SchemaCls.getGlobalDescribe.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void SearchClsTest() {
        try {
            Pack.SearchCls.find.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SearchCls.query.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SearchCls.suggest.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('Search.SuggestionOption') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void SelectOptionClsTest() {
        try {
            Pack.SelectOptionCls.construct.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SelectOptionCls.construct.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SelectOptionCls.getDisabled.runN(new List<Object>{ defaultValue('SelectOption') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SelectOptionCls.getEscapeItem.runN(new List<Object>{ defaultValue('SelectOption') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SelectOptionCls.getLabel.runN(new List<Object>{ defaultValue('SelectOption') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SelectOptionCls.getValue.runN(new List<Object>{ defaultValue('SelectOption') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SelectOptionCls.setDisabled.runN(new List<Object>{ defaultValue('Boolean'), defaultValue('SelectOption') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SelectOptionCls.setEscapeItem.runN(new List<Object>{ defaultValue('Boolean'), defaultValue('SelectOption') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SelectOptionCls.setLabel.runN(new List<Object>{ defaultValue('String'), defaultValue('SelectOption') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SelectOptionCls.setValue.runN(new List<Object>{ defaultValue('String'), defaultValue('SelectOption') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void SetClsTest() {
        try {
            Pack.SetCls.construct.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.construct.runN(new List<Object>{ defaultValue('List<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.construct.runN(new List<Object>{ defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.add.runN(new List<Object>{ defaultValue('Object'), defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.addAll.runN(new List<Object>{ defaultValue('List<Object>'), defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.addAll.runN(new List<Object>{ defaultValue('Set<Object>'), defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.clear.runN(new List<Object>{ defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.clone.runN(new List<Object>{ defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.contains.runN(new List<Object>{ defaultValue('Object'), defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.containsAll.runN(new List<Object>{ defaultValue('List<Object>'), defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.containsAll.runN(new List<Object>{ defaultValue('Set<Object>'), defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.equals.runN(new List<Object>{ defaultValue('Set<Object>'), defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.hashCode.runN(new List<Object>{ defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.isEmpty.runN(new List<Object>{ defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.remove.runN(new List<Object>{ defaultValue('Object'), defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.removeAll.runN(new List<Object>{ defaultValue('List<Object>'), defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.removeAll.runN(new List<Object>{ defaultValue('Set<Object>'), defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.retainAll.runN(new List<Object>{ defaultValue('List<Object>'), defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.retainAll.runN(new List<Object>{ defaultValue('Set<Object>'), defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.SetCls.size.runN(new List<Object>{ defaultValue('Set<Object>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void StaticResourceCalloutMockClsTest() {
        try {
            Pack.StaticResourceCalloutMockCls.construct.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StaticResourceCalloutMockCls.setHeader.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('StaticResourceCalloutMock') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StaticResourceCalloutMockCls.setStaticResource.runN(new List<Object>{ defaultValue('String'), defaultValue('StaticResourceCalloutMock') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StaticResourceCalloutMockCls.setStatus.runN(new List<Object>{ defaultValue('String'), defaultValue('StaticResourceCalloutMock') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StaticResourceCalloutMockCls.setStatusCode.runN(new List<Object>{ defaultValue('Integer'), defaultValue('StaticResourceCalloutMock') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void StringClsTest() {
        try {
            Pack.StringCls.escapeSingleQuotes.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.format.runN(new List<Object>{ defaultValue('String'), defaultValue('List<String>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.fromCharArray.runN(new List<Object>{ defaultValue('List<Integer>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.getCommonPrefix.runN(new List<Object>{ defaultValue('List<String>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.isBlank.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.isEmpty.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.isNotBlank.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.isNotEmpty.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.joinFn.runN(new List<Object>{ defaultValue('Object'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.valueOf.runN(new List<Object>{ defaultValue('Object') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.valueOf.runN(new List<Object>{ defaultValue('Date') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.valueOf.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.valueOf.runN(new List<Object>{ defaultValue('Decimal') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.valueOf.runN(new List<Object>{ defaultValue('Double') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.valueOf.runN(new List<Object>{ defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.valueOf.runN(new List<Object>{ defaultValue('Long') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.valueOfGmt.runN(new List<Object>{ defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.abbreviate.runN(new List<Object>{ defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.abbreviate.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.capitalize.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.center.runN(new List<Object>{ defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.center.runN(new List<Object>{ defaultValue('Integer'), defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.charAt.runN(new List<Object>{ defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.codePointAt.runN(new List<Object>{ defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.codePointBefore.runN(new List<Object>{ defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.codePointCount.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.compareTo.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.contains.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.containsAny.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.containsIgnoreCase.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.containsNone.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.containsOnly.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.containsWhitespace.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.countMatches.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.deleteWhitespace.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.difference.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.endsWith.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.endsWithIgnoreCase.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.equals.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.equals.runN(new List<Object>{ defaultValue('Object'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.equalsIgnoreCase.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.escapeCsv.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.escapeEcmaScript.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.escapeHtml3.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.escapeHtml4.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.escapeJava.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.escapeUnicode.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.escapeXml.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.getChars.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.getLevenshteinDistance.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.getLevenshteinDistance.runN(new List<Object>{ defaultValue('String'), defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.hashCode.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.indexOf.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.indexOf.runN(new List<Object>{ defaultValue('String'), defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.indexOfAny.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.indexOfAnyBut.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.indexOfChar.runN(new List<Object>{ defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.indexOfChar.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.indexOfDifference.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.indexOfIgnoreCase.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.indexOfIgnoreCase.runN(new List<Object>{ defaultValue('String'), defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.isAllLowerCase.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.isAllUpperCase.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.isAlpha.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.isAlphanumeric.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.isAlphanumericSpace.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.isAlphaSpace.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.isAsciiPrintable.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.isNumeric.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.isNumericSpace.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.isWhitespace.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.lastIndexOf.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.lastIndexOf.runN(new List<Object>{ defaultValue('String'), defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.lastIndexOfChar.runN(new List<Object>{ defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.lastIndexOfChar.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.lastIndexOfIgnoreCase.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.lastIndexOfIgnoreCase.runN(new List<Object>{ defaultValue('String'), defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.left.runN(new List<Object>{ defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.leftPad.runN(new List<Object>{ defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.leftPad.runN(new List<Object>{ defaultValue('Integer'), defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.length.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.mid.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.normalizeSpace.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.offsetByCodePoints.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.remove.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.removeEnd.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.removeEndIgnoreCase.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.removeStart.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.removeStartIgnoreCase.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.repeat.runN(new List<Object>{ defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.repeat.runN(new List<Object>{ defaultValue('String'), defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.replace.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.replaceAll.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.replaceFirst.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.reverse.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.right.runN(new List<Object>{ defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.rightPad.runN(new List<Object>{ defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.rightPad.runN(new List<Object>{ defaultValue('Integer'), defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.split.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.split.runN(new List<Object>{ defaultValue('String'), defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.splitByCharacterType.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.splitByCharacterTypeCamelCase.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.startsWith.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.startsWithIgnoreCase.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.stripHtmlTags.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.substring.runN(new List<Object>{ defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.substring.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.substringAfter.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.substringAfterLast.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.substringBefore.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.substringBeforeLast.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.substringBetween.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.substringBetween.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.swapCase.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.toLowerCase.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.toLowerCase.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.toUpperCase.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.toUpperCase.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.trim.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.uncapitalize.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.unescapeCsv.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.unescapeEcmaScript.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.unescapeHtml3.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.unescapeHtml4.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.unescapeJava.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.unescapeUnicode.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.StringCls.unescapeXml.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void TestClsTest() {
        try {
            Pack.TestCls.clearApexPageMessages.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.createStub.runN(new List<Object>{ defaultValue('System.Type'), defaultValue('System.StubProvider') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.enqueueBatchJobs.runN(new List<Object>{ defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.getEventBus.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.getFlexQueueOrder.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.getStandardPricebookId.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.invokeContinuationMethod.runN(new List<Object>{ defaultValue('Object'), defaultValue('Continuation') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.isRunningTest.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.loadData.runN(new List<Object>{ defaultValue('Schema.SObjectType'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.newSendEmailQuickActionDefaults.runN(new List<Object>{ defaultValue('ID'), defaultValue('ID') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.setContinuationResponse.runN(new List<Object>{ defaultValue('String'), defaultValue('System.HttpResponse') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.setCreatedDate.runN(new List<Object>{ defaultValue('Id'), defaultValue('Datetime') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.setCurrentPage.runN(new List<Object>{ defaultValue('PageReference') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.setCurrentPageReference.runN(new List<Object>{ defaultValue('PageReference') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.setFixedSearchResults.runN(new List<Object>{ defaultValue('ID[]') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.setMock.runN(new List<Object>{ defaultValue('Type'), defaultValue('Object') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.setReadOnlyApplicationMode.runN(new List<Object>{ defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.startTest.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.stopTest.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.testInstall.runN(new List<Object>{ defaultValue('InstallHandler'), defaultValue('Version'), defaultValue('Boolean') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TestCls.testUninstall.runN(new List<Object>{ defaultValue('UninstallHandler') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void TimeClsTest() {
        try {
            Pack.TimeCls.newInstance.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Integer'), defaultValue('Integer'), defaultValue('Integer') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TimeCls.addHours.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Time') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TimeCls.addMilliseconds.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Time') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TimeCls.addMinutes.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Time') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TimeCls.addSeconds.runN(new List<Object>{ defaultValue('Integer'), defaultValue('Time') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TimeCls.hour.runN(new List<Object>{ defaultValue('Time') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TimeCls.millisecond.runN(new List<Object>{ defaultValue('Time') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TimeCls.minute.runN(new List<Object>{ defaultValue('Time') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TimeCls.second.runN(new List<Object>{ defaultValue('Time') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void TimeZoneClsTest() {
        try {
            Pack.TimeZoneCls.getTimeZone.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TimeZoneCls.getDisplayName.runN(new List<Object>{ defaultValue('TimeZone') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TimeZoneCls.getID.runN(new List<Object>{ defaultValue('TimeZone') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TimeZoneCls.getOffset.runN(new List<Object>{ defaultValue('Datetime'), defaultValue('TimeZone') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TimeZoneCls.toString.runN(new List<Object>{ defaultValue('TimeZone') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void TypeClsTest() {
        try {
            Pack.TypeCls.forName.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TypeCls.forName.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TypeCls.equals.runN(new List<Object>{ defaultValue('Object'), defaultValue('Type') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TypeCls.getName.runN(new List<Object>{ defaultValue('Type') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TypeCls.hashCode.runN(new List<Object>{ defaultValue('Type') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TypeCls.newInstance.runN(new List<Object>{ defaultValue('Type') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.TypeCls.toString.runN(new List<Object>{ defaultValue('Type') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void URLClsTest() {
        try {
            Pack.URLCls.construct.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.construct.runN(new List<Object>{ defaultValue('Url'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.construct.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.construct.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('Integer'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.getCurrentRequestUrl.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.getFileFieldURL.runN(new List<Object>{ defaultValue('String'), defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.getSalesforceBaseUrl.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.getAuthority.runN(new List<Object>{ defaultValue('Url') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.getDefaultPort.runN(new List<Object>{ defaultValue('Url') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.getFile.runN(new List<Object>{ defaultValue('Url') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.getHost.runN(new List<Object>{ defaultValue('Url') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.getPath.runN(new List<Object>{ defaultValue('Url') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.getPort.runN(new List<Object>{ defaultValue('Url') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.getProtocol.runN(new List<Object>{ defaultValue('Url') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.getQuery.runN(new List<Object>{ defaultValue('Url') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.getRef.runN(new List<Object>{ defaultValue('Url') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.getUserInfo.runN(new List<Object>{ defaultValue('Url') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.sameFile.runN(new List<Object>{ defaultValue('System.URL'), defaultValue('Url') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.URLCls.toExternalForm.runN(new List<Object>{ defaultValue('Url') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void UserInfoClsTest() {
        try {
            Pack.UserInfoCls.getDefaultCurrency.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getFirstName.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getLanguage.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getLastName.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getLocale.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getName.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getOrganizationId.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getOrganizationName.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getProfileId.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getSessionId.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getTimeZone.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getUiTheme.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getUiThemeDisplayed.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getUserEmail.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getUserId.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getUserName.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getUserRoleId.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.getUserType.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.isCurrentUserLicensed.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.UserInfoCls.isMultiCurrencyOrganization.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void WebServiceCalloutClsTest() {
        try {
            Pack.WebServiceCalloutCls.invoke.runN(new List<Object>{ defaultValue('Object'), defaultValue('Object'), defaultValue('Map<String,Object>'), defaultValue('List<String>') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void XmlStreamReaderClsTest() {
        try {
            Pack.XmlStreamReaderCls.construct.runN(new List<Object>{ defaultValue('String') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getAttributeCount.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getAttributeLocalName.runN(new List<Object>{ defaultValue('Integer'), defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getAttributeNamespace.runN(new List<Object>{ defaultValue('Integer'), defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getAttributePrefix.runN(new List<Object>{ defaultValue('Integer'), defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getAttributeType.runN(new List<Object>{ defaultValue('Integer'), defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getAttributeValue.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getAttributeValueAt.runN(new List<Object>{ defaultValue('Integer'), defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getEventType.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getLocalName.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getLocation.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getNamespace.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getNamespaceCount.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getNamespacePrefix.runN(new List<Object>{ defaultValue('Integer'), defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getNamespaceURI.runN(new List<Object>{ defaultValue('String'), defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getNamespaceURIAt.runN(new List<Object>{ defaultValue('Integer'), defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getPIData.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getPITarget.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getPrefix.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getText.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.getVersion.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.hasName.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.hasNext.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.hasText.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.isCharacters.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.isEndElement.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.isStartElement.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.isWhiteSpace.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.next.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.nextTag.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.setCoalescing.runN(new List<Object>{ defaultValue('Boolean'), defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.setNamespaceAware.runN(new List<Object>{ defaultValue('Boolean'), defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamReaderCls.toString.runN(new List<Object>{ defaultValue('XmlStreamReader') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void XmlStreamWriterClsTest() {
        try {
            Pack.XmlStreamWriterCls.construct.runN(new List<Object>{  });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamWriterCls.close.runN(new List<Object>{ defaultValue('XmlStreamWriter') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamWriterCls.getXmlString.runN(new List<Object>{ defaultValue('XmlStreamWriter') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamWriterCls.setDefaultNamespace.runN(new List<Object>{ defaultValue('String'), defaultValue('XmlStreamWriter') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamWriterCls.writeAttribute.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('String'), defaultValue('String'), defaultValue('XmlStreamWriter') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamWriterCls.writeCData.runN(new List<Object>{ defaultValue('String'), defaultValue('XmlStreamWriter') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamWriterCls.writeCharacters.runN(new List<Object>{ defaultValue('String'), defaultValue('XmlStreamWriter') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamWriterCls.writeComment.runN(new List<Object>{ defaultValue('String'), defaultValue('XmlStreamWriter') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamWriterCls.writeDefaultNamespace.runN(new List<Object>{ defaultValue('String'), defaultValue('XmlStreamWriter') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamWriterCls.writeEmptyElement.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('String'), defaultValue('XmlStreamWriter') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamWriterCls.writeEndDocument.runN(new List<Object>{ defaultValue('XmlStreamWriter') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamWriterCls.writeEndElement.runN(new List<Object>{ defaultValue('XmlStreamWriter') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamWriterCls.writeNamespace.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('XmlStreamWriter') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamWriterCls.writeProcessingInstruction.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('XmlStreamWriter') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamWriterCls.writeStartDocument.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('XmlStreamWriter') });
            System.assert(true);
        }
        catch(Exception e) {
        }

        try {
            Pack.XmlStreamWriterCls.writeStartElement.runN(new List<Object>{ defaultValue('String'), defaultValue('String'), defaultValue('String'), defaultValue('XmlStreamWriter') });
            System.assert(true);
        }
        catch(Exception e) {
        }

    }

    @isTest
    private static void packageTest() {
        System.assert(new PackPackage().export() != null);
    }

}